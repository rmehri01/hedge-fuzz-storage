_RNvXsk_CsfxpM3XgVJph_9arbitraryReNtB5_9Arbitrary9size_hintCs7o2MKagU97t_6parser:
  868|  1.10k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  869|  1.10k|        (0, None)
  870|  1.10k|    }
_RNvCsfxpM3XgVJph_9arbitrary13arbitrary_str:
  838|  1.10k|fn arbitrary_str<'a>(u: &mut Unstructured<'a>, size: usize) -> Result<&'a str> {
  839|  1.10k|    match str::from_utf8(u.peek_bytes(size).unwrap()) {
  840|    874|        Ok(s) => {
  841|    874|            u.bytes(size).unwrap();
  842|    874|            Ok(s)
  843|       |        }
  844|    233|        Err(e) => {
  845|    233|            let i = e.valid_up_to();
  846|    233|            let valid = u.bytes(i).unwrap();
  847|    233|            let s = unsafe {
  848|      0|                debug_assert!(str::from_utf8(valid).is_ok());
  849|    233|                str::from_utf8_unchecked(valid)
  850|    233|            };
  851|    233|            Ok(s)
  852|       |        }
  853|       |    }
  854|  1.10k|}
_RNvXsk_CsfxpM3XgVJph_9arbitraryReNtB5_9Arbitrary19arbitrary_take_rest:
  862|  1.10k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  863|  1.10k|        let size = u.len();
  864|  1.10k|        arbitrary_str(&mut u, size)
  865|  1.10k|    }

_RNvMNtCsfxpM3XgVJph_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|  1.10k|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|  1.10k|        if self.data.len() < size {
  550|      0|            return Err(Error::NotEnoughData);
  551|  1.10k|        }
  552|  1.10k|
  553|  1.10k|        let (for_buf, rest) = self.data.split_at(size);
  554|  1.10k|        self.data = rest;
  555|  1.10k|        Ok(for_buf)
  556|  1.10k|    }
_RNvMNtCsfxpM3XgVJph_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|  1.10k|    pub fn new(data: &'a [u8]) -> Self {
   86|  1.10k|        Unstructured { data }
   87|  1.10k|    }
_RNvMNtCsfxpM3XgVJph_9arbitrary12unstructuredNtB2_12Unstructured3lenB4_:
  108|  1.10k|    pub fn len(&self) -> usize {
  109|  1.10k|        self.data.len()
  110|  1.10k|    }
_RNvMNtCsfxpM3XgVJph_9arbitrary12unstructuredNtB2_12Unstructured10peek_bytes:
  579|  1.10k|    pub fn peek_bytes(&self, size: usize) -> Option<&'a [u8]> {
  580|  1.10k|        self.data.get(..size)
  581|  1.10k|    }

_RNvXs_NtCs8DgC3fJ2RFb_9itertools8peek_nthINtB4_7PeekNthNtNtNtCs9nhK3FOW46N_4core3str4iter5CharsENtNtNtNtBX_4iter6traits8iterator8Iterator4nextCsaGMRm0l0OG4_5hedge:
  148|   538k|    fn next(&mut self) -> Option<Self::Item> {
  149|   538k|        self.buf.pop_front().or_else(|| self.iter.next())
  150|   538k|    }
_RNCNvXs_NtCs8DgC3fJ2RFb_9itertools8peek_nthINtB6_7PeekNthNtNtNtCs9nhK3FOW46N_4core3str4iter5CharsENtNtNtNtBZ_4iter6traits8iterator8Iterator4next0CsaGMRm0l0OG4_5hedge:
  149|  17.0k|        self.buf.pop_front().or_else(|| self.iter.next())
_RINvNtCs8DgC3fJ2RFb_9itertools8peek_nth8peek_nthNtNtNtCs9nhK3FOW46N_4core3str4iter5CharsECsaGMRm0l0OG4_5hedge:
   24|  1.10k|pub fn peek_nth<I>(iterable: I) -> PeekNth<I::IntoIter>
   25|  1.10k|where
   26|  1.10k|    I: IntoIterator,
   27|  1.10k|{
   28|  1.10k|    PeekNth {
   29|  1.10k|        iter: iterable.into_iter().fuse(),
   30|  1.10k|        buf: VecDeque::new(),
   31|  1.10k|    }
   32|  1.10k|}
_RNvMNtCs8DgC3fJ2RFb_9itertools8peek_nthINtB2_7PeekNthNtNtNtCs9nhK3FOW46N_4core3str4iter5CharsE8peek_nthCsaGMRm0l0OG4_5hedge:
   71|   970k|    pub fn peek_nth(&mut self, n: usize) -> Option<&I::Item> {
   72|   970k|        let unbuffered_items = (n + 1).saturating_sub(self.buf.len());
   73|   970k|
   74|   970k|        self.buf.extend(self.iter.by_ref().take(unbuffered_items));
   75|   970k|
   76|   970k|        self.buf.get(n)
   77|   970k|    }
_RNvMNtCs8DgC3fJ2RFb_9itertools8peek_nthINtB2_7PeekNthNtNtNtCs9nhK3FOW46N_4core3str4iter5CharsE4peekCsaGMRm0l0OG4_5hedge:
   39|   964k|    pub fn peek(&mut self) -> Option<&I::Item> {
   40|   964k|        self.peek_nth(0)
   41|   964k|    }

rust_fuzzer_test_input:
  259|  1.10k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  1.10k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  1.10k|
  262|  1.10k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  1.10k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  1.10k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  1.10k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  1.10k|                // get to longer inputs that actually lead to interesting executions
  267|  1.10k|                // quicker.
  268|  1.10k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  1.10k|                }
  271|  1.10k|
  272|  1.10k|                let mut u = Unstructured::new(bytes);
  273|  1.10k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  1.10k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  1.10k|                }
  291|       |
  292|  1.10k|                let data = match data {
  293|  1.10k|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  1.10k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  1.10k|                result.to_libfuzzer_code()
  299|  1.10k|            }
_RNvNvCs7o2MKagU97t_6parser1__19___libfuzzer_sys_run:
  303|  1.10k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|       |                $body
  305|  1.10k|            }
_RNvXCseFm56jpCDOc_13libfuzzer_sysNtB2_6CorpusINtNtCs9nhK3FOW46N_4core7convert4FromuE4from:
   30|  1.10k|    fn from(_: ()) -> Self {
   31|  1.10k|        Self::Keep
   32|  1.10k|    }
LLVMFuzzerTestOneInput:
   58|  1.10k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  1.10k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  1.10k|    });
   63|  1.10k|
   64|  1.10k|    match test_input {
   65|  1.10k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  1.10k|}
_RNvMs_CseFm56jpCDOc_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|  1.10k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  1.10k|        match self {
   42|  1.10k|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|  1.10k|    }
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCseFm56jpCDOc_13libfuzzer_sys15test_input_wrap0B3_:
   59|  1.10k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  1.10k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  1.10k|        rust_fuzzer_test_input(data_slice)
   62|  1.10k|    });

_RNvMs2_NtCs4LeKDsHh25A_9once_cell3impINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE14is_initializedCseFm56jpCDOc_13libfuzzer_sys:
   49|  1.10k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  1.10k|        // An `Acquire` load is enough because that makes all the initialization
   51|  1.10k|        // operations visible to us, and, this being a fast path, weaker
   52|  1.10k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  1.10k|        // `SeqCst` operations on the slow path.
   54|  1.10k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  1.10k|    }

_RNvMs4_NtCs4LeKDsHh25A_9once_cell4syncINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE3getCseFm56jpCDOc_13libfuzzer_sys:
  963|  1.10k|        pub fn get(&self) -> Option<&T> {
  964|  1.10k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  1.10k|                None
  969|       |            }
  970|  1.10k|        }

_RNvXsl_NtCsaGMRm0l0OG4_5hedge3astNtB5_10SourceFileNtB5_7AstNode6syntax:
  527|  1.10k|    fn syntax(&self) -> &SyntaxNode {
  528|  1.10k|        &self.0
  529|  1.10k|    }
_RNvXsl_NtCsaGMRm0l0OG4_5hedge3astNtB5_10SourceFileNtB5_7AstNode4cast:
  520|  1.10k|    fn cast(node: SyntaxNode) -> Option<Self>
  521|  1.10k|    where
  522|  1.10k|        Self: Sized,
  523|  1.10k|    {
  524|  1.10k|        (node.kind() == TreeKind::SourceFile).then_some(Self(node))
  525|  1.10k|    }

_RNCNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB4_5Lexer12trivia_piece0B6_:
  201|  11.1k|                self.eat_while(|char| char != '\n');
_RNCNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB4_5Lexer5ident0B6_:
  112|   105k|        self.eat_while(|char| is_alpha(char) || is_digit(char));
_RNCNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB4_5Lexer7matches0B6_:
  155|  15.0k|        let match_found = self.peek().is_some_and(|char| char == expected);
_RNvNtCsaGMRm0l0OG4_5hedge5lexer8is_alpha:
  236|   255k|fn is_alpha(char: char) -> bool {
  237|   255k|    char.is_alphabetic() || char == '_'
  238|   255k|}
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer7matches:
  154|  15.0k|    fn matches(&mut self, expected: char) -> bool {
  155|  15.0k|        let match_found = self.peek().is_some_and(|char| char == expected);
  156|  15.0k|        if match_found {
  157|  3.91k|            self.chars.next();
  158|  3.91k|            self.current += expected.len_utf8();
  159|  11.1k|        }
  160|       |
  161|  15.0k|        match_found
  162|  15.0k|    }
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer9eat_while:
  223|  42.4k|    fn eat_while(&mut self, predicate: fn(char) -> bool) {
  224|   124k|        while let Some(char) = self.peek()
  225|   123k|            && predicate(char)
  226|  81.6k|        {
  227|  81.6k|            self.advance();
  228|  81.6k|        }
  229|  42.4k|    }
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer6string:
   91|    449|    fn string(&mut self) -> RawToken {
   92|  15.9k|        while let Some(char) = self.advance() {
   93|  15.8k|            if char == '"' {
   94|    401|                return self.make_token(TokenKind::String);
   95|  15.4k|            }
   96|       |        }
   97|       |
   98|     48|        let span = Span {
   99|     48|            start: self.start,
  100|     48|            end: self.current - 1,
  101|     48|        };
  102|     48|        self.errors.push(SyntaxError::UnterminatedString { span });
  103|     48|        self.make_token(TokenKind::String)
  104|    449|    }
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer6number:
  106|  3.23k|    fn number(&mut self) -> RawToken {
  107|  3.23k|        self.eat_while(is_digit);
  108|  3.23k|        self.make_token(TokenKind::Int)
  109|  3.23k|    }
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer5ident:
  111|  37.7k|    fn ident(&mut self) -> RawToken {
  112|  37.7k|        self.eat_while(|char| is_alpha(char) || is_digit(char));
  113|  37.7k|
  114|  37.7k|        let kind = self.ident_kind();
  115|  37.7k|        self.make_token(kind)
  116|  37.7k|    }
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer7advance:
  148|   534k|    fn advance(&mut self) -> Option<char> {
  149|   534k|        let char = self.chars.next()?;
  150|   533k|        self.current += char.len_utf8();
  151|   533k|        Some(char)
  152|   534k|    }
_RNvNtCsaGMRm0l0OG4_5hedge5lexer8is_digit:
  232|   200k|fn is_digit(char: char) -> bool {
  233|   200k|    char.is_ascii_digit()
  234|   200k|}
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer10ident_kind:
  118|  37.7k|    fn ident_kind(&self) -> TokenKind {
  119|  37.7k|        let ident = self.current_text();
  120|  37.7k|        match ident {
  121|  37.7k|            "fn" => T![fn],
  122|  34.1k|            "let" => T![let],
  123|  33.9k|            "return" => T![return],
  124|  33.8k|            "true" => T![true],
  125|  33.6k|            "false" => T![false],
  126|  32.7k|            "if" => T![if],
  127|  30.8k|            "else" => T![else],
  128|  30.4k|            "match" => T![match],
  129|  30.3k|            "for" => T![for],
  130|  25.4k|            "in" => T![in],
  131|  25.3k|            "while" => T![while],
  132|  25.3k|            _ => TokenKind::Ident,
  133|       |        }
  134|  37.7k|    }
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer10next_token:
   51|   386k|    fn next_token(&mut self) -> RawToken {
   52|   386k|        self.leading_trivia();
   53|   386k|
   54|   386k|        self.start = self.current;
   55|       |
   56|   386k|        let Some(next_char) = self.advance() else {
   57|  1.10k|            return self.make_token(TokenKind::Eof);
   58|       |        };
   59|       |
   60|  8.27k|        match next_char {
   61|   119k|            '(' => self.make_token(T!['(']),
   62|  12.5k|            ')' => self.make_token(T![')']),
   63|  51.3k|            '{' => self.make_token(T!['{']),
   64|    782|            '}' => self.make_token(T!['}']),
   65|  5.78k|            ',' => self.make_token(T![,]),
   66|  1.40k|            '.' => self.make_token(T![.]),
   67|    486|            ':' => self.make_token(T![:]),
   68|  1.27k|            ';' => self.make_token(T![;]),
   69|  1.61k|            '+' => self.make_token(T![+]),
   70|  2.20k|            '/' => self.make_token(T![/]),
   71|  2.25k|            '*' => self.make_token(T![*]),
   72|  20.1k|            '|' => self.make_token(T![|]),
   73|  4.01k|            '-' if self.matches('>') => self.make_token(T![->]),
   74|  2.68k|            '-' => self.make_token(T![-]),
   75|  1.49k|            '!' if self.matches('=') => self.make_token(T![!=]),
   76|  1.36k|            '!' => self.make_token(T![!]),
   77|  4.61k|            '=' if self.matches('=') => self.make_token(T![==]),
   78|  2.76k|            '=' if self.matches('>') => self.make_token(T![=>]),
   79|  2.54k|            '=' => self.make_token(T![=]),
   80|  1.53k|            '>' if self.matches('=') => self.make_token(T![>=]),
   81|  1.30k|            '>' => self.make_token(T![>]),
   82|    668|            '<' if self.matches('=') => self.make_token(T![<=]),
   83|    527|            '<' => self.make_token(T![<]),
   84|    449|            '"' => self.string(),
   85|   153k|            char if is_digit(char) => self.number(),
   86|   150k|            char if is_alpha(char) => self.ident(),
   87|   112k|            _ => self.make_token(TokenKind::Unknown),
   88|       |        }
   89|   386k|    }
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer12current_text:
  136|   425k|    fn current_text(&self) -> &str {
  137|   425k|        &self.input[self.start..self.current]
  138|   425k|    }
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer10make_token:
  164|   386k|    fn make_token(&mut self, kind: TokenKind) -> RawToken {
  165|   386k|        let leading_trivia = mem::take(&mut self.leading_trivia);
  166|   386k|
  167|   386k|        let text = self.current_text().to_string();
  168|   386k|        self.start = self.current;
  169|   386k|
  170|   386k|        let trailing_trivia = self.trailing_trivia();
  171|   386k|        RawToken::new(leading_trivia, kind, text, trailing_trivia)
  172|   386k|    }
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer4peek:
  140|   964k|    fn peek(&mut self) -> Option<char> {
  141|   964k|        self.chars.peek().copied()
  142|   964k|    }
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer14leading_trivia:
  174|   386k|    fn leading_trivia(&mut self) {
  175|   421k|        while let Some(char) = self.peek() {
  176|   420k|            let Some(new_piece) = self.trivia_piece(char) else {
  177|   385k|                break;
  178|       |            };
  179|  35.0k|            self.leading_trivia.push(new_piece);
  180|       |        }
  181|   386k|    }
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer9peek_next:
  144|  5.76k|    fn peek_next(&mut self) -> Option<char> {
  145|  5.76k|        self.chars.peek_nth(1).copied()
  146|  5.76k|    }
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer15trailing_trivia:
  183|   386k|    fn trailing_trivia(&mut self) -> Trivia {
  184|   386k|        let mut trailing = Trivia::empty();
  185|       |
  186|   403k|        while let Some(char) = self.peek()
  187|   401k|            && char != '\n'
  188|  16.7k|        {
  189|   392k|            let Some(new_piece) = self.trivia_piece(char) else {
  190|   375k|                break;
  191|       |            };
  192|  16.7k|            trailing.push(new_piece);
  193|       |        }
  194|       |
  195|   386k|        trailing
  196|   386k|    }
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer3new:
   22|  1.10k|    pub fn new(input: &'input str) -> Self {
   23|  1.10k|        Self {
   24|  1.10k|            input,
   25|  1.10k|            chars: itertools::peek_nth(input.chars()),
   26|  1.10k|            leading_trivia: Trivia::empty(),
   27|  1.10k|            start: 0,
   28|  1.10k|            current: 0,
   29|  1.10k|            errors: Vec::new(),
   30|  1.10k|        }
   31|  1.10k|    }
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer12trivia_piece:
  198|   812k|    fn trivia_piece(&mut self, char: char) -> Option<TriviaPiece> {
  199|  51.7k|        let trivia_piece = match char {
  200|  5.76k|            '/' if self.peek_next() == Some('/') => {
  201|  1.50k|                self.eat_while(|char| char != '\n');
  202|  1.50k|                TriviaPiece::Comment(self.current_text().to_string())
  203|       |            }
  204|       |            '\n' => {
  205|  33.3k|                self.advance();
  206|  33.3k|                TriviaPiece::Newline(1)
  207|       |            }
  208|       |            '\t' => {
  209|  11.4k|                self.advance();
  210|  11.4k|                TriviaPiece::Tab(1)
  211|       |            }
  212|       |            ' ' => {
  213|  5.43k|                self.advance();
  214|  5.43k|                TriviaPiece::Space(1)
  215|       |            }
  216|   761k|            _ => return None,
  217|       |        };
  218|       |
  219|  51.7k|        self.start = self.current;
  220|  51.7k|        Some(trivia_piece)
  221|   812k|    }
_RNvMNtCsaGMRm0l0OG4_5hedge5lexerNtB2_5Lexer10all_tokens:
   34|  1.10k|    pub fn all_tokens(mut self) -> (Vec<RawToken>, Vec<SyntaxError>) {
   35|  1.10k|        let mut tokens = Vec::new();
   36|       |
   37|   386k|        loop {
   38|   386k|            let token = self.next_token();
   39|   386k|            let token_kind = token.kind();
   40|   386k|            tokens.push(token);
   41|   386k|
   42|   386k|            if token_kind == TokenKind::Eof {
   43|  1.10k|                break;
   44|   385k|            }
   45|       |        }
   46|       |
   47|  1.10k|        (tokens, self.errors)
   48|  1.10k|    }

_RNvNtCsaGMRm0l0OG4_5hedge6parser8function:
   64|  2.98k|fn function(p: &mut Parser) {
   65|  2.98k|    assert!(p.is_at(T![fn]));
   66|       |
   67|  2.98k|    p.scope(TreeKind::Function, |p| {
   68|       |        p.expect(T![fn]);
   69|       |        p.expect(TokenKind::Ident);
   70|       |        if p.is_at(T!['(']) {
   71|       |            param_list(p, ParamFlavor::Function);
   72|       |        }
   73|       |        if p.is_at(T![->]) {
   74|       |            ret_type_expr(p);
   75|       |        }
   76|       |        if p.is_at(T!['{']) {
   77|       |            expr_block(p);
   78|       |        }
   79|  2.98k|    });
   80|  2.98k|}
_RNvNtCsaGMRm0l0OG4_5hedge6parser10param_list:
  107|  12.3k|fn param_list(p: &mut Parser, flavor: ParamFlavor) {
  108|  12.3k|    let (l_delim, r_delim) = (flavor.l_delim(), flavor.r_delim());
  109|  12.3k|    assert!(p.is_at(l_delim));
  110|       |
  111|  12.3k|    p.scope(TreeKind::ParamList, |p| {
  112|       |        p.expect(l_delim);
  113|       |        while !p.is_at(r_delim) && !p.is_at_eof() {
  114|       |            if p.is_at(TokenKind::Ident) {
  115|       |                param(p, flavor);
  116|       |            } else {
  117|       |                if p.is_at_any(PARAM_LIST_RECOVERY) {
  118|       |                    break;
  119|       |                }
  120|       |                p.advance_with_error("expected parameter");
  121|       |            }
  122|       |        }
  123|       |        p.expect(r_delim);
  124|  12.3k|    });
  125|  12.3k|}
_RNvNtCsaGMRm0l0OG4_5hedge6parser9type_expr:
  164|  2.37k|fn type_expr(p: &mut Parser) {
  165|  2.37k|    p.scope(TreeKind::TypeExpr, |p| {
  166|       |        p.expect(TokenKind::Ident);
  167|  2.37k|    });
  168|  2.37k|}
_RNvNtCsaGMRm0l0OG4_5hedge6parser4expr:
  255|   172k|fn expr(p: &mut Parser) -> Option<MarkClosed> {
  256|   172k|    // TODO: revisit this and table, seems odd to pass eof
  257|   172k|    // We don't have a token to the left yet, so the right should always bind tighter
  258|   172k|    expr_rec(p, TokenKind::Eof)
  259|   172k|}
_RNvNtCsaGMRm0l0OG4_5hedge6parser12expr_literal:
  339|  2.87k|fn expr_literal(p: &mut Parser) -> MarkClosed {
  340|  2.87k|    assert!(p.is_at_any(&[TokenKind::Int, T![true], T![false]]));
  341|       |
  342|  2.87k|    p.scope(TreeKind::ExprLiteral, |p| {
  343|       |        p.advance();
  344|  2.87k|    })
  345|  2.87k|}
_RNvNtCsaGMRm0l0OG4_5hedge6parser7expr_if:
  368|  1.75k|fn expr_if(p: &mut Parser) -> MarkClosed {
  369|  1.75k|    assert!(p.is_at(T![if]));
  370|       |
  371|  1.75k|    p.scope(TreeKind::ExprIf, |p| {
  372|       |        p.expect(T![if]);
  373|       |
  374|       |        let condition_mark = expr(p);
  375|       |        if condition_mark.is_none() {
  376|       |            p.advance_with_error("expected a condition");
  377|       |        }
  378|       |
  379|       |        if p.is_at(T!['{']) {
  380|       |            expr_block(p);
  381|       |        }
  382|       |
  383|       |        if p.is_at(T![else]) {
  384|       |            p.expect(T![else]);
  385|       |
  386|       |            match p.nth(0) {
  387|       |                T!['{'] => {
  388|       |                    expr_block(p);
  389|       |                }
  390|       |                T![if] => {
  391|       |                    expr_if(p);
  392|       |                }
  393|       |                _ => p.advance_with_error("expected a block or another if expression"),
  394|       |            }
  395|       |        }
  396|  1.75k|    })
  397|  1.75k|}
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser5close:
  496|   445k|    fn close(&mut self, mark: MarkOpened, kind: TreeKind) -> MarkClosed {
  497|   445k|        self.events[mark.index] = Event::Open { kind };
  498|   445k|        self.events.push(Event::Close);
  499|   445k|        MarkClosed::new(mark.index)
  500|   445k|    }
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser10build_tree:
  597|  1.10k|    fn build_tree(self) -> (RawNode, Vec<SyntaxError>) {
  598|  1.10k|        let mut tokens = self.tokens.into_iter();
  599|  1.10k|        let mut events = self.events;
  600|  1.10k|        let mut stack = Vec::new();
  601|  1.10k|
  602|  1.10k|        let mut errors = Vec::new();
  603|  1.10k|
  604|  1.10k|        // Special case: pop the last `Close` event to ensure
  605|  1.10k|        // that the stack is non-empty inside the loop.
  606|  1.10k|        assert!(matches!(events.pop(), Some(Event::Close)));
  607|       |
  608|  1.67M|        for event in events {
  609|  1.67M|            match event {
  610|       |                // Starting a new node; just push an empty tree to the stack.
  611|   445k|                Event::Open { kind } => stack.push(RawNodeBuilder::new(kind)),
  612|       |                // A tree is done.
  613|       |                // Pop it off the stack and append to a new current tree.
  614|   443k|                Event::Close => {
  615|   443k|                    let tree = stack.pop().unwrap().build();
  616|   443k|                    stack
  617|   443k|                        .last_mut()
  618|   443k|                        // If we don't pop the last `Close` before this loop,
  619|   443k|                        // this unwrap would trigger for it.
  620|   443k|                        .unwrap()
  621|   443k|                        .add_child(NodeOrToken::Node(tree));
  622|   443k|                }
  623|       |                // Consume a token and append it to the current tree
  624|   386k|                Event::Advance => {
  625|   386k|                    let token = tokens.next().unwrap();
  626|   386k|                    stack
  627|   386k|                        .last_mut()
  628|   386k|                        .unwrap()
  629|   386k|                        .add_child(NodeOrToken::Token(token));
  630|   386k|                }
  631|       |                // An error occurred, record it and continue
  632|   399k|                Event::Error(error) => errors.push(error),
  633|       |            }
  634|       |        }
  635|       |
  636|       |        // Our parser will guarantee that all the trees are closed
  637|       |        // and cover the entirety of tokens.
  638|  1.10k|        assert!(stack.len() == 1);
  639|  1.10k|        assert!(tokens.next().is_none());
  640|       |
  641|  1.10k|        (stack.pop().unwrap().build(), errors)
  642|  1.10k|    }
_RNvMNtCsaGMRm0l0OG4_5hedge6parserNtB2_11ParamFlavor7l_delim:
   89|  12.3k|    fn l_delim(self) -> TokenKind {
   90|  12.3k|        match self {
   91|  2.56k|            Self::Function => T!['('],
   92|  9.75k|            Self::Lambda => T![|],
   93|       |        }
   94|  12.3k|    }
_RNvNtCsaGMRm0l0OG4_5hedge6parser17parse_source_file:
   13|  1.10k|pub fn parse_source_file(input: &str) -> (SourceFile, Vec<SyntaxError>) {
   14|  1.10k|    let (tokens, mut errors) = Lexer::new(input).all_tokens();
   15|  1.10k|    let (raw_tree, parser_errors) = Parser::new(tokens).parse_source_file();
   16|  1.10k|    errors.extend(parser_errors);
   17|  1.10k|    let syntax_tree = SyntaxNode::root(raw_tree);
   18|  1.10k|
   19|  1.10k|    (
   20|  1.10k|        SourceFile::cast(syntax_tree).expect("root of syntax tree should be a source file"),
   21|  1.10k|        errors,
   22|  1.10k|    )
   23|  1.10k|}
_RNvNvNtCsaGMRm0l0OG4_5hedge6parser19right_binds_tighter9tightness:
  294|   164k|    fn tightness(kind: TokenKind) -> Option<usize> {
  295|   164k|        [
  296|   164k|            // Precedence table:
  297|   164k|            T![=],
  298|   164k|            T![+],
  299|   164k|            T![-],
  300|   164k|            T![*],
  301|   164k|            T![/],
  302|   164k|        ]
  303|   164k|        .iter()
  304|   164k|        .position(|level| level == &kind)
  305|   164k|    }
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser17parse_source_file:
  476|  1.10k|    pub fn parse_source_file(mut self) -> (RawNode, Vec<SyntaxError>) {
  477|  1.10k|        source_file(&mut self);
  478|  1.10k|        self.build_tree()
  479|  1.10k|    }
_RNvNtCsaGMRm0l0OG4_5hedge6parser14expr_delimited:
  320|   157k|fn expr_delimited(p: &mut Parser) -> Option<MarkClosed> {
  321|   157k|    let mark_closed = match p.nth(0) {
  322|  2.87k|        TokenKind::Int | T![true] | T![false] => expr_literal(p),
  323|  15.3k|        TokenKind::Ident => expr_ident(p),
  324|  46.5k|        T!['{'] => expr_block(p),
  325|  76.4k|        T!['('] => expr_paren(p),
  326|  1.75k|        T![if] => expr_if(p),
  327|  4.39k|        T![for] => expr_for(p),
  328|  9.75k|        T![|] => expr_lambda(p),
  329|       |        _ => {
  330|      0|            assert!(!p.is_at_any(EXPR_FIRST));
  331|      0|            return None;
  332|       |        }
  333|       |    };
  334|       |
  335|   157k|    Some(mark_closed)
  336|   157k|}
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser4open:
  488|   402k|    fn open(&mut self) -> MarkOpened {
  489|   402k|        let mark = MarkOpened::new(self.events.len());
  490|   402k|        self.events.push(Event::Open {
  491|   402k|            kind: TreeKind::Unknown,
  492|   402k|        });
  493|   402k|        mark
  494|   402k|    }
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser3nth:
  522|  2.69M|    fn nth(&self, lookahead: usize) -> TokenKind {
  523|  2.69M|        let fuel = self.fuel.get();
  524|  2.69M|        assert!(fuel != 0, "parser is stuck");
  525|  2.69M|        self.fuel.set(fuel - 1);
  526|  2.69M|
  527|  2.69M|        self.tokens
  528|  2.69M|            .get(self.pos + lookahead)
  529|  2.69M|            .map_or(TokenKind::Eof, |it| it.kind())
  530|  2.69M|    }
_RNvNtCsaGMRm0l0OG4_5hedge6parser8expr_rec:
  262|   175k|fn expr_rec(p: &mut Parser, left: TokenKind) -> Option<MarkClosed> {
  263|   175k|    if !p.is_at_any(EXPR_FIRST) {
  264|       |        // TODO: p.err_recovery?
  265|  18.4k|        p.advance_with_error("expected expression");
  266|  18.4k|        return None;
  267|   157k|    }
  268|       |
  269|   157k|    let mut lhs = expr_delimited(p)?;
  270|       |
  271|       |    // ExprCall = Expr ArgList
  272|   171k|    while p.is_at(T!['(']) {
  273|  14.5k|        let mark = p.open_before(lhs);
  274|  14.5k|        arg_list(p);
  275|  14.5k|        lhs = p.close(mark, TreeKind::ExprCall);
  276|  14.5k|    }
  277|       |
  278|   160k|    loop {
  279|   160k|        let right = p.nth(0);
  280|   160k|        if right_binds_tighter(left, right) {
  281|  3.26k|            let mark = p.open_before(lhs);
  282|  3.26k|            p.advance();
  283|  3.26k|            // TODO: rhs none
  284|  3.26k|            expr_rec(p, right);
  285|  3.26k|            lhs = p.close(mark, TreeKind::ExprBinary);
  286|  3.26k|        } else {
  287|   157k|            return Some(lhs);
  288|       |        }
  289|       |    }
  290|   175k|}
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser16is_out_of_tokens:
  532|   386k|    fn is_out_of_tokens(&self) -> bool {
  533|   386k|        self.pos == self.tokens.len()
  534|   386k|    }
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser3eat:
  548|   388k|    fn eat(&mut self, kind: TokenKind) -> bool {
  549|   388k|        if self.is_at(kind) {
  550|   177k|            self.advance();
  551|   177k|            true
  552|       |        } else {
  553|   211k|            false
  554|       |        }
  555|   388k|    }
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser18advance_with_error:
  575|   190k|    fn advance_with_error(&mut self, error: &str) {
  576|   190k|        let m = self.open();
  577|   190k|
  578|   190k|        let current = &self.tokens[self.pos];
  579|   190k|        self.error(SyntaxError::Generic {
  580|   190k|            message: error.to_string(),
  581|   190k|            span: Span {
  582|   190k|                start: self.offset,
  583|   190k|                end: self.offset + current.text_len(),
  584|   190k|            },
  585|   190k|        });
  586|   190k|        if !self.is_at_eof() {
  587|   187k|            self.advance();
  588|   187k|        }
  589|       |
  590|   190k|        self.close(m, TreeKind::Unknown);
  591|   190k|    }
_RNvMs0_NtCsaGMRm0l0OG4_5hedge6parserNtB5_10MarkOpened3new:
  646|   445k|    fn new(index: usize) -> Self {
  647|   445k|        Self { index }
  648|   445k|    }
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser5is_at:
  536|  1.81M|    fn is_at(&self, kind: TokenKind) -> bool {
  537|  1.81M|        self.nth(0) == kind
  538|  1.81M|    }
_RNvNtCsaGMRm0l0OG4_5hedge6parser8arg_list:
  436|  14.5k|fn arg_list(p: &mut Parser) {
  437|  14.5k|    assert!(p.is_at(T!['(']));
  438|       |
  439|  14.5k|    p.scope(TreeKind::ArgList, |p| {
  440|       |        p.expect(T!['(']);
  441|       |        while !p.is_at(T![')']) && !p.is_at_eof() {
  442|       |            if p.is_at_any(EXPR_FIRST) {
  443|       |                arg(p);
  444|       |            } else {
  445|       |                break;
  446|       |            }
  447|       |        }
  448|       |        p.expect(T![')']);
  449|  14.5k|    });
  450|  14.5k|}
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser3new:
  465|  1.10k|    pub fn new(tokens: Vec<RawToken>) -> Self {
  466|  1.10k|        Self {
  467|  1.10k|            tokens,
  468|  1.10k|            pos: 0,
  469|  1.10k|            offset: 0,
  470|  1.10k|            fuel: Cell::new(Self::MAX_FUEL),
  471|  1.10k|            events: Vec::new(),
  472|  1.10k|        }
  473|  1.10k|    }
_RNvNtCsaGMRm0l0OG4_5hedge6parser8stmt_let:
  222|    102|fn stmt_let(p: &mut Parser) {
  223|    102|    assert!(p.is_at(T![let]));
  224|       |
  225|    102|    p.scope(TreeKind::StmtLet, |p| {
  226|       |        p.expect(T![let]);
  227|       |        p.expect(TokenKind::Ident);
  228|       |        p.expect(T![=]);
  229|       |        expr(p);
  230|       |        p.expect(T![;]);
  231|    102|    });
  232|    102|}
_RNvNtCsaGMRm0l0OG4_5hedge6parser8expr_for:
  401|  4.39k|fn expr_for(p: &mut Parser) -> MarkClosed {
  402|  4.39k|    assert!(p.is_at(T![for]));
  403|       |
  404|  4.39k|    p.scope(TreeKind::ExprFor, |p| {
  405|       |        p.expect(T![for]);
  406|       |        p.expect(TokenKind::Ident);
  407|       |        p.expect(T![in]);
  408|       |
  409|       |        expr(p);
  410|       |        p.expect(T![.]);
  411|       |        p.expect(T![.]);
  412|       |        expr(p);
  413|       |
  414|       |        // TODO: do we need to check if at every time?
  415|       |        if p.is_at(T!['{']) {
  416|       |            expr_block(p);
  417|       |        }
  418|  4.39k|    })
  419|  4.39k|}
_RNvNtCsaGMRm0l0OG4_5hedge6parser3arg:
  453|  14.6k|fn arg(p: &mut Parser) {
  454|  14.6k|    p.scope(TreeKind::Arg, |p| {
  455|       |        expr(p);
  456|       |        if !p.is_at(T![')']) {
  457|       |            p.expect(T![,]);
  458|       |        }
  459|  14.6k|    });
  460|  14.6k|}
_RNvMNtCsaGMRm0l0OG4_5hedge6parserNtB2_11ParamFlavor7r_delim:
   96|  16.5k|    fn r_delim(self) -> TokenKind {
   97|  16.5k|        match self {
   98|  4.68k|            Self::Function => T![')'],
   99|  11.9k|            Self::Lambda => T![|],
  100|       |        }
  101|  16.5k|    }
_RNvNtCsaGMRm0l0OG4_5hedge6parser10expr_paren:
  357|  76.4k|fn expr_paren(p: &mut Parser) -> MarkClosed {
  358|  76.4k|    assert!(p.is_at(T!['(']));
  359|       |
  360|  76.4k|    p.scope(TreeKind::ExprParen, |p| {
  361|       |        p.expect(T!['(']);
  362|       |        expr(p);
  363|       |        p.expect(T![')']);
  364|  76.4k|    })
  365|  76.4k|}
_RNvNtCsaGMRm0l0OG4_5hedge6parser10expr_block:
  189|  48.1k|fn expr_block(p: &mut Parser) -> MarkClosed {
  190|  48.1k|    assert!(p.is_at(T!['{']));
  191|       |
  192|  48.1k|    p.scope(TreeKind::ExprBlock, |p| {
  193|       |        p.expect(T!['{']);
  194|       |        while !p.is_at(T!['}']) && !p.is_at_eof() {
  195|       |            match p.nth(0) {
  196|       |                T![let] => stmt_let(p),
  197|       |                T![return] => stmt_return(p),
  198|       |                _ if p.is_at_any(EXPR_FIRST) => match expr(p) {
  199|       |                    Some(mark) => {
  200|       |                        if !p.is_at(T!['}']) && !p.is_at_eof() {
  201|       |                            // StmtExpr = Expr ';'
  202|       |                            let stmt_expr_mark = p.open_before(mark);
  203|       |                            p.expect(T![;]);
  204|       |                            p.close(stmt_expr_mark, TreeKind::StmtExpr);
  205|       |                        }
  206|       |                    }
  207|       |                    None => p.advance_with_error("expected an expression"),
  208|       |                },
  209|       |                _ => {
  210|       |                    if p.is_at_any(STMT_RECOVERY) {
  211|       |                        break;
  212|       |                    }
  213|       |                    p.advance_with_error("expected statement");
  214|       |                }
  215|       |            }
  216|       |        }
  217|       |        p.expect(T!['}']);
  218|  48.1k|    })
  219|  48.1k|}
_RNvNtCsaGMRm0l0OG4_5hedge6parser11expr_lambda:
  422|  9.75k|fn expr_lambda(p: &mut Parser) -> MarkClosed {
  423|  9.75k|    assert!(p.is_at(T![|]));
  424|       |
  425|  9.75k|    p.scope(TreeKind::ExprLambda, |p| {
  426|       |        param_list(p, ParamFlavor::Lambda);
  427|       |        if p.is_at(T![->]) {
  428|       |            ret_type_expr(p);
  429|       |        }
  430|       |
  431|       |        expr(p);
  432|  9.75k|    })
  433|  9.75k|}
_RNvNtCsaGMRm0l0OG4_5hedge6parser19right_binds_tighter:
  293|   160k|fn right_binds_tighter(left: TokenKind, right: TokenKind) -> bool {
  294|       |    fn tightness(kind: TokenKind) -> Option<usize> {
  295|       |        [
  296|       |            // Precedence table:
  297|       |            T![=],
  298|       |            T![+],
  299|       |            T![-],
  300|       |            T![*],
  301|       |            T![/],
  302|       |        ]
  303|       |        .iter()
  304|       |        .position(|level| level == &kind)
  305|       |    }
  306|       |
  307|   160k|    let Some(right_tightness) = tightness(right) else {
  308|   156k|        return false;
  309|       |    };
  310|  3.94k|    let Some(left_tightness) = tightness(left) else {
  311|       |        // We should only not have a left precedence when we start parsing an expression
  312|  2.90k|        assert!(left == TokenKind::Eof);
  313|  2.90k|        return true;
  314|       |    };
  315|       |
  316|  1.04k|    right_tightness > left_tightness
  317|   160k|}
_RNvNtCsaGMRm0l0OG4_5hedge6parser5param:
  129|  4.26k|fn param(p: &mut Parser, flavor: ParamFlavor) {
  130|  4.26k|    assert!(p.is_at(TokenKind::Ident));
  131|       |
  132|  4.26k|    p.scope(TreeKind::Param, |p| {
  133|       |        p.expect(TokenKind::Ident);
  134|       |
  135|       |        match flavor {
  136|       |            ParamFlavor::Function => {
  137|       |                p.expect(T![:]);
  138|       |                type_expr(p);
  139|       |            }
  140|       |            ParamFlavor::Lambda => {
  141|       |                if p.eat(T![:]) {
  142|       |                    type_expr(p);
  143|       |                }
  144|       |            }
  145|       |        }
  146|       |
  147|       |        if !p.is_at(flavor.r_delim()) {
  148|       |            p.expect(T![,]);
  149|       |        }
  150|  4.26k|    });
  151|  4.26k|}
_RNvNtCsaGMRm0l0OG4_5hedge6parser10expr_ident:
  348|  15.3k|fn expr_ident(p: &mut Parser) -> MarkClosed {
  349|  15.3k|    assert!(p.is_at(TokenKind::Ident));
  350|       |
  351|  15.3k|    p.scope(TreeKind::ExprIdent, |p| {
  352|       |        p.advance();
  353|  15.3k|    })
  354|  15.3k|}
_RNvNtCsaGMRm0l0OG4_5hedge6parser11stmt_return:
  235|    107|fn stmt_return(p: &mut Parser) {
  236|    107|    assert!(p.is_at(T![return]));
  237|       |
  238|    107|    p.scope(TreeKind::StmtReturn, |p| {
  239|       |        p.expect(T![return]);
  240|       |        expr(p);
  241|       |        p.expect(T![;]);
  242|    107|    });
  243|    107|}
_RNvNtCsaGMRm0l0OG4_5hedge6parser11source_file:
   50|  1.10k|fn source_file(p: &mut Parser) {
   51|  1.10k|    p.scope(TreeKind::SourceFile, |p| {
   52|       |        while !p.is_at_eof() {
   53|       |            if p.is_at(T![fn]) {
   54|       |                function(p);
   55|       |            } else {
   56|       |                p.advance_with_error("expected a function");
   57|       |            }
   58|       |        }
   59|       |        p.expect(TokenKind::Eof);
   60|  1.10k|    });
   61|  1.10k|}
_RNvNtCsaGMRm0l0OG4_5hedge6parser13ret_type_expr:
  154|    190|fn ret_type_expr(p: &mut Parser) {
  155|    190|    assert!(p.is_at(T![->]));
  156|       |
  157|    190|    p.scope(TreeKind::RetTypeExpr, |p| {
  158|       |        p.expect(T![->]);
  159|       |        type_expr(p);
  160|    190|    });
  161|    190|}
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser7advance:
  513|   386k|    fn advance(&mut self) {
  514|   386k|        assert!(!self.is_out_of_tokens());
  515|   386k|        self.fuel.set(Self::MAX_FUEL);
  516|   386k|
  517|   386k|        self.events.push(Event::Advance);
  518|   386k|        self.offset += self.tokens[self.pos].total_len();
  519|   386k|        self.pos += 1;
  520|   386k|    }
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser11open_before:
  502|  42.9k|    fn open_before(&mut self, closed: MarkClosed) -> MarkOpened {
  503|  42.9k|        let opened = MarkOpened::new(closed.index);
  504|  42.9k|        self.events.insert(
  505|  42.9k|            closed.index,
  506|  42.9k|            Event::Open {
  507|  42.9k|                kind: TreeKind::Unknown,
  508|  42.9k|            },
  509|  42.9k|        );
  510|  42.9k|        opened
  511|  42.9k|    }
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser9is_at_eof:
  540|   571k|    fn is_at_eof(&self) -> bool {
  541|   571k|        self.is_at(TokenKind::Eof)
  542|   571k|    }
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser9is_at_any:
  544|   439k|    fn is_at_any(&self, set: &[TokenKind]) -> bool {
  545|   439k|        set.contains(&self.nth(0))
  546|   439k|    }
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser6expect:
  557|   386k|    fn expect(&mut self, kind: TokenKind) {
  558|   386k|        if self.eat(kind) {
  559|   177k|            return;
  560|   208k|        }
  561|   208k|
  562|   208k|        let current = &self.tokens[self.pos];
  563|   208k|        self.error(SyntaxError::UnexpectedToken {
  564|   208k|            expected: kind,
  565|   208k|            found: (
  566|   208k|                current.kind(),
  567|   208k|                Span {
  568|   208k|                    start: self.offset,
  569|   208k|                    end: self.offset + current.text_len(),
  570|   208k|                },
  571|   208k|            ),
  572|   208k|        });
  573|   386k|    }
_RNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB4_6Parser5error:
  593|   399k|    fn error(&mut self, error: SyntaxError) {
  594|   399k|        self.events.push(Event::Error(error));
  595|   399k|    }
_RNvMs1_NtCsaGMRm0l0OG4_5hedge6parserNtB5_10MarkClosed3new:
  652|   445k|    fn new(index: usize) -> Self {
  653|   445k|        Self { index }
  654|   445k|    }
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_10expr_ident0EB7_:
  482|  15.3k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|  15.3k|        let mark = self.open();
  484|  15.3k|        body(self);
  485|  15.3k|        self.close(mark, kind)
  486|  15.3k|    }
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_10param_list0EB7_:
  482|  12.3k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|  12.3k|        let mark = self.open();
  484|  12.3k|        body(self);
  485|  12.3k|        self.close(mark, kind)
  486|  12.3k|    }
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_12expr_literal0EB7_:
  482|  2.87k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|  2.87k|        let mark = self.open();
  484|  2.87k|        body(self);
  485|  2.87k|        self.close(mark, kind)
  486|  2.87k|    }
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser8function0B5_:
   67|  2.98k|    p.scope(TreeKind::Function, |p| {
   68|  2.98k|        p.expect(T![fn]);
   69|  2.98k|        p.expect(TokenKind::Ident);
   70|  2.98k|        if p.is_at(T!['(']) {
   71|  2.56k|            param_list(p, ParamFlavor::Function);
   72|  2.56k|        }
   73|  2.98k|        if p.is_at(T![->]) {
   74|     83|            ret_type_expr(p);
   75|  2.90k|        }
   76|  2.98k|        if p.is_at(T!['{']) {
   77|  1.15k|            expr_block(p);
   78|  1.83k|        }
   79|  2.98k|    });
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser8stmt_let0B5_:
  225|    102|    p.scope(TreeKind::StmtLet, |p| {
  226|    102|        p.expect(T![let]);
  227|    102|        p.expect(TokenKind::Ident);
  228|    102|        p.expect(T![=]);
  229|    102|        expr(p);
  230|    102|        p.expect(T![;]);
  231|    102|    });
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser8arg_list0B5_:
  439|  14.5k|    p.scope(TreeKind::ArgList, |p| {
  440|  14.5k|        p.expect(T!['(']);
  441|  29.1k|        while !p.is_at(T![')']) && !p.is_at_eof() {
  442|  20.3k|            if p.is_at_any(EXPR_FIRST) {
  443|  14.6k|                arg(p);
  444|  14.6k|            } else {
  445|  5.71k|                break;
  446|       |            }
  447|       |        }
  448|  14.5k|        p.expect(T![')']);
  449|  14.5k|    });
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser10expr_ident0B5_:
  351|  15.3k|    p.scope(TreeKind::ExprIdent, |p| {
  352|  15.3k|        p.advance();
  353|  15.3k|    })
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_3arg0EB7_:
  482|  14.6k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|  14.6k|        let mark = self.open();
  484|  14.6k|        body(self);
  485|  14.6k|        self.close(mark, kind)
  486|  14.6k|    }
_RNCNvNvNtCsaGMRm0l0OG4_5hedge6parser19right_binds_tighter9tightness0B7_:
  304|   815k|        .position(|level| level == &kind)
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_8stmt_let0EB7_:
  482|    102|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|    102|        let mark = self.open();
  484|    102|        body(self);
  485|    102|        self.close(mark, kind)
  486|    102|    }
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser5param0B5_:
  132|  4.26k|    p.scope(TreeKind::Param, |p| {
  133|  4.26k|        p.expect(TokenKind::Ident);
  134|  4.26k|
  135|  4.26k|        match flavor {
  136|  2.12k|            ParamFlavor::Function => {
  137|  2.12k|                p.expect(T![:]);
  138|  2.12k|                type_expr(p);
  139|  2.12k|            }
  140|       |            ParamFlavor::Lambda => {
  141|  2.14k|                if p.eat(T![:]) {
  142|     66|                    type_expr(p);
  143|  2.08k|                }
  144|       |            }
  145|       |        }
  146|       |
  147|  4.26k|        if !p.is_at(flavor.r_delim()) {
  148|  3.65k|            p.expect(T![,]);
  149|  3.65k|        }
  150|  4.26k|    });
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_13ret_type_expr0EB7_:
  482|    190|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|    190|        let mark = self.open();
  484|    190|        body(self);
  485|    190|        self.close(mark, kind)
  486|    190|    }
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_9type_expr0EB7_:
  482|  2.37k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|  2.37k|        let mark = self.open();
  484|  2.37k|        body(self);
  485|  2.37k|        self.close(mark, kind)
  486|  2.37k|    }
_RNCNvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB6_6Parser3nth0B8_:
  529|  2.69M|            .map_or(TokenKind::Eof, |it| it.kind())
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser12expr_literal0B5_:
  342|  2.87k|    p.scope(TreeKind::ExprLiteral, |p| {
  343|  2.87k|        p.advance();
  344|  2.87k|    })
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser9type_expr0B5_:
  165|  2.37k|    p.scope(TreeKind::TypeExpr, |p| {
  166|  2.37k|        p.expect(TokenKind::Ident);
  167|  2.37k|    });
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser7expr_if0B5_:
  371|  1.75k|    p.scope(TreeKind::ExprIf, |p| {
  372|  1.75k|        p.expect(T![if]);
  373|  1.75k|
  374|  1.75k|        let condition_mark = expr(p);
  375|  1.75k|        if condition_mark.is_none() {
  376|    434|            p.advance_with_error("expected a condition");
  377|  1.32k|        }
  378|       |
  379|  1.75k|        if p.is_at(T!['{']) {
  380|    256|            expr_block(p);
  381|  1.49k|        }
  382|       |
  383|  1.75k|        if p.is_at(T![else]) {
  384|    187|            p.expect(T![else]);
  385|    187|
  386|    187|            match p.nth(0) {
  387|     56|                T!['{'] => {
  388|     56|                    expr_block(p);
  389|     56|                }
  390|      0|                T![if] => {
  391|      0|                    expr_if(p);
  392|      0|                }
  393|    131|                _ => p.advance_with_error("expected a block or another if expression"),
  394|       |            }
  395|  1.56k|        }
  396|  1.75k|    })
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser10param_list0B5_:
  111|  12.3k|    p.scope(TreeKind::ParamList, |p| {
  112|  12.3k|        p.expect(l_delim);
  113|  66.9k|        while !p.is_at(r_delim) && !p.is_at_eof() {
  114|  58.3k|            if p.is_at(TokenKind::Ident) {
  115|  4.26k|                param(p, flavor);
  116|  4.26k|            } else {
  117|  54.1k|                if p.is_at_any(PARAM_LIST_RECOVERY) {
  118|  3.74k|                    break;
  119|  50.3k|                }
  120|  50.3k|                p.advance_with_error("expected parameter");
  121|       |            }
  122|       |        }
  123|  12.3k|        p.expect(r_delim);
  124|  12.3k|    });
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser8expr_for0B5_:
  404|  4.39k|    p.scope(TreeKind::ExprFor, |p| {
  405|  4.39k|        p.expect(T![for]);
  406|  4.39k|        p.expect(TokenKind::Ident);
  407|  4.39k|        p.expect(T![in]);
  408|  4.39k|
  409|  4.39k|        expr(p);
  410|  4.39k|        p.expect(T![.]);
  411|  4.39k|        p.expect(T![.]);
  412|  4.39k|        expr(p);
  413|  4.39k|
  414|  4.39k|        // TODO: do we need to check if at every time?
  415|  4.39k|        if p.is_at(T!['{']) {
  416|    128|            expr_block(p);
  417|  4.27k|        }
  418|  4.39k|    })
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser11source_file0B5_:
   51|  1.10k|    p.scope(TreeKind::SourceFile, |p| {
   52|  74.9k|        while !p.is_at_eof() {
   53|  73.8k|            if p.is_at(T![fn]) {
   54|  2.98k|                function(p);
   55|  70.8k|            } else {
   56|  70.8k|                p.advance_with_error("expected a function");
   57|  70.8k|            }
   58|       |        }
   59|  1.10k|        p.expect(TokenKind::Eof);
   60|  1.10k|    });
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser11stmt_return0B5_:
  238|    107|    p.scope(TreeKind::StmtReturn, |p| {
  239|    107|        p.expect(T![return]);
  240|    107|        expr(p);
  241|    107|        p.expect(T![;]);
  242|    107|    });
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser3arg0B5_:
  454|  14.6k|    p.scope(TreeKind::Arg, |p| {
  455|  14.6k|        expr(p);
  456|  14.6k|        if !p.is_at(T![')']) {
  457|  14.3k|            p.expect(T![,]);
  458|  14.3k|        }
  459|  14.6k|    });
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_5param0EB7_:
  482|  4.26k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|  4.26k|        let mark = self.open();
  484|  4.26k|        body(self);
  485|  4.26k|        self.close(mark, kind)
  486|  4.26k|    }
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_7expr_if0EB7_:
  482|  1.75k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|  1.75k|        let mark = self.open();
  484|  1.75k|        body(self);
  485|  1.75k|        self.close(mark, kind)
  486|  1.75k|    }
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_8expr_for0EB7_:
  482|  4.39k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|  4.39k|        let mark = self.open();
  484|  4.39k|        body(self);
  485|  4.39k|        self.close(mark, kind)
  486|  4.39k|    }
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_8function0EB7_:
  482|  2.98k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|  2.98k|        let mark = self.open();
  484|  2.98k|        body(self);
  485|  2.98k|        self.close(mark, kind)
  486|  2.98k|    }
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_10expr_block0EB7_:
  482|  48.1k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|  48.1k|        let mark = self.open();
  484|  48.1k|        body(self);
  485|  48.1k|        self.close(mark, kind)
  486|  48.1k|    }
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_11source_file0EB7_:
  482|  1.10k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|  1.10k|        let mark = self.open();
  484|  1.10k|        body(self);
  485|  1.10k|        self.close(mark, kind)
  486|  1.10k|    }
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_8arg_list0EB7_:
  482|  14.5k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|  14.5k|        let mark = self.open();
  484|  14.5k|        body(self);
  485|  14.5k|        self.close(mark, kind)
  486|  14.5k|    }
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_10expr_paren0EB7_:
  482|  76.4k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|  76.4k|        let mark = self.open();
  484|  76.4k|        body(self);
  485|  76.4k|        self.close(mark, kind)
  486|  76.4k|    }
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_11expr_lambda0EB7_:
  482|  9.75k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|  9.75k|        let mark = self.open();
  484|  9.75k|        body(self);
  485|  9.75k|        self.close(mark, kind)
  486|  9.75k|    }
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser13ret_type_expr0B5_:
  157|    190|    p.scope(TreeKind::RetTypeExpr, |p| {
  158|    190|        p.expect(T![->]);
  159|    190|        type_expr(p);
  160|    190|    });
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser10expr_block0B5_:
  192|  48.1k|    p.scope(TreeKind::ExprBlock, |p| {
  193|  48.1k|        p.expect(T!['{']);
  194|   159k|        while !p.is_at(T!['}']) && !p.is_at_eof() {
  195|   123k|            match p.nth(0) {
  196|    102|                T![let] => stmt_let(p),
  197|    107|                T![return] => stmt_return(p),
  198|   123k|                _ if p.is_at_any(EXPR_FIRST) => match expr(p) {
  199|  60.7k|                    Some(mark) => {
  200|  60.7k|                        if !p.is_at(T!['}']) && !p.is_at_eof() {
  201|  25.1k|                            // StmtExpr = Expr ';'
  202|  25.1k|                            let stmt_expr_mark = p.open_before(mark);
  203|  25.1k|                            p.expect(T![;]);
  204|  25.1k|                            p.close(stmt_expr_mark, TreeKind::StmtExpr);
  205|  35.5k|                        }
  206|       |                    }
  207|      0|                    None => p.advance_with_error("expected an expression"),
  208|       |                },
  209|       |                _ => {
  210|  62.8k|                    if p.is_at_any(STMT_RECOVERY) {
  211|  12.3k|                        break;
  212|  50.4k|                    }
  213|  50.4k|                    p.advance_with_error("expected statement");
  214|       |                }
  215|       |            }
  216|       |        }
  217|  48.1k|        p.expect(T!['}']);
  218|  48.1k|    })
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser10expr_paren0B5_:
  360|  76.4k|    p.scope(TreeKind::ExprParen, |p| {
  361|  76.4k|        p.expect(T!['(']);
  362|  76.4k|        expr(p);
  363|  76.4k|        p.expect(T![')']);
  364|  76.4k|    })
_RNCNvNtCsaGMRm0l0OG4_5hedge6parser11expr_lambda0B5_:
  425|  9.75k|    p.scope(TreeKind::ExprLambda, |p| {
  426|  9.75k|        param_list(p, ParamFlavor::Lambda);
  427|  9.75k|        if p.is_at(T![->]) {
  428|    107|            ret_type_expr(p);
  429|  9.65k|        }
  430|       |
  431|  9.75k|        expr(p);
  432|  9.75k|    })
_RINvMs_NtCsaGMRm0l0OG4_5hedge6parserNtB5_6Parser5scopeNCNvB5_11stmt_return0EB7_:
  482|    107|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  483|    107|        let mark = self.open();
  484|    107|        body(self);
  485|    107|        self.close(mark, kind)
  486|    107|    }

_RNvMs3_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_11SyntaxToken6parent:
  327|   221k|    pub fn parent(&self) -> Option<&SyntaxNode> {
  328|   221k|        self.0.parent.as_ref().map(|(parent, _)| parent)
  329|   221k|    }
_RNvMs3_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_11SyntaxToken12next_sibling:
  359|   386k|    pub fn next_sibling(&self) -> Option<SyntaxNodeChild> {
  360|   386k|        let (parent, idx) = self.0.parent.as_ref()?;
  361|   386k|        parent.nth_child(idx + 1)
  362|   386k|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB2_10SyntaxNode4kind:
   54|  1.10k|    pub fn kind(&self) -> TreeKind {
   55|  1.10k|        self.raw().kind()
   56|  1.10k|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB2_10SyntaxNode6parent:
   82|   217k|    pub fn parent(&self) -> Option<&Self> {
   83|   217k|        self.0.parent.as_ref().map(|(parent, _)| parent)
   84|   217k|    }
_RNvMs3_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_11SyntaxToken4text:
  323|   386k|    pub fn text(&self) -> &str {
  324|   386k|        self.raw().text()
  325|   386k|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB2_10SyntaxNode3raw:
  100|  1.27M|    fn raw(&self) -> &RawNode {
  101|  1.27M|        &self.0.raw
  102|  1.27M|    }
_RNvXs1_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_14SyntaxNodeDataNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eq:
  278|   443k|    fn eq(&self, other: &Self) -> bool {
  279|   443k|        self.offset == other.offset && Arc::ptr_eq(&self.raw.0, &other.raw.0)
  280|   443k|    }
_RNvMs3_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_11SyntaxToken3new:
  291|   386k|    pub fn new(raw: RawToken, offset: usize, parent: Option<(SyntaxNode, usize)>) -> Self {
  292|   386k|        Self(Rc::new(SyntaxTokenData {
  293|   386k|            raw,
  294|   386k|            offset,
  295|   386k|            parent,
  296|   386k|        }))
  297|   386k|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB2_10SyntaxNode12next_sibling:
  179|   443k|    pub fn next_sibling(&self) -> Option<SyntaxNodeChild> {
  180|   443k|        let (parent, idx) = self.0.parent.as_ref()?;
  181|   443k|        parent.nth_child(idx + 1)
  182|   443k|    }
_RNvMs3_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_11SyntaxToken14leading_trivia:
  299|   386k|    pub fn leading_trivia(&self) -> &Trivia {
  300|   386k|        self.raw().leading_trivia()
  301|   386k|    }
_RNvMs3_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_11SyntaxToken6offset:
  319|   773k|    pub fn offset(&self) -> usize {
  320|   773k|        self.0.offset
  321|   773k|    }
_RNvMs3_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_11SyntaxToken3raw:
  346|  1.93M|    fn raw(&self) -> &RawToken {
  347|  1.93M|        &self.0.raw
  348|  1.93M|    }
_RNvXsa_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_8PreorderNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
  540|  1.66M|    fn next(&mut self) -> Option<Self::Item> {
  541|  1.66M|        let current_event = self.next_event.take();
  542|  1.66M|
  543|  1.66M|        self.next_event = current_event
  544|  1.66M|            .as_ref()
  545|  1.66M|            .and_then(|current_event| match current_event {
  546|       |                WalkEvent::Enter(child) => match child {
  547|       |                    NodeOrToken::Node(node) => node
  548|       |                        .nth_child(0)
  549|       |                        .map(WalkEvent::Enter)
  550|       |                        .or_else(|| Some(WalkEvent::Leave(child.clone()))),
  551|       |                    NodeOrToken::Token(token) => {
  552|       |                        Some(WalkEvent::Leave(NodeOrToken::Token(token.clone())))
  553|       |                    }
  554|       |                },
  555|       |                WalkEvent::Leave(child) => {
  556|       |                    if *child == self.start {
  557|       |                        None
  558|       |                    } else {
  559|       |                        child.next_sibling().map(WalkEvent::Enter).or_else(|| {
  560|       |                            child
  561|       |                                .parent()
  562|       |                                .map(|parent| WalkEvent::Leave(NodeOrToken::Node(parent.clone())))
  563|       |                        })
  564|       |                    }
  565|       |                }
  566|  1.66M|            });
  567|  1.66M|
  568|  1.66M|        current_event
  569|  1.66M|    }
_RNvXsb_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_10SyntaxNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   10|  1.27M|#[derive(Clone, PartialEq, Eq, Hash)]
_RNvMs3_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_11SyntaxToken15trailing_trivia:
  315|   386k|    pub fn trailing_trivia(&self) -> &Trivia {
  316|   386k|        self.raw().trailing_trivia()
  317|   386k|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB2_10SyntaxNode3new:
   40|   445k|    pub fn new(raw: RawNode, offset: usize, parent: Option<(Self, usize)>) -> Self {
   41|   445k|        Self(Rc::new(SyntaxNodeData {
   42|   445k|            raw,
   43|   445k|            offset,
   44|   445k|            parent,
   45|   445k|        }))
   46|   445k|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB2_10SyntaxNode10total_span:
   93|  1.10k|    pub fn total_span(&self) -> Span {
   94|  1.10k|        Span {
   95|  1.10k|            start: self.offset(),
   96|  1.10k|            end: self.offset() + self.total_len(),
   97|  1.10k|        }
   98|  1.10k|    }
_RNvMs3_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_11SyntaxToken9total_len:
  311|   773k|    pub fn total_len(&self) -> usize {
  312|   773k|        self.raw().total_len()
  313|   773k|    }
_RNvMs3_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_11SyntaxToken10total_span:
  339|   386k|    pub fn total_span(&self) -> Span {
  340|   386k|        Span {
  341|   386k|            start: self.offset(),
  342|   386k|            end: self.offset() + self.total_len(),
  343|   386k|        }
  344|   386k|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB2_10SyntaxNode9nth_child:
  134|  1.27M|    pub fn nth_child(&self, idx: usize) -> Option<SyntaxNodeChild> {
  135|  1.27M|        let (raw_child, rel_offset) = self.raw().nth_child(idx)?;
  136|   830k|        let offset = self.offset() + rel_offset;
  137|   830k|        let parent_with_idx = (self.clone(), idx);
  138|   830k|        let syntax_child = SyntaxNodeChild::new(raw_child.clone(), offset, Some(parent_with_idx));
  139|   830k|
  140|   830k|        Some(syntax_child)
  141|  1.27M|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB2_10SyntaxNode8preorder:
  201|  1.10k|    pub fn preorder(&self) -> Preorder {
  202|  1.10k|        Preorder::new(self.clone())
  203|  1.10k|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB2_10SyntaxNode4root:
   36|  1.10k|    pub fn root(raw: RawNode) -> Self {
   37|  1.10k|        Self::new(raw, 0, None)
   38|  1.10k|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB2_10SyntaxNode6offset:
   62|   832k|    pub fn offset(&self) -> usize {
   63|   832k|        self.0.offset
   64|   832k|    }
_RNvXs_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB4_10SyntaxNodeNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  262|  1.10k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  263|  1.10k|        self.raw().fmt(f)
  264|  1.10k|    }
_RNvMs3_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_11SyntaxToken8text_len:
  307|   386k|    pub fn text_len(&self) -> usize {
  308|   386k|        self.text().len()
  309|   386k|    }
_RNvMs9_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_8Preorder3new:
  530|  1.10k|    fn new(start: SyntaxNode) -> Self {
  531|  1.10k|        let start = NodeOrToken::Node(start.clone());
  532|  1.10k|        let next_event = Some(WalkEvent::Enter(start.clone()));
  533|  1.10k|        Self { start, next_event }
  534|  1.10k|    }
_RNvXsd_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_10SyntaxNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
   10|   445k|#[derive(Clone, PartialEq, Eq, Hash)]
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB2_10SyntaxNode9total_len:
   58|  1.10k|    pub fn total_len(&self) -> usize {
   59|  1.10k|        self.raw().total_len()
   60|  1.10k|    }
_RNvXsk_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB5_11SyntaxTokenNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   22|   386k|#[derive(Clone, PartialEq, Eq, Hash)]
_RNCNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB4_10SyntaxNode6parent0B8_:
   83|   217k|        self.0.parent.as_ref().map(|(parent, _)| parent)
_RNCNCNCNvXsa_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtBb_8PreorderNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0s_00Bf_:
  562|   439k|                                .map(|parent| WalkEvent::Leave(NodeOrToken::Node(parent.clone())))
_RNCNvMs3_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB7_11SyntaxToken6parent0Bb_:
  328|   221k|        self.0.parent.as_ref().map(|(parent, _)| parent)
_RNCNCNvXsa_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB9_8PreorderNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next00Bd_:
  550|  5.60k|                        .or_else(|| Some(WalkEvent::Leave(child.clone()))),
_RNCNvXsa_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB7_8PreorderNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0Bb_:
  545|  1.66M|            .and_then(|current_event| match current_event {
  546|   831k|                WalkEvent::Enter(child) => match child {
  547|   445k|                    NodeOrToken::Node(node) => node
  548|   445k|                        .nth_child(0)
  549|   445k|                        .map(WalkEvent::Enter)
  550|   445k|                        .or_else(|| Some(WalkEvent::Leave(child.clone()))),
  551|   386k|                    NodeOrToken::Token(token) => {
  552|   386k|                        Some(WalkEvent::Leave(NodeOrToken::Token(token.clone())))
  553|       |                    }
  554|       |                },
  555|   831k|                WalkEvent::Leave(child) => {
  556|   831k|                    if *child == self.start {
  557|  1.10k|                        None
  558|       |                    } else {
  559|   830k|                        child.next_sibling().map(WalkEvent::Enter).or_else(|| {
  560|       |                            child
  561|       |                                .parent()
  562|       |                                .map(|parent| WalkEvent::Leave(NodeOrToken::Node(parent.clone())))
  563|   830k|                        })
  564|       |                    }
  565|       |                }
  566|  1.66M|            });
_RNCNCNvXsa_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstNtB9_8PreorderNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0s_0Bd_:
  559|   439k|                        child.next_sibling().map(WalkEvent::Enter).or_else(|| {
  560|   439k|                            child
  561|   439k|                                .parent()
  562|   439k|                                .map(|parent| WalkEvent::Leave(NodeOrToken::Node(parent.clone())))
  563|   439k|                        })
_RNvMs8_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstINtNtB7_13utility_types11NodeOrTokenNtB5_10SyntaxNodeNtB5_11SyntaxTokenE6parent:
  469|   439k|    pub fn parent(&self) -> Option<&SyntaxNode> {
  470|   439k|        match self {
  471|   217k|            Self::Node(it) => it.parent(),
  472|   221k|            Self::Token(it) => it.parent(),
  473|       |        }
  474|   439k|    }
_RNvMs8_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstINtNtB7_13utility_types11NodeOrTokenNtB5_10SyntaxNodeNtB5_11SyntaxTokenE12next_sibling:
  483|   830k|    pub fn next_sibling(&self) -> Option<Self> {
  484|   830k|        match self {
  485|   443k|            Self::Node(it) => it.next_sibling(),
  486|   386k|            Self::Token(it) => it.next_sibling(),
  487|       |        }
  488|   830k|    }
_RNvMs8_NtNtCsaGMRm0l0OG4_5hedge6syntax3cstINtNtB7_13utility_types11NodeOrTokenNtB5_10SyntaxNodeNtB5_11SyntaxTokenE3new:
  448|   830k|    pub fn new(raw: RawNodeChild, offset: usize, parent: Option<(SyntaxNode, usize)>) -> Self {
  449|   830k|        match raw {
  450|   443k|            NodeOrToken::Node(node) => Self::Node(SyntaxNode::new(node, offset, parent)),
  451|   386k|            NodeOrToken::Token(token) => Self::Token(SyntaxToken::new(token, offset, parent)),
  452|       |        }
  453|   830k|    }

_RNvXs3_NtNtCsaGMRm0l0OG4_5hedge6syntax5kindsNtB5_9TokenKindNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
    3|  5.32M|#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
_RNvXsb_NtNtCsaGMRm0l0OG4_5hedge6syntax5kindsNtB5_8TreeKindNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
   93|  1.10k|#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]

_RNvMs3_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB5_14RawNodeBuilder9add_child:
  225|   830k|    pub fn add_child(&mut self, child: RawNodeChild) {
  226|   830k|        self.children.push(child);
  227|   830k|    }
_RNvMs1_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB5_8RawToken3new:
  147|   386k|    pub fn new(
  148|   386k|        leading_trivia: Trivia,
  149|   386k|        kind: TokenKind,
  150|   386k|        text: String,
  151|   386k|        trailing_trivia: Trivia,
  152|   386k|    ) -> Self {
  153|   386k|        Self(Arc::new(RawTokenData {
  154|   386k|            leading_trivia,
  155|   386k|            kind,
  156|   386k|            text,
  157|   386k|            trailing_trivia,
  158|   386k|        }))
  159|   386k|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB2_7RawNode9total_len:
   64|   888k|    pub fn total_len(&self) -> usize {
   65|   888k|        self.0.len
   66|   888k|    }
_RNvMs1_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB5_8RawToken9total_len:
  181|  1.93M|    pub fn total_len(&self) -> usize {
  182|  1.93M|        self.leading_trivia().total_len() + self.text_len() + self.trailing_trivia().total_len()
  183|  1.93M|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB2_7RawNode3new:
   39|   445k|    pub fn new(kind: TreeKind, children: Vec<RawNodeChild>) -> Self {
   40|   445k|        let len = children.iter().map(|child| child.total_len()).sum();
   41|   445k|        let mut offset = 0;
   42|   445k|        let children = children
   43|   445k|            .into_iter()
   44|   445k|            .map(|child| {
   45|       |                let child_len = child.total_len();
   46|       |                let child_with_offset = (child, offset);
   47|       |
   48|       |                offset += child_len;
   49|       |                child_with_offset
   50|   445k|            })
   51|   445k|            .collect();
   52|   445k|
   53|   445k|        Self(Arc::new(RawNodeData {
   54|   445k|            kind,
   55|   445k|            len,
   56|   445k|            children,
   57|   445k|        }))
   58|   445k|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB2_7RawNode8children:
   72|   445k|    pub fn children(&self) -> impl Iterator<Item = &RawNodeChild> {
   73|   445k|        self.0.children.iter().map(|(child, _)| child)
   74|   445k|    }
_RNvMs1_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB5_8RawToken4kind:
  165|  3.29M|    pub fn kind(&self) -> TokenKind {
  166|  3.29M|        self.0.kind
  167|  3.29M|    }
_RNvMs1_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB5_8RawToken15trailing_trivia:
  173|  2.70M|    pub fn trailing_trivia(&self) -> &Trivia {
  174|  2.70M|        &self.0.trailing_trivia
  175|  2.70M|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB2_7RawNode9nth_child:
   76|  1.27M|    pub fn nth_child(&self, idx: usize) -> Option<&(RawNodeChild, usize)> {
   77|  1.27M|        self.0.children.get(idx)
   78|  1.27M|    }
_RNvXsi_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB5_8RawTokenNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   25|   386k|#[derive(Debug, Clone, PartialEq, Eq, Hash)]
_RNvXs5_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB5_7RawNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   10|   443k|#[derive(Debug, Clone, PartialEq, Eq, Hash)]
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB2_7RawNode4kind:
   60|  1.10k|    pub fn kind(&self) -> TreeKind {
   61|  1.10k|        self.0.kind
   62|  1.10k|    }
_RNvXs_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB4_7RawNodeNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  132|   445k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  133|   445k|        self.children().try_for_each(|child| child.fmt(f))
  134|   445k|    }
_RNvMs1_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB5_8RawToken14leading_trivia:
  161|  2.70M|    pub fn leading_trivia(&self) -> &Trivia {
  162|  2.70M|        &self.0.leading_trivia
  163|  2.70M|    }
_RNvMs1_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB5_8RawToken8text_len:
  177|  2.33M|    pub fn text_len(&self) -> usize {
  178|  2.33M|        self.text().len()
  179|  2.33M|    }
_RNvMs1_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB5_8RawToken4text:
  169|  3.10M|    pub fn text(&self) -> &str {
  170|  3.10M|        &self.0.text
  171|  3.10M|    }
_RNvMs3_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB5_14RawNodeBuilder5build:
  229|   445k|    pub fn build(self) -> RawNode {
  230|   445k|        RawNode::new(self.kind, self.children)
  231|   445k|    }
_RNvMs3_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB5_14RawNodeBuilder3new:
  218|   445k|    pub fn new(kind: TreeKind) -> Self {
  219|   445k|        Self {
  220|   445k|            kind,
  221|   445k|            children: Vec::new(),
  222|   445k|        }
  223|   445k|    }
_RNvXs2_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB5_8RawTokenNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  205|   386k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  206|   386k|        self.leading_trivia().fmt(f)?;
  207|   386k|        self.text().fmt(f)?;
  208|   386k|        self.trailing_trivia().fmt(f)
  209|   386k|    }
_RNCNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB4_7RawNode8children0B8_:
   73|   830k|        self.0.children.iter().map(|(child, _)| child)
_RNCNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB4_7RawNode3news_0B8_:
   44|   830k|            .map(|child| {
   45|   830k|                let child_len = child.total_len();
   46|   830k|                let child_with_offset = (child, offset);
   47|   830k|
   48|   830k|                offset += child_len;
   49|   830k|                child_with_offset
   50|   830k|            })
_RNCNvMNtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB4_7RawNode3new0B8_:
   40|   830k|        let len = children.iter().map(|child| child.total_len()).sum();
_RNCNvXs_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawNtB6_7RawNodeNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt0Ba_:
  133|   830k|        self.children().try_for_each(|child| child.fmt(f))
_RNvMs0_NtNtCsaGMRm0l0OG4_5hedge6syntax3rawINtNtB7_13utility_types11NodeOrTokenNtB5_7RawNodeNtB5_8RawTokenE9total_len:
  138|  1.66M|    pub fn total_len(&self) -> usize {
  139|  1.66M|        match self {
  140|   887k|            Self::Node(node) => node.total_len(),
  141|   773k|            Self::Token(token) => token.total_len(),
  142|       |        }
  143|  1.66M|    }

_RNvMs0_NtNtCsaGMRm0l0OG4_5hedge6syntax6triviaNtB5_11TriviaPiece5count:
  151|  51.7k|    fn count(&self) -> usize {
  152|  51.7k|        match self {
  153|  50.2k|            Self::Space(count) | Self::Tab(count) | Self::Newline(count) => *count,
  154|  1.50k|            Self::Comment(_) => 1,
  155|       |        }
  156|  51.7k|    }
_RNvXs1_NtNtCsaGMRm0l0OG4_5hedge6syntax6triviaNtB5_11TriviaPieceNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  160|  20.8k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  161|  20.8k|        match self {
  162|  4.34k|            Self::Space(count) => " ".repeat(*count).fmt(f),
  163|  4.44k|            Self::Tab(count) => "\t".repeat(*count).fmt(f),
  164|  10.6k|            Self::Newline(count) => "\n".repeat(*count).fmt(f),
  165|  1.50k|            Self::Comment(comment) => comment.fmt(f),
  166|       |        }
  167|  20.8k|    }
_RNvXs4_NtNtCsaGMRm0l0OG4_5hedge6syntax6triviaNtB5_6TriviaNtNtCs9nhK3FOW46N_4core7default7Default7defaultB9_:
    3|   774k|#[derive(Debug, Clone, Default, PartialEq, Eq, Hash)]
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax6triviaNtB2_6Trivia9total_len:
   34|  4.64M|    pub fn total_len(&self) -> usize {
   35|  4.64M|        self.pieces.iter().map(|piece| piece.total_len()).sum()
   36|  4.64M|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax6triviaNtB2_6Trivia4push:
   81|  51.7k|    pub(crate) fn push(&mut self, new_piece: TriviaPiece) {
   82|  51.7k|        if new_piece.count() == 0 {
   83|      0|            return;
   84|  51.7k|        }
   85|       |
   86|  51.7k|        if let Some(last) = self.pieces.last_mut()
   87|  34.3k|            && let Some(combined) = last.combine(&new_piece)
   88|  30.8k|        {
   89|  30.8k|            *last = combined;
   90|  30.8k|        } else {
   91|  20.8k|            self.pieces.push(new_piece);
   92|  20.8k|        }
   93|  51.7k|    }
_RNvMs0_NtNtCsaGMRm0l0OG4_5hedge6syntax6triviaNtB5_11TriviaPiece7combine:
  142|  34.3k|    fn combine(&self, new_piece: &Self) -> Option<Self> {
  143|  34.3k|        match (self, new_piece) {
  144|  1.08k|            (Self::Space(c1), Self::Space(c2)) => Some(Self::Space(c1 + c2)),
  145|  7.03k|            (Self::Tab(c1), Self::Tab(c2)) => Some(Self::Tab(c1 + c2)),
  146|  22.7k|            (Self::Newline(c1), Self::Newline(c2)) => Some(Self::Newline(c1 + c2)),
  147|  3.45k|            _ => None,
  148|       |        }
  149|  34.3k|    }
_RNvXs_NtNtCsaGMRm0l0OG4_5hedge6syntax6triviaNtB4_6TriviaNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
   97|   773k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   98|   773k|        self.pieces.iter().try_for_each(|piece| piece.fmt(f))
   99|   773k|    }
_RNvMNtNtCsaGMRm0l0OG4_5hedge6syntax6triviaNtB2_6Trivia5empty:
   26|   387k|    pub fn empty() -> Self {
   27|   387k|        Self::default()
   28|   387k|    }
_RNvMs0_NtNtCsaGMRm0l0OG4_5hedge6syntax6triviaNtB5_11TriviaPiece9total_len:
  103|   125k|    pub fn total_len(&self) -> usize {
  104|   125k|        match self {
  105|   116k|            Self::Space(count) | Self::Tab(count) | Self::Newline(count) => *count,
  106|  9.00k|            Self::Comment(comment) => comment.len(),
  107|       |        }
  108|   125k|    }
_RNCNvXs_NtNtCsaGMRm0l0OG4_5hedge6syntax6triviaNtB6_6TriviaNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt0Ba_:
   98|  20.8k|        self.pieces.iter().try_for_each(|piece| piece.fmt(f))
_RNCNvMNtNtCsaGMRm0l0OG4_5hedge6syntax6triviaNtB4_6Trivia9total_len0B8_:
   35|   125k|        self.pieces.iter().map(|piece| piece.total_len()).sum()

_RNvXsh_NtNtCsaGMRm0l0OG4_5hedge6syntax13utility_typesNtB5_4SpanNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs7o2MKagU97t_6parser:
   67|   387k|#[derive(Debug, Clone, Copy, PartialEq, Eq)]
_RNvXs4_NtNtCsaGMRm0l0OG4_5hedge6syntax13utility_typesINtB5_11NodeOrTokenNtNtB7_3cst10SyntaxNodeNtB1a_11SyntaxTokenENtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
    6|  6.71k|#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs_NtNtCsaGMRm0l0OG4_5hedge6syntax13utility_typesINtB4_11NodeOrTokenNtNtB6_3raw7RawNodeNtB19_8RawTokenENtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB8_:
   58|   830k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   59|   830k|        match self {
   60|   443k|            Self::Node(it) => it.fmt(f),
   61|   386k|            Self::Token(it) => it.fmt(f),
   62|       |        }
   63|   830k|    }
_RNvXs4_NtNtCsaGMRm0l0OG4_5hedge6syntax13utility_typesINtB5_11NodeOrTokenNtNtB7_3raw7RawNodeNtB1a_8RawTokenENtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
    6|   830k|#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs7_NtNtCsaGMRm0l0OG4_5hedge6syntax13utility_typesINtB5_11NodeOrTokenNtNtB7_3cst10SyntaxNodeNtB1a_11SyntaxTokenENtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
    6|   831k|#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]

