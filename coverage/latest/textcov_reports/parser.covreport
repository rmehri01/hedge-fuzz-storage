_RNvXsk_CsfxpM3XgVJph_9arbitraryReNtB5_9Arbitrary9size_hintCs9XZRW3uwhtg_6parser:
  868|  1.12k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  869|  1.12k|        (0, None)
  870|  1.12k|    }
_RNvCsfxpM3XgVJph_9arbitrary13arbitrary_str:
  838|  1.12k|fn arbitrary_str<'a>(u: &mut Unstructured<'a>, size: usize) -> Result<&'a str> {
  839|  1.12k|    match str::from_utf8(u.peek_bytes(size).unwrap()) {
  840|    940|        Ok(s) => {
  841|    940|            u.bytes(size).unwrap();
  842|    940|            Ok(s)
  843|       |        }
  844|    189|        Err(e) => {
  845|    189|            let i = e.valid_up_to();
  846|    189|            let valid = u.bytes(i).unwrap();
  847|    189|            let s = unsafe {
  848|      0|                debug_assert!(str::from_utf8(valid).is_ok());
  849|    189|                str::from_utf8_unchecked(valid)
  850|    189|            };
  851|    189|            Ok(s)
  852|       |        }
  853|       |    }
  854|  1.12k|}
_RNvXsk_CsfxpM3XgVJph_9arbitraryReNtB5_9Arbitrary19arbitrary_take_rest:
  862|  1.12k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  863|  1.12k|        let size = u.len();
  864|  1.12k|        arbitrary_str(&mut u, size)
  865|  1.12k|    }

_RNvMNtCsfxpM3XgVJph_9arbitrary12unstructuredNtB2_12Unstructured10peek_bytes:
  579|  1.12k|    pub fn peek_bytes(&self, size: usize) -> Option<&'a [u8]> {
  580|  1.12k|        self.data.get(..size)
  581|  1.12k|    }
_RNvMNtCsfxpM3XgVJph_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|  1.12k|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|  1.12k|        if self.data.len() < size {
  550|      0|            return Err(Error::NotEnoughData);
  551|  1.12k|        }
  552|  1.12k|
  553|  1.12k|        let (for_buf, rest) = self.data.split_at(size);
  554|  1.12k|        self.data = rest;
  555|  1.12k|        Ok(for_buf)
  556|  1.12k|    }
_RNvMNtCsfxpM3XgVJph_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|  1.12k|    pub fn new(data: &'a [u8]) -> Self {
   86|  1.12k|        Unstructured { data }
   87|  1.12k|    }
_RNvMNtCsfxpM3XgVJph_9arbitrary12unstructuredNtB2_12Unstructured3lenB4_:
  108|  1.12k|    pub fn len(&self) -> usize {
  109|  1.12k|        self.data.len()
  110|  1.12k|    }

_RNCNvXs_NtCsfTgPyq9Fuyl_9itertools8peek_nthINtB6_7PeekNthNtNtNtCs9nhK3FOW46N_4core3str4iter5CharsENtNtNtNtBZ_4iter6traits8iterator8Iterator4next0CslYuo9QnQJS9_5hedge:
  149|  11.9k|        self.buf.pop_front().or_else(|| self.iter.next())
_RINvNtCsfTgPyq9Fuyl_9itertools8peek_nth8peek_nthNtNtNtCs9nhK3FOW46N_4core3str4iter5CharsECslYuo9QnQJS9_5hedge:
   24|  1.12k|pub fn peek_nth<I>(iterable: I) -> PeekNth<I::IntoIter>
   25|  1.12k|where
   26|  1.12k|    I: IntoIterator,
   27|  1.12k|{
   28|  1.12k|    PeekNth {
   29|  1.12k|        iter: iterable.into_iter().fuse(),
   30|  1.12k|        buf: VecDeque::new(),
   31|  1.12k|    }
   32|  1.12k|}
_RNvMNtCsfTgPyq9Fuyl_9itertools8peek_nthINtB2_7PeekNthNtNtNtCs9nhK3FOW46N_4core3str4iter5CharsE4peekCslYuo9QnQJS9_5hedge:
   39|   893k|    pub fn peek(&mut self) -> Option<&I::Item> {
   40|   893k|        self.peek_nth(0)
   41|   893k|    }
_RNvMNtCsfTgPyq9Fuyl_9itertools8peek_nthINtB2_7PeekNthNtNtNtCs9nhK3FOW46N_4core3str4iter5CharsE8peek_nthCslYuo9QnQJS9_5hedge:
   71|   898k|    pub fn peek_nth(&mut self, n: usize) -> Option<&I::Item> {
   72|   898k|        let unbuffered_items = (n + 1).saturating_sub(self.buf.len());
   73|   898k|
   74|   898k|        self.buf.extend(self.iter.by_ref().take(unbuffered_items));
   75|   898k|
   76|   898k|        self.buf.get(n)
   77|   898k|    }
_RNvXs_NtCsfTgPyq9Fuyl_9itertools8peek_nthINtB4_7PeekNthNtNtNtCs9nhK3FOW46N_4core3str4iter5CharsENtNtNtNtBX_4iter6traits8iterator8Iterator4nextCslYuo9QnQJS9_5hedge:
  148|   493k|    fn next(&mut self) -> Option<Self::Item> {
  149|   493k|        self.buf.pop_front().or_else(|| self.iter.next())
  150|   493k|    }

rust_fuzzer_test_input:
  259|  1.12k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  1.12k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  1.12k|
  262|  1.12k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  1.12k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  1.12k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  1.12k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  1.12k|                // get to longer inputs that actually lead to interesting executions
  267|  1.12k|                // quicker.
  268|  1.12k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  1.12k|                }
  271|  1.12k|
  272|  1.12k|                let mut u = Unstructured::new(bytes);
  273|  1.12k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  1.12k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  1.12k|                }
  291|       |
  292|  1.12k|                let data = match data {
  293|  1.12k|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  1.12k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  1.12k|                result.to_libfuzzer_code()
  299|  1.12k|            }
_RNvNvCs9XZRW3uwhtg_6parser1__19___libfuzzer_sys_run:
  303|  1.12k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|       |                $body
  305|  1.12k|            }
_RNvXCseFm56jpCDOc_13libfuzzer_sysNtB2_6CorpusINtNtCs9nhK3FOW46N_4core7convert4FromuE4from:
   30|  1.12k|    fn from(_: ()) -> Self {
   31|  1.12k|        Self::Keep
   32|  1.12k|    }
LLVMFuzzerTestOneInput:
   58|  1.12k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  1.12k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  1.12k|    });
   63|  1.12k|
   64|  1.12k|    match test_input {
   65|  1.12k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  1.12k|}
_RNvMs_CseFm56jpCDOc_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|  1.12k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  1.12k|        match self {
   42|  1.12k|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|  1.12k|    }
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCseFm56jpCDOc_13libfuzzer_sys15test_input_wrap0B3_:
   59|  1.12k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  1.12k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  1.12k|        rust_fuzzer_test_input(data_slice)
   62|  1.12k|    });

_RNvMs2_NtCs4LeKDsHh25A_9once_cell3impINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE14is_initializedCseFm56jpCDOc_13libfuzzer_sys:
   49|  1.12k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  1.12k|        // An `Acquire` load is enough because that makes all the initialization
   51|  1.12k|        // operations visible to us, and, this being a fast path, weaker
   52|  1.12k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  1.12k|        // `SeqCst` operations on the slow path.
   54|  1.12k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  1.12k|    }

_RNvMs4_NtCs4LeKDsHh25A_9once_cell4syncINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE3getCseFm56jpCDOc_13libfuzzer_sys:
  963|  1.12k|        pub fn get(&self) -> Option<&T> {
  964|  1.12k|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|  1.12k|                None
  969|       |            }
  970|  1.12k|        }

_RNvXNtNtCslYuo9QnQJS9_5hedge3ast5nodesINtB2_8LeafNodeKVNtNtNtNtB6_6syntax5kinds8TreeKind10SourceFileUKVNtNtB4_5State11UnvalidatedUEINtB2_7AstNodeKB1C_E4castB6_:
   40|  1.12k|    fn cast(node: SyntaxNode) -> Option<Self> {
   41|  1.12k|        (node.kind() == K).then_some(Self { syntax: node })
   42|  1.12k|    }
_RNvXNtNtCslYuo9QnQJS9_5hedge3ast5nodesINtB2_8LeafNodeKVNtNtNtNtB6_6syntax5kinds8TreeKind10SourceFileUKVNtNtB4_5State11UnvalidatedUEINtB2_7AstNodeKB1C_E6syntaxB6_:
   43|  1.12k|    fn syntax(&self) -> &SyntaxNode {
   44|  1.12k|        &self.syntax
   45|  1.12k|    }

_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer14leading_trivia:
  175|   351k|    fn leading_trivia(&mut self) {
  176|   382k|        while let Some(char) = self.peek() {
  177|   381k|            let Some(new_piece) = self.trivia_piece(char) else {
  178|   350k|                break;
  179|       |            };
  180|  31.0k|            self.leading_trivia.push(new_piece);
  181|       |        }
  182|   351k|    }
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer15trailing_trivia:
  184|   351k|    fn trailing_trivia(&mut self) -> Trivia {
  185|   351k|        let mut trailing = Trivia::empty();
  186|       |
  187|   378k|        while let Some(char) = self.peek()
  188|   376k|            && char != '\n'
  189|  26.3k|        {
  190|   367k|            let Some(new_piece) = self.trivia_piece(char) else {
  191|   341k|                break;
  192|       |            };
  193|  26.3k|            trailing.push(new_piece);
  194|       |        }
  195|       |
  196|   351k|        trailing
  197|   351k|    }
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer7advance:
  149|   488k|    fn advance(&mut self) -> Option<char> {
  150|   488k|        let char = self.chars.next()?;
  151|   487k|        self.current += char.len_utf8();
  152|   487k|        Some(char)
  153|   488k|    }
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer12trivia_piece:
  199|   749k|    fn trivia_piece(&mut self, char: char) -> Option<TriviaPiece> {
  200|  57.3k|        let trivia_piece = match char {
  201|  5.24k|            '/' if self.peek_next() == Some('/') => {
  202|  1.54k|                self.eat_while(|char| char != '\n');
  203|  1.54k|                TriviaPiece::Comment(self.current_text().to_string())
  204|       |            }
  205|       |            '\n' => {
  206|  29.2k|                self.advance();
  207|  29.2k|                TriviaPiece::Newline(1)
  208|       |            }
  209|       |            '\t' => {
  210|  9.33k|                self.advance();
  211|  9.33k|                TriviaPiece::Tab(1)
  212|       |            }
  213|       |            ' ' => {
  214|  17.2k|                self.advance();
  215|  17.2k|                TriviaPiece::Space(1)
  216|       |            }
  217|   692k|            _ => return None,
  218|       |        };
  219|       |
  220|  57.3k|        self.start = self.current;
  221|  57.3k|        Some(trivia_piece)
  222|   749k|    }
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer7matches:
  155|  18.5k|    fn matches(&mut self, expected: char) -> bool {
  156|  18.5k|        let match_found = self.peek().is_some_and(|char| char == expected);
  157|  18.5k|        if match_found {
  158|  4.83k|            self.chars.next();
  159|  4.83k|            self.current += expected.len_utf8();
  160|  13.6k|        }
  161|       |
  162|  18.5k|        match_found
  163|  18.5k|    }
_RNvNtCslYuo9QnQJS9_5hedge5lexer8is_digit:
  233|   182k|fn is_digit(char: char) -> bool {
  234|   182k|    char.is_ascii_digit()
  235|   182k|}
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer10next_token:
   51|   351k|    fn next_token(&mut self) -> RawToken {
   52|   351k|        self.leading_trivia();
   53|   351k|
   54|   351k|        self.start = self.current;
   55|       |
   56|   351k|        let Some(next_char) = self.advance() else {
   57|  1.12k|            return self.make_token(TokenKind::Eof);
   58|       |        };
   59|       |
   60|  12.8k|        match next_char {
   61|   107k|            '(' => self.make_token(Token!['(']),
   62|  10.2k|            ')' => self.make_token(Token![')']),
   63|  56.1k|            '{' => self.make_token(Token!['{']),
   64|    819|            '}' => self.make_token(Token!['}']),
   65|  4.59k|            ',' => self.make_token(Token![,]),
   66|    649|            ':' => self.make_token(Token![:]),
   67|  1.29k|            ';' => self.make_token(Token![;]),
   68|  1.44k|            '+' => self.make_token(Token![+]),
   69|  1.93k|            '/' => self.make_token(Token![/]),
   70|  3.16k|            '*' => self.make_token(Token![*]),
   71|  10.5k|            '|' => self.make_token(Token![|]),
   72|  1.77k|            '.' if self.matches('.') => self.make_token(Token![..]),
   73|    859|            '.' => self.make_token(Token![.]),
   74|  6.43k|            '-' if self.matches('>') => self.make_token(Token![->]),
   75|  5.09k|            '-' => self.make_token(Token![-]),
   76|  2.17k|            '!' if self.matches('=') => self.make_token(Token![!=]),
   77|  1.29k|            '!' => self.make_token(Token![!]),
   78|  3.78k|            '=' if self.matches('=') => self.make_token(Token![==]),
   79|  2.47k|            '=' if self.matches('>') => self.make_token(Token![=>]),
   80|  2.32k|            '=' => self.make_token(Token![=]),
   81|  1.16k|            '>' if self.matches('=') => self.make_token(Token![>=]),
   82|  1.01k|            '>' => self.make_token(Token![>]),
   83|    709|            '<' if self.matches('=') => self.make_token(Token![<=]),
   84|    623|            '<' => self.make_token(Token![<]),
   85|    382|            '"' => self.string(),
   86|   135k|            char if is_digit(char) => self.number(),
   87|   131k|            char if is_alpha(char) => self.ident(),
   88|  93.3k|            _ => self.make_token(TokenKind::Unknown),
   89|       |        }
   90|   351k|    }
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer9eat_while:
  224|  43.7k|    fn eat_while(&mut self, predicate: fn(char) -> bool) {
  225|   113k|        while let Some(char) = self.peek()
  226|   113k|            && predicate(char)
  227|  69.8k|        {
  228|  69.8k|            self.advance();
  229|  69.8k|        }
  230|  43.7k|    }
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer6string:
   92|    382|    fn string(&mut self) -> RawToken {
   93|  10.8k|        while let Some(char) = self.advance() {
   94|  10.7k|            if char == '"' {
   95|    335|                return self.make_token(TokenKind::String);
   96|  10.4k|            }
   97|       |        }
   98|       |
   99|     47|        let span = Span {
  100|     47|            start: self.start,
  101|     47|            end: self.current - 1,
  102|     47|        };
  103|     47|        self.errors.push(SyntaxError::UnterminatedString { span });
  104|     47|        self.make_token(TokenKind::String)
  105|    382|    }
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer4peek:
  141|   893k|    fn peek(&mut self) -> Option<char> {
  142|   893k|        self.chars.peek().copied()
  143|   893k|    }
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer6number:
  107|  3.74k|    fn number(&mut self) -> RawToken {
  108|  3.74k|        self.eat_while(is_digit);
  109|  3.74k|        self.make_token(TokenKind::Int)
  110|  3.74k|    }
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer9peek_next:
  145|  5.24k|    fn peek_next(&mut self) -> Option<char> {
  146|  5.24k|        self.chars.peek_nth(1).copied()
  147|  5.24k|    }
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer5ident:
  112|  38.5k|    fn ident(&mut self) -> RawToken {
  113|  38.5k|        self.eat_while(|char| is_alpha(char) || is_digit(char));
  114|  38.5k|
  115|  38.5k|        let kind = self.ident_kind();
  116|  38.5k|        self.make_token(kind)
  117|  38.5k|    }
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer3new:
   22|  1.12k|    pub fn new(input: &'input str) -> Self {
   23|  1.12k|        Self {
   24|  1.12k|            input,
   25|  1.12k|            chars: itertools::peek_nth(input.chars()),
   26|  1.12k|            leading_trivia: Trivia::empty(),
   27|  1.12k|            start: 0,
   28|  1.12k|            current: 0,
   29|  1.12k|            errors: Vec::new(),
   30|  1.12k|        }
   31|  1.12k|    }
_RNvNtCslYuo9QnQJS9_5hedge5lexer8is_alpha:
  237|   230k|fn is_alpha(char: char) -> bool {
  238|   230k|    char.is_alphabetic() || char == '_'
  239|   230k|}
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer10all_tokens:
   34|  1.12k|    pub fn all_tokens(mut self) -> (Vec<RawToken>, Vec<SyntaxError>) {
   35|  1.12k|        let mut tokens = Vec::new();
   36|       |
   37|   351k|        loop {
   38|   351k|            let token = self.next_token();
   39|   351k|            let token_kind = token.kind();
   40|   351k|            tokens.push(token);
   41|   351k|
   42|   351k|            if token_kind == TokenKind::Eof {
   43|  1.12k|                break;
   44|   350k|            }
   45|       |        }
   46|       |
   47|  1.12k|        (tokens, self.errors)
   48|  1.12k|    }
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer10ident_kind:
  119|  38.5k|    fn ident_kind(&self) -> TokenKind {
  120|  38.5k|        let ident = self.current_text();
  121|  38.5k|        match ident {
  122|  38.5k|            "fn" => Token![fn],
  123|  35.4k|            "let" => Token![let],
  124|  35.3k|            "return" => Token![return],
  125|  34.3k|            "true" => Token![true],
  126|  34.1k|            "false" => Token![false],
  127|  33.2k|            "if" => Token![if],
  128|  30.8k|            "else" => Token![else],
  129|  30.4k|            "match" => Token![match],
  130|  30.3k|            "for" => Token![for],
  131|  25.4k|            "in" => Token![in],
  132|  25.3k|            "while" => Token![while],
  133|  25.3k|            _ => TokenKind::Ident,
  134|       |        }
  135|  38.5k|    }
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer12current_text:
  137|   391k|    fn current_text(&self) -> &str {
  138|   391k|        &self.input[self.start..self.current]
  139|   391k|    }
_RNvMNtCslYuo9QnQJS9_5hedge5lexerNtB2_5Lexer10make_token:
  165|   351k|    fn make_token(&mut self, kind: TokenKind) -> RawToken {
  166|   351k|        let leading_trivia = mem::take(&mut self.leading_trivia);
  167|   351k|
  168|   351k|        let text = self.current_text().to_string();
  169|   351k|        self.start = self.current;
  170|   351k|
  171|   351k|        let trailing_trivia = self.trailing_trivia();
  172|   351k|        RawToken::new(leading_trivia, kind, text, trailing_trivia)
  173|   351k|    }
_RNCNvMNtCslYuo9QnQJS9_5hedge5lexerNtB4_5Lexer12trivia_piece0B6_:
  202|  8.49k|                self.eat_while(|char| char != '\n');
_RNCNvMNtCslYuo9QnQJS9_5hedge5lexerNtB4_5Lexer7matches0B6_:
  156|  18.4k|        let match_found = self.peek().is_some_and(|char| char == expected);
_RNCNvMNtCslYuo9QnQJS9_5hedge5lexerNtB4_5Lexer5ident0B6_:
  113|  98.4k|        self.eat_while(|char| is_alpha(char) || is_digit(char));

_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser4open:
  491|   503k|    fn open(&mut self) -> MarkOpened {
  492|   503k|        let mark = MarkOpened::new(self.events.len());
  493|   503k|        self.events.push(Event::Open {
  494|   503k|            kind: TreeKind::Unknown,
  495|   503k|        });
  496|   503k|        mark
  497|   503k|    }
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser6expect:
  571|   385k|    fn expect(&mut self, kind: TokenKind) {
  572|   385k|        if self.eat(kind) {
  573|   173k|            return;
  574|   211k|        }
  575|   211k|
  576|   211k|        let current = &self.tokens[self.pos];
  577|   211k|        self.error(SyntaxError::UnexpectedToken {
  578|   211k|            expected: kind,
  579|   211k|            found: (
  580|   211k|                current.kind(),
  581|   211k|                Span {
  582|   211k|                    start: self.offset,
  583|   211k|                    end: self.offset + current.text_len(),
  584|   211k|                },
  585|   211k|            ),
  586|   211k|        });
  587|   385k|    }
_RNvNtCslYuo9QnQJS9_5hedge6parser17parse_source_file:
   13|  1.12k|pub fn parse_source_file(input: &str) -> (ast::SourceFileU, Vec<SyntaxError>) {
   14|  1.12k|    let (tokens, mut errors) = Lexer::new(input).all_tokens();
   15|  1.12k|    let (raw_tree, parser_errors) = Parser::new(tokens).parse_source_file();
   16|  1.12k|    errors.extend(parser_errors);
   17|  1.12k|    let syntax_tree = SyntaxNode::root(raw_tree);
   18|  1.12k|
   19|  1.12k|    (
   20|  1.12k|        ast::SourceFile::cast(syntax_tree).expect("root of syntax tree should be a source file"),
   21|  1.12k|        errors,
   22|  1.12k|    )
   23|  1.12k|}
_RNvNvNtCslYuo9QnQJS9_5hedge6parser19right_binds_tighter9tightness:
  300|   169k|    fn tightness(kind: TokenKind) -> Option<usize> {
  301|   169k|        [
  302|   169k|            // Precedence table:
  303|   169k|            Token![=],
  304|   169k|            Token![+],
  305|   169k|            Token![-],
  306|   169k|            Token![*],
  307|   169k|            Token![/],
  308|   169k|        ]
  309|   169k|        .iter()
  310|   169k|        .position(|level| level == &kind)
  311|   169k|    }
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser11open_before:
  505|  45.5k|    fn open_before(&mut self, closed: MarkClosed) -> MarkOpened {
  506|  45.5k|        let opened = MarkOpened::new(closed.index);
  507|  45.5k|        self.events.insert(
  508|  45.5k|            closed.index,
  509|  45.5k|            Event::Open {
  510|  45.5k|                kind: TreeKind::Unknown,
  511|  45.5k|            },
  512|  45.5k|        );
  513|  45.5k|        opened
  514|  45.5k|    }
_RNvMNtCslYuo9QnQJS9_5hedge6parserNtB2_11ParamFlavor7l_delim:
   95|  7.45k|    fn l_delim(self) -> TokenKind {
   96|  7.45k|        match self {
   97|  1.98k|            Self::Function => Token!['('],
   98|  5.47k|            Self::Lambda => Token![|],
   99|       |        }
  100|  7.45k|    }
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser5is_at:
  550|  1.63M|    fn is_at(&self, kind: TokenKind) -> bool {
  551|  1.63M|        self.nth(0) == kind
  552|  1.63M|    }
_RNvMs0_NtCslYuo9QnQJS9_5hedge6parserNtB5_10MarkOpened3new:
  664|   548k|    fn new(index: usize) -> Self {
  665|   548k|        Self { index }
  666|   548k|    }
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser12close_before:
  516|  42.5k|    fn close_before(
  517|  42.5k|        &mut self,
  518|  42.5k|        before: MarkOpened,
  519|  42.5k|        kind: TreeKind,
  520|  42.5k|        after: MarkClosed,
  521|  42.5k|    ) -> MarkClosed {
  522|  42.5k|        self.events[before.index] = Event::Open { kind };
  523|  42.5k|        self.events.insert(after.index, Event::Close);
  524|  42.5k|        MarkClosed::new(before.index)
  525|  42.5k|    }
_RNvNtCslYuo9QnQJS9_5hedge6parser11lambda_expr:
  421|  5.47k|fn lambda_expr(p: &mut Parser) -> MarkClosed {
  422|  5.47k|    assert!(p.is_at(Token![|]));
  423|       |
  424|  5.47k|    p.scope(TreeKind::LambdaExpr, |p| {
  425|       |        params(p, ParamFlavor::Lambda);
  426|       |        if p.is_at(Token![->]) {
  427|       |            ret_type_expr(p);
  428|       |        }
  429|       |
  430|       |        expr(p);
  431|  5.47k|    })
  432|  5.47k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser4expr:
  262|   173k|fn expr(p: &mut Parser) -> Option<MarkClosed> {
  263|   173k|    // TODO: revisit this and table, seems odd to pass eof
  264|   173k|    // We don't have a token to the left yet, so the right should always bind tighter
  265|   173k|    rec_expr(p, TokenKind::Eof)
  266|   173k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser5param:
  138|  3.34k|fn param(p: &mut Parser, flavor: ParamFlavor) {
  139|  3.34k|    assert!(p.is_at(TokenKind::Ident));
  140|       |
  141|  3.34k|    p.scope(TreeKind::Param, |p| {
  142|       |        p.expect(TokenKind::Ident);
  143|       |
  144|       |        match flavor {
  145|       |            ParamFlavor::Function => {
  146|       |                p.expect(Token![:]);
  147|       |                type_expr(p);
  148|       |            }
  149|       |            ParamFlavor::Lambda => {
  150|       |                if p.eat(Token![:]) {
  151|       |                    type_expr(p);
  152|       |                } else {
  153|       |                    p.empty();
  154|       |                }
  155|       |            }
  156|       |        }
  157|       |
  158|       |        if !p.is_at(flavor.r_delim()) {
  159|       |            p.expect(Token![,]);
  160|       |        }
  161|  3.34k|    });
  162|  3.34k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser7if_expr:
  370|  2.40k|fn if_expr(p: &mut Parser) -> MarkClosed {
  371|  2.40k|    assert!(p.is_at(Token![if]));
  372|       |
  373|  2.40k|    p.scope(TreeKind::IfExpr, |p| {
  374|       |        p.expect(Token![if]);
  375|       |
  376|       |        let condition_mark = expr(p);
  377|       |        if condition_mark.is_none() {
  378|       |            p.advance_with_error("expected a condition");
  379|       |        }
  380|       |
  381|       |        if p.is_at(Token!['{']) {
  382|       |            block_expr(p);
  383|       |        }
  384|       |
  385|       |        if p.is_at(Token![else]) {
  386|       |            p.expect(Token![else]);
  387|       |
  388|       |            match p.nth(0) {
  389|       |                Token!['{'] => {
  390|       |                    block_expr(p);
  391|       |                }
  392|       |                Token![if] => {
  393|       |                    if_expr(p);
  394|       |                }
  395|       |                _ => p.advance_with_error("expected a block or another if expression"),
  396|       |            }
  397|       |        }
  398|  2.40k|    })
  399|  2.40k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser4args:
  434|  16.0k|fn args(p: &mut Parser) {
  435|  16.0k|    assert!(p.is_at(Token!['(']));
  436|       |
  437|  16.0k|    p.scope(TreeKind::Args, |p| {
  438|       |        p.expect(Token!['(']);
  439|       |        arg_list(p);
  440|       |        p.expect(Token![')']);
  441|  16.0k|    });
  442|  16.0k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser12literal_expr:
  344|  3.53k|fn literal_expr(p: &mut Parser) -> MarkClosed {
  345|  3.53k|    assert!(p.is_at_any(&[TokenKind::Int, Token![true], Token![false]]));
  346|       |
  347|  3.53k|    p.scope(TreeKind::LiteralExpr, |p| {
  348|       |        p.advance();
  349|  3.53k|    })
  350|  3.53k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser8function:
   68|  2.47k|fn function(p: &mut Parser) {
   69|  2.47k|    assert!(p.is_at(Token![fn]));
   70|       |
   71|  2.47k|    p.scope(TreeKind::Function, |p| {
   72|       |        p.expect(Token![fn]);
   73|       |        p.expect(TokenKind::Ident);
   74|       |        if p.is_at(Token!['(']) {
   75|       |            params(p, ParamFlavor::Function);
   76|       |        }
   77|       |        if p.is_at(Token![->]) {
   78|       |            ret_type_expr(p);
   79|       |        } else {
   80|       |            p.empty();
   81|       |        }
   82|       |        if p.is_at(Token!['{']) {
   83|       |            block_expr(p);
   84|       |        }
   85|  2.47k|    });
   86|  2.47k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser8for_expr:
  401|  4.57k|fn for_expr(p: &mut Parser) -> MarkClosed {
  402|  4.57k|    assert!(p.is_at(Token![for]));
  403|       |
  404|  4.57k|    p.scope(TreeKind::ForExpr, |p| {
  405|       |        p.expect(Token![for]);
  406|       |        p.expect(TokenKind::Ident);
  407|       |        p.expect(Token![in]);
  408|       |
  409|       |        expr(p);
  410|       |        p.expect(Token![.]);
  411|       |        p.expect(Token![.]);
  412|       |        expr(p);
  413|       |
  414|       |        // TODO: do we need to check if at every time?
  415|       |        if p.is_at(Token!['{']) {
  416|       |            block_expr(p);
  417|       |        }
  418|  4.57k|    })
  419|  4.57k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser8arg_list:
  444|  16.0k|fn arg_list(p: &mut Parser) {
  445|  16.0k|    p.scope(TreeKind::ArgList, |p| {
  446|       |        while !p.is_at(Token![')']) && !p.is_at_eof() {
  447|       |            if p.is_at_any(EXPR_FIRST) {
  448|       |                arg(p);
  449|       |            } else {
  450|       |                break;
  451|       |            }
  452|       |        }
  453|  16.0k|    });
  454|  16.0k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser6params:
  112|  7.45k|fn params(p: &mut Parser, flavor: ParamFlavor) {
  113|  7.45k|    let (l_delim, r_delim) = (flavor.l_delim(), flavor.r_delim());
  114|  7.45k|    assert!(p.is_at(l_delim));
  115|       |
  116|  7.45k|    p.scope(TreeKind::Params, |p| {
  117|       |        p.expect(l_delim);
  118|       |        param_list(p, r_delim, flavor);
  119|       |        p.expect(r_delim);
  120|  7.45k|    });
  121|  7.45k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser13ret_type_expr:
  164|    110|fn ret_type_expr(p: &mut Parser) {
  165|    110|    assert!(p.is_at(Token![->]));
  166|       |
  167|    110|    p.scope(TreeKind::RetTypeExpr, |p| {
  168|       |        p.expect(Token![->]);
  169|       |        type_expr(p);
  170|    110|    });
  171|    110|}
_RNvNtCslYuo9QnQJS9_5hedge6parser11source_file:
   49|  1.12k|fn source_file(p: &mut Parser) {
   50|  1.12k|    p.scope(TreeKind::SourceFile, |p| {
   51|       |        item_list(p);
   52|       |        p.expect(TokenKind::Eof);
   53|  1.12k|    });
   54|  1.12k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser10block_expr:
  192|  54.2k|fn block_expr(p: &mut Parser) -> MarkClosed {
  193|  54.2k|    assert!(p.is_at(Token!['{']));
  194|       |
  195|  54.2k|    p.scope(TreeKind::BlockExpr, |p| {
  196|       |        p.expect(Token!['{']);
  197|       |        block(p);
  198|       |        p.expect(Token!['}']);
  199|  54.2k|    })
  200|  54.2k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser8let_stmt:
  236|     87|fn let_stmt(p: &mut Parser) {
  237|     87|    assert!(p.is_at(Token![let]));
  238|       |
  239|     87|    p.scope(TreeKind::LetStmt, |p| {
  240|       |        p.expect(Token![let]);
  241|       |        p.expect(TokenKind::Ident);
  242|       |        p.expect(Token![=]);
  243|       |        expr(p);
  244|       |        p.expect(Token![;]);
  245|     87|    });
  246|     87|}
_RNvNtCslYuo9QnQJS9_5hedge6parser11return_stmt:
  248|    988|fn return_stmt(p: &mut Parser) {
  249|    988|    assert!(p.is_at(Token![return]));
  250|       |
  251|    988|    p.scope(TreeKind::ReturnStmt, |p| {
  252|       |        p.expect(Token![return]);
  253|       |        if p.is_at_any(EXPR_FIRST) {
  254|       |            expr(p);
  255|       |        } else {
  256|       |            p.empty();
  257|       |        }
  258|       |        p.expect(Token![;]);
  259|    988|    });
  260|    988|}
_RNvNtCslYuo9QnQJS9_5hedge6parser19right_binds_tighter:
  299|   163k|fn right_binds_tighter(left: TokenKind, right: TokenKind) -> bool {
  300|       |    fn tightness(kind: TokenKind) -> Option<usize> {
  301|       |        [
  302|       |            // Precedence table:
  303|       |            Token![=],
  304|       |            Token![+],
  305|       |            Token![-],
  306|       |            Token![*],
  307|       |            Token![/],
  308|       |        ]
  309|       |        .iter()
  310|       |        .position(|level| level == &kind)
  311|       |    }
  312|       |
  313|   163k|    let Some(right_tightness) = tightness(right) else {
  314|   157k|        return false;
  315|       |    };
  316|  5.81k|    let Some(left_tightness) = tightness(left) else {
  317|       |        // We should only not have a left precedence when we start parsing an expression
  318|  4.11k|        assert!(left == TokenKind::Eof);
  319|  4.11k|        return true;
  320|       |    };
  321|       |
  322|  1.69k|    right_tightness > left_tightness
  323|   163k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser14delimited_expr:
  326|   158k|fn delimited_expr(p: &mut Parser) -> Option<MarkClosed> {
  327|   158k|    let mark_closed = match p.nth(0) {
  328|  3.53k|        TokenKind::Int | Token![true] | Token![false] => literal_expr(p),
  329|  17.6k|        TokenKind::Ident => ident_expr(p),
  330|  52.2k|        Token!['{'] => block_expr(p),
  331|  73.0k|        Token!['('] => paren_expr(p),
  332|  2.40k|        Token![if] => if_expr(p),
  333|  4.57k|        Token![for] => for_expr(p),
  334|  5.47k|        Token![|] => lambda_expr(p),
  335|       |        _ => {
  336|      0|            assert!(!p.is_at_any(EXPR_FIRST));
  337|      0|            return None;
  338|       |        }
  339|       |    };
  340|       |
  341|   158k|    Some(mark_closed)
  342|   158k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser10ident_expr:
  352|  17.6k|fn ident_expr(p: &mut Parser) -> MarkClosed {
  353|  17.6k|    assert!(p.is_at(TokenKind::Ident));
  354|       |
  355|  17.6k|    p.scope(TreeKind::IdentExpr, |p| {
  356|       |        p.advance();
  357|  17.6k|    })
  358|  17.6k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser3arg:
  456|  15.3k|fn arg(p: &mut Parser) {
  457|  15.3k|    p.scope(TreeKind::Arg, |p| {
  458|       |        expr(p);
  459|       |        if !p.is_at(Token![')']) {
  460|       |            p.expect(Token![,]);
  461|       |        }
  462|  15.3k|    });
  463|  15.3k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser8rec_expr:
  269|   178k|fn rec_expr(p: &mut Parser, left: TokenKind) -> Option<MarkClosed> {
  270|   178k|    if !p.is_at_any(EXPR_FIRST) {
  271|       |        // TODO: p.err_recovery?
  272|  19.3k|        p.advance_with_error("expected expression");
  273|  19.3k|        return None;
  274|   158k|    }
  275|       |
  276|   158k|    let mut lhs = delimited_expr(p)?;
  277|       |
  278|   174k|    while p.is_at(Token!['(']) {
  279|  16.0k|        let mark = p.open_before(lhs);
  280|  16.0k|        args(p);
  281|  16.0k|        lhs = p.close(mark, TreeKind::CallExpr);
  282|  16.0k|    }
  283|       |
  284|   163k|    loop {
  285|   163k|        let right = p.nth(0);
  286|   163k|        if right_binds_tighter(left, right) {
  287|  4.77k|            let mark = p.open_before(lhs);
  288|  4.77k|            p.advance();
  289|  4.77k|            // TODO: rhs none
  290|  4.77k|            rec_expr(p, right);
  291|  4.77k|            lhs = p.close(mark, TreeKind::BinaryExpr);
  292|  4.77k|        } else {
  293|   158k|            return Some(lhs);
  294|       |        }
  295|       |    }
  296|   178k|}
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser17parse_source_file:
  479|  1.12k|    pub fn parse_source_file(mut self) -> (RawNode, Vec<SyntaxError>) {
  480|  1.12k|        source_file(&mut self);
  481|  1.12k|        self.build_tree()
  482|  1.12k|    }
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser5close:
  499|   506k|    fn close(&mut self, mark: MarkOpened, kind: TreeKind) -> MarkClosed {
  500|   506k|        self.events[mark.index] = Event::Open { kind };
  501|   506k|        self.events.push(Event::Close);
  502|   506k|        MarkClosed::new(mark.index)
  503|   506k|    }
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser7advance:
  527|   351k|    fn advance(&mut self) {
  528|   351k|        assert!(!self.is_out_of_tokens());
  529|   351k|        self.fuel.set(Self::MAX_FUEL);
  530|   351k|
  531|   351k|        self.events.push(Event::Advance);
  532|   351k|        self.offset += self.tokens[self.pos].total_len();
  533|   351k|        self.pos += 1;
  534|   351k|    }
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser3nth:
  536|  2.52M|    fn nth(&self, lookahead: usize) -> TokenKind {
  537|  2.52M|        let fuel = self.fuel.get();
  538|  2.52M|        assert!(fuel != 0, "parser is stuck");
  539|  2.52M|        self.fuel.set(fuel - 1);
  540|  2.52M|
  541|  2.52M|        self.tokens
  542|  2.52M|            .get(self.pos + lookahead)
  543|  2.52M|            .map_or(TokenKind::Eof, |it| it.kind())
  544|  2.52M|    }
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser16is_out_of_tokens:
  546|   351k|    fn is_out_of_tokens(&self) -> bool {
  547|   351k|        self.pos == self.tokens.len()
  548|   351k|    }
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser9is_at_eof:
  554|   477k|    fn is_at_eof(&self) -> bool {
  555|   477k|        self.is_at(TokenKind::Eof)
  556|   477k|    }
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser9is_at_any:
  558|   433k|    fn is_at_any(&self, set: &[TokenKind]) -> bool {
  559|   433k|        set.contains(&self.nth(0))
  560|   433k|    }
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser3eat:
  562|   387k|    fn eat(&mut self, kind: TokenKind) -> bool {
  563|   387k|        if self.is_at(kind) {
  564|   173k|            self.advance();
  565|   173k|            true
  566|       |        } else {
  567|   213k|            false
  568|       |        }
  569|   387k|    }
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser18advance_with_error:
  589|   155k|    fn advance_with_error(&mut self, error: &str) {
  590|   155k|        let m = self.open();
  591|   155k|
  592|   155k|        let current = &self.tokens[self.pos];
  593|   155k|        self.error(SyntaxError::Generic {
  594|   155k|            message: error.to_string(),
  595|   155k|            span: Span {
  596|   155k|                start: self.offset,
  597|   155k|                end: self.offset + current.text_len(),
  598|   155k|            },
  599|   155k|        });
  600|   155k|        if !self.is_at_eof() {
  601|   152k|            self.advance();
  602|   152k|        }
  603|       |
  604|   155k|        self.close(m, TreeKind::Unknown);
  605|   155k|    }
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser5error:
  607|   367k|    fn error(&mut self, error: SyntaxError) {
  608|   367k|        self.events.push(Event::Error(error));
  609|   367k|    }
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser5empty:
  611|  4.22k|    fn empty(&mut self) {
  612|  4.22k|        self.scope(TreeKind::Empty, |_| {});
  613|  4.22k|    }
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser10build_tree:
  615|  1.12k|    fn build_tree(self) -> (RawNode, Vec<SyntaxError>) {
  616|  1.12k|        let mut tokens = self.tokens.into_iter();
  617|  1.12k|        let mut events = self.events;
  618|  1.12k|        let mut stack = Vec::new();
  619|  1.12k|
  620|  1.12k|        let mut errors = Vec::new();
  621|  1.12k|
  622|  1.12k|        // Special case: pop the last `Close` event to ensure
  623|  1.12k|        // that the stack is non-empty inside the loop.
  624|  1.12k|        assert!(matches!(events.pop(), Some(Event::Close)));
  625|       |
  626|  1.81M|        for event in events {
  627|  1.81M|            match event {
  628|       |                // Starting a new node; just push an empty tree to the stack.
  629|   548k|                Event::Open { kind } => stack.push(RawNodeBuilder::new(kind)),
  630|       |                // A tree is done.
  631|       |                // Pop it off the stack and append to a new current tree.
  632|   547k|                Event::Close => {
  633|   547k|                    let tree = stack.pop().unwrap().build();
  634|   547k|                    stack
  635|   547k|                        .last_mut()
  636|   547k|                        // If we don't pop the last `Close` before this loop,
  637|   547k|                        // this unwrap would trigger for it.
  638|   547k|                        .unwrap()
  639|   547k|                        .add_child(NodeOrToken::Node(tree));
  640|   547k|                }
  641|       |                // Consume a token and append it to the current tree
  642|   351k|                Event::Advance => {
  643|   351k|                    let token = tokens.next().unwrap();
  644|   351k|                    stack
  645|   351k|                        .last_mut()
  646|   351k|                        .unwrap()
  647|   351k|                        .add_child(NodeOrToken::Token(token));
  648|   351k|                }
  649|       |                // An error occurred, record it and continue
  650|   367k|                Event::Error(error) => errors.push(error),
  651|       |            }
  652|       |        }
  653|       |
  654|       |        // Our parser will guarantee that all the trees are closed
  655|       |        // and cover the entirety of tokens.
  656|  1.12k|        assert!(stack.len() == 1);
  657|  1.12k|        assert!(tokens.next().is_none());
  658|       |
  659|  1.12k|        (stack.pop().unwrap().build(), errors)
  660|  1.12k|    }
_RNvMs1_NtCslYuo9QnQJS9_5hedge6parserNtB5_10MarkClosed3new:
  670|   548k|    fn new(index: usize) -> Self {
  671|   548k|        Self { index }
  672|   548k|    }
_RNvNtCslYuo9QnQJS9_5hedge6parser10param_list:
  123|  7.45k|fn param_list(p: &mut Parser, r_delim: TokenKind, flavor: ParamFlavor) {
  124|  7.45k|    p.scope(TreeKind::ParamList, |p| {
  125|       |        while !p.is_at(r_delim) && !p.is_at_eof() {
  126|       |            if p.is_at(TokenKind::Ident) {
  127|       |                param(p, flavor);
  128|       |            } else {
  129|       |                if p.is_at_any(PARAM_LIST_RECOVERY) {
  130|       |                    break;
  131|       |                }
  132|       |                p.advance_with_error("expected parameter");
  133|       |            }
  134|       |        }
  135|  7.45k|    });
  136|  7.45k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser10paren_expr:
  360|  73.0k|fn paren_expr(p: &mut Parser) -> MarkClosed {
  361|  73.0k|    assert!(p.is_at(Token!['(']));
  362|       |
  363|  73.0k|    p.scope(TreeKind::ParenExpr, |p| {
  364|       |        p.expect(Token!['(']);
  365|       |        expr(p);
  366|       |        p.expect(Token![')']);
  367|  73.0k|    })
  368|  73.0k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser9type_expr:
  173|  1.82k|fn type_expr(p: &mut Parser) {
  174|  1.82k|    p.scope(TreeKind::TypeExpr, |p| {
  175|       |        p.expect(TokenKind::Ident);
  176|  1.82k|    });
  177|  1.82k|}
_RNvNtCslYuo9QnQJS9_5hedge6parser9item_list:
   56|  1.12k|fn item_list(p: &mut Parser) {
   57|  1.12k|    p.scope(TreeKind::ItemList, |p| {
   58|       |        while !p.is_at_eof() {
   59|       |            if p.is_at(Token![fn]) {
   60|       |                function(p);
   61|       |            } else {
   62|       |                p.advance_with_error("expected a function");
   63|       |            }
   64|       |        }
   65|  1.12k|    });
   66|  1.12k|}
_RNvMNtCslYuo9QnQJS9_5hedge6parserNtB2_11ParamFlavor7r_delim:
  102|  10.8k|    fn r_delim(self) -> TokenKind {
  103|  10.8k|        match self {
  104|  3.62k|            Self::Function => Token![')'],
  105|  7.18k|            Self::Lambda => Token![|],
  106|       |        }
  107|  10.8k|    }
_RNvNtCslYuo9QnQJS9_5hedge6parser5block:
  202|  54.2k|fn block(p: &mut Parser) {
  203|  54.2k|    p.scope(TreeKind::Block, |p| {
  204|       |        let stmt_list_mark = p.open();
  205|       |
  206|       |        while !p.is_at(Token!['}']) && !p.is_at_eof() {
  207|       |            match p.nth(0) {
  208|       |                Token![let] => let_stmt(p),
  209|       |                Token![return] => return_stmt(p),
  210|       |                _ if p.is_at_any(EXPR_FIRST) => match expr(p) {
  211|       |                    Some(mark) => {
  212|       |                        if !p.is_at(Token!['}']) && !p.is_at_eof() {
  213|       |                            let stmt_expr_mark = p.open_before(mark);
  214|       |                            p.expect(Token![;]);
  215|       |                            p.close(stmt_expr_mark, TreeKind::ExprStmt);
  216|       |                        } else {
  217|       |                            p.close_before(stmt_list_mark, TreeKind::StmtList, mark);
  218|       |                            return;
  219|       |                        }
  220|       |                    }
  221|       |                    None => p.advance_with_error("expected an expression"),
  222|       |                },
  223|       |                _ => {
  224|       |                    if p.is_at_any(STMT_RECOVERY) {
  225|       |                        break;
  226|       |                    }
  227|       |                    p.advance_with_error("expected statement");
  228|       |                }
  229|       |            }
  230|       |        }
  231|       |
  232|       |        p.close(stmt_list_mark, TreeKind::StmtList);
  233|  54.2k|    });
  234|  54.2k|}
_RNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB4_6Parser3new:
  468|  1.12k|    pub fn new(tokens: Vec<RawToken>) -> Self {
  469|  1.12k|        Self {
  470|  1.12k|            tokens,
  471|  1.12k|            pos: 0,
  472|  1.12k|            offset: 0,
  473|  1.12k|            fuel: Cell::new(Self::MAX_FUEL),
  474|  1.12k|            events: Vec::new(),
  475|  1.12k|        }
  476|  1.12k|    }
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_11lambda_expr0EB7_:
  485|  5.47k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  5.47k|        let mark = self.open();
  487|  5.47k|        body(self);
  488|  5.47k|        self.close(mark, kind)
  489|  5.47k|    }
_RNCNvNtCslYuo9QnQJS9_5hedge6parser12literal_expr0B5_:
  347|  3.53k|    p.scope(TreeKind::LiteralExpr, |p| {
  348|  3.53k|        p.advance();
  349|  3.53k|    })
_RNCNvNtCslYuo9QnQJS9_5hedge6parser7if_expr0B5_:
  373|  2.40k|    p.scope(TreeKind::IfExpr, |p| {
  374|  2.40k|        p.expect(Token![if]);
  375|  2.40k|
  376|  2.40k|        let condition_mark = expr(p);
  377|  2.40k|        if condition_mark.is_none() {
  378|  1.01k|            p.advance_with_error("expected a condition");
  379|  1.39k|        }
  380|       |
  381|  2.40k|        if p.is_at(Token!['{']) {
  382|    549|            block_expr(p);
  383|  1.85k|        }
  384|       |
  385|  2.40k|        if p.is_at(Token![else]) {
  386|    224|            p.expect(Token![else]);
  387|    224|
  388|    224|            match p.nth(0) {
  389|     80|                Token!['{'] => {
  390|     80|                    block_expr(p);
  391|     80|                }
  392|      0|                Token![if] => {
  393|      0|                    if_expr(p);
  394|      0|                }
  395|    144|                _ => p.advance_with_error("expected a block or another if expression"),
  396|       |            }
  397|  2.18k|        }
  398|  2.40k|    })
_RNCNvNtCslYuo9QnQJS9_5hedge6parser8function0B5_:
   71|  2.47k|    p.scope(TreeKind::Function, |p| {
   72|  2.47k|        p.expect(Token![fn]);
   73|  2.47k|        p.expect(TokenKind::Ident);
   74|  2.47k|        if p.is_at(Token!['(']) {
   75|  1.98k|            params(p, ParamFlavor::Function);
   76|  1.98k|        }
   77|  2.47k|        if p.is_at(Token![->]) {
   78|     70|            ret_type_expr(p);
   79|  2.40k|        } else {
   80|  2.40k|            p.empty();
   81|  2.40k|        }
   82|  2.47k|        if p.is_at(Token!['{']) {
   83|  1.14k|            block_expr(p);
   84|  1.33k|        }
   85|  2.47k|    });
_RNCNvNtCslYuo9QnQJS9_5hedge6parser8let_stmt0B5_:
  239|     87|    p.scope(TreeKind::LetStmt, |p| {
  240|     87|        p.expect(Token![let]);
  241|     87|        p.expect(TokenKind::Ident);
  242|     87|        p.expect(Token![=]);
  243|     87|        expr(p);
  244|     87|        p.expect(Token![;]);
  245|     87|    });
_RNCNvNtCslYuo9QnQJS9_5hedge6parser13ret_type_expr0B5_:
  167|    110|    p.scope(TreeKind::RetTypeExpr, |p| {
  168|    110|        p.expect(Token![->]);
  169|    110|        type_expr(p);
  170|    110|    });
_RNCNvNtCslYuo9QnQJS9_5hedge6parser11source_file0B5_:
   50|  1.12k|    p.scope(TreeKind::SourceFile, |p| {
   51|  1.12k|        item_list(p);
   52|  1.12k|        p.expect(TokenKind::Eof);
   53|  1.12k|    });
_RNCNvNtCslYuo9QnQJS9_5hedge6parser10block_expr0B5_:
  195|  54.2k|    p.scope(TreeKind::BlockExpr, |p| {
  196|  54.2k|        p.expect(Token!['{']);
  197|  54.2k|        block(p);
  198|  54.2k|        p.expect(Token!['}']);
  199|  54.2k|    })
_RNCNvNtCslYuo9QnQJS9_5hedge6parser11return_stmt0B5_:
  251|    988|    p.scope(TreeKind::ReturnStmt, |p| {
  252|    988|        p.expect(Token![return]);
  253|    988|        if p.is_at_any(EXPR_FIRST) {
  254|    797|            expr(p);
  255|    797|        } else {
  256|    191|            p.empty();
  257|    191|        }
  258|    988|        p.expect(Token![;]);
  259|    988|    });
_RNCNvNtCslYuo9QnQJS9_5hedge6parser10ident_expr0B5_:
  355|  17.6k|    p.scope(TreeKind::IdentExpr, |p| {
  356|  17.6k|        p.advance();
  357|  17.6k|    })
_RNCNvNtCslYuo9QnQJS9_5hedge6parser8for_expr0B5_:
  404|  4.57k|    p.scope(TreeKind::ForExpr, |p| {
  405|  4.57k|        p.expect(Token![for]);
  406|  4.57k|        p.expect(TokenKind::Ident);
  407|  4.57k|        p.expect(Token![in]);
  408|  4.57k|
  409|  4.57k|        expr(p);
  410|  4.57k|        p.expect(Token![.]);
  411|  4.57k|        p.expect(Token![.]);
  412|  4.57k|        expr(p);
  413|  4.57k|
  414|  4.57k|        // TODO: do we need to check if at every time?
  415|  4.57k|        if p.is_at(Token!['{']) {
  416|    249|            block_expr(p);
  417|  4.32k|        }
  418|  4.57k|    })
_RNCNvNtCslYuo9QnQJS9_5hedge6parser4args0B5_:
  437|  16.0k|    p.scope(TreeKind::Args, |p| {
  438|  16.0k|        p.expect(Token!['(']);
  439|  16.0k|        arg_list(p);
  440|  16.0k|        p.expect(Token![')']);
  441|  16.0k|    });
_RNCNvNtCslYuo9QnQJS9_5hedge6parser8arg_list0B5_:
  445|  16.0k|    p.scope(TreeKind::ArgList, |p| {
  446|  31.4k|        while !p.is_at(Token![')']) && !p.is_at_eof() {
  447|  21.7k|            if p.is_at_any(EXPR_FIRST) {
  448|  15.3k|                arg(p);
  449|  15.3k|            } else {
  450|  6.33k|                break;
  451|       |            }
  452|       |        }
  453|  16.0k|    });
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_11return_stmt0EB7_:
  485|    988|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|    988|        let mark = self.open();
  487|    988|        body(self);
  488|    988|        self.close(mark, kind)
  489|    988|    }
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_11source_file0EB7_:
  485|  1.12k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  1.12k|        let mark = self.open();
  487|  1.12k|        body(self);
  488|  1.12k|        self.close(mark, kind)
  489|  1.12k|    }
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_12literal_expr0EB7_:
  485|  3.53k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  3.53k|        let mark = self.open();
  487|  3.53k|        body(self);
  488|  3.53k|        self.close(mark, kind)
  489|  3.53k|    }
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_4args0EB7_:
  485|  16.0k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  16.0k|        let mark = self.open();
  487|  16.0k|        body(self);
  488|  16.0k|        self.close(mark, kind)
  489|  16.0k|    }
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_8function0EB7_:
  485|  2.47k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  2.47k|        let mark = self.open();
  487|  2.47k|        body(self);
  488|  2.47k|        self.close(mark, kind)
  489|  2.47k|    }
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_9item_list0EB7_:
  485|  1.12k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  1.12k|        let mark = self.open();
  487|  1.12k|        body(self);
  488|  1.12k|        self.close(mark, kind)
  489|  1.12k|    }
_RNCNvNvNtCslYuo9QnQJS9_5hedge6parser19right_binds_tighter9tightness0B7_:
  310|   836k|        .position(|level| level == &kind)
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_13ret_type_expr0EB7_:
  485|    110|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|    110|        let mark = self.open();
  487|    110|        body(self);
  488|    110|        self.close(mark, kind)
  489|    110|    }
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_7if_expr0EB7_:
  485|  2.40k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  2.40k|        let mark = self.open();
  487|  2.40k|        body(self);
  488|  2.40k|        self.close(mark, kind)
  489|  2.40k|    }
_RNCNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB6_6Parser3nth0B8_:
  543|  2.52M|            .map_or(TokenKind::Eof, |it| it.kind())
_RNCNvNtCslYuo9QnQJS9_5hedge6parser10paren_expr0B5_:
  363|  73.0k|    p.scope(TreeKind::ParenExpr, |p| {
  364|  73.0k|        p.expect(Token!['(']);
  365|  73.0k|        expr(p);
  366|  73.0k|        p.expect(Token![')']);
  367|  73.0k|    })
_RNCNvNtCslYuo9QnQJS9_5hedge6parser9item_list0B5_:
   57|  1.12k|    p.scope(TreeKind::ItemList, |p| {
   58|  53.9k|        while !p.is_at_eof() {
   59|  52.8k|            if p.is_at(Token![fn]) {
   60|  2.47k|                function(p);
   61|  50.3k|            } else {
   62|  50.3k|                p.advance_with_error("expected a function");
   63|  50.3k|            }
   64|       |        }
   65|  1.12k|    });
_RNCNvNtCslYuo9QnQJS9_5hedge6parser11lambda_expr0B5_:
  424|  5.47k|    p.scope(TreeKind::LambdaExpr, |p| {
  425|  5.47k|        params(p, ParamFlavor::Lambda);
  426|  5.47k|        if p.is_at(Token![->]) {
  427|     40|            ret_type_expr(p);
  428|  5.43k|        }
  429|       |
  430|  5.47k|        expr(p);
  431|  5.47k|    })
_RNCNvNtCslYuo9QnQJS9_5hedge6parser5param0B5_:
  141|  3.34k|    p.scope(TreeKind::Param, |p| {
  142|  3.34k|        p.expect(TokenKind::Ident);
  143|  3.34k|
  144|  3.34k|        match flavor {
  145|  1.63k|            ParamFlavor::Function => {
  146|  1.63k|                p.expect(Token![:]);
  147|  1.63k|                type_expr(p);
  148|  1.63k|            }
  149|       |            ParamFlavor::Lambda => {
  150|  1.71k|                if p.eat(Token![:]) {
  151|     83|                    type_expr(p);
  152|  1.62k|                } else {
  153|  1.62k|                    p.empty();
  154|  1.62k|                }
  155|       |            }
  156|       |        }
  157|       |
  158|  3.34k|        if !p.is_at(flavor.r_delim()) {
  159|  2.96k|            p.expect(Token![,]);
  160|  2.96k|        }
  161|  3.34k|    });
_RNCNvNtCslYuo9QnQJS9_5hedge6parser3arg0B5_:
  457|  15.3k|    p.scope(TreeKind::Arg, |p| {
  458|  15.3k|        expr(p);
  459|  15.3k|        if !p.is_at(Token![')']) {
  460|  15.1k|            p.expect(Token![,]);
  461|  15.1k|        }
  462|  15.3k|    });
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB2_5empty0EB7_:
  485|  4.22k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  4.22k|        let mark = self.open();
  487|  4.22k|        body(self);
  488|  4.22k|        self.close(mark, kind)
  489|  4.22k|    }
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_10ident_expr0EB7_:
  485|  17.6k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  17.6k|        let mark = self.open();
  487|  17.6k|        body(self);
  488|  17.6k|        self.close(mark, kind)
  489|  17.6k|    }
_RNCNvNtCslYuo9QnQJS9_5hedge6parser9type_expr0B5_:
  174|  1.82k|    p.scope(TreeKind::TypeExpr, |p| {
  175|  1.82k|        p.expect(TokenKind::Ident);
  176|  1.82k|    });
_RNCNvNtCslYuo9QnQJS9_5hedge6parser5block0B5_:
  203|  54.2k|    p.scope(TreeKind::Block, |p| {
  204|  54.2k|        let stmt_list_mark = p.open();
  205|       |
  206|   132k|        while !p.is_at(Token!['}']) && !p.is_at_eof() {
  207|   131k|            match p.nth(0) {
  208|     87|                Token![let] => let_stmt(p),
  209|    988|                Token![return] => return_stmt(p),
  210|   130k|                _ if p.is_at_any(EXPR_FIRST) => match expr(p) {
  211|  67.2k|                    Some(mark) => {
  212|  67.2k|                        if !p.is_at(Token!['}']) && !p.is_at_eof() {
  213|  24.7k|                            let stmt_expr_mark = p.open_before(mark);
  214|  24.7k|                            p.expect(Token![;]);
  215|  24.7k|                            p.close(stmt_expr_mark, TreeKind::ExprStmt);
  216|  24.7k|                        } else {
  217|  42.5k|                            p.close_before(stmt_list_mark, TreeKind::StmtList, mark);
  218|  42.5k|                            return;
  219|       |                        }
  220|       |                    }
  221|      0|                    None => p.advance_with_error("expected an expression"),
  222|       |                },
  223|       |                _ => {
  224|  63.2k|                    if p.is_at_any(STMT_RECOVERY) {
  225|  11.0k|                        break;
  226|  52.2k|                    }
  227|  52.2k|                    p.advance_with_error("expected statement");
  228|       |                }
  229|       |            }
  230|       |        }
  231|       |
  232|  11.7k|        p.close(stmt_list_mark, TreeKind::StmtList);
  233|  54.2k|    });
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_5block0EB7_:
  485|  54.2k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  54.2k|        let mark = self.open();
  487|  54.2k|        body(self);
  488|  54.2k|        self.close(mark, kind)
  489|  54.2k|    }
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_5param0EB7_:
  485|  3.34k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  3.34k|        let mark = self.open();
  487|  3.34k|        body(self);
  488|  3.34k|        self.close(mark, kind)
  489|  3.34k|    }
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_6params0EB7_:
  485|  7.45k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  7.45k|        let mark = self.open();
  487|  7.45k|        body(self);
  488|  7.45k|        self.close(mark, kind)
  489|  7.45k|    }
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_8arg_list0EB7_:
  485|  16.0k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  16.0k|        let mark = self.open();
  487|  16.0k|        body(self);
  488|  16.0k|        self.close(mark, kind)
  489|  16.0k|    }
_RNCNvMs_NtCslYuo9QnQJS9_5hedge6parserNtB6_6Parser5empty0B8_:
  612|  4.22k|        self.scope(TreeKind::Empty, |_| {});
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_10block_expr0EB7_:
  485|  54.2k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  54.2k|        let mark = self.open();
  487|  54.2k|        body(self);
  488|  54.2k|        self.close(mark, kind)
  489|  54.2k|    }
_RNCNvNtCslYuo9QnQJS9_5hedge6parser10param_list0B5_:
  124|  7.45k|    p.scope(TreeKind::ParamList, |p| {
  125|  43.4k|        while !p.is_at(r_delim) && !p.is_at_eof() {
  126|  39.0k|            if p.is_at(TokenKind::Ident) {
  127|  3.34k|                param(p, flavor);
  128|  3.34k|            } else {
  129|  35.6k|                if p.is_at_any(PARAM_LIST_RECOVERY) {
  130|  3.06k|                    break;
  131|  32.6k|                }
  132|  32.6k|                p.advance_with_error("expected parameter");
  133|       |            }
  134|       |        }
  135|  7.45k|    });
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_10paren_expr0EB7_:
  485|  73.0k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  73.0k|        let mark = self.open();
  487|  73.0k|        body(self);
  488|  73.0k|        self.close(mark, kind)
  489|  73.0k|    }
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_8let_stmt0EB7_:
  485|     87|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|     87|        let mark = self.open();
  487|     87|        body(self);
  488|     87|        self.close(mark, kind)
  489|     87|    }
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_9type_expr0EB7_:
  485|  1.82k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  1.82k|        let mark = self.open();
  487|  1.82k|        body(self);
  488|  1.82k|        self.close(mark, kind)
  489|  1.82k|    }
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_3arg0EB7_:
  485|  15.3k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  15.3k|        let mark = self.open();
  487|  15.3k|        body(self);
  488|  15.3k|        self.close(mark, kind)
  489|  15.3k|    }
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_8for_expr0EB7_:
  485|  4.57k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  4.57k|        let mark = self.open();
  487|  4.57k|        body(self);
  488|  4.57k|        self.close(mark, kind)
  489|  4.57k|    }
_RNCNvNtCslYuo9QnQJS9_5hedge6parser6params0B5_:
  116|  7.45k|    p.scope(TreeKind::Params, |p| {
  117|  7.45k|        p.expect(l_delim);
  118|  7.45k|        param_list(p, r_delim, flavor);
  119|  7.45k|        p.expect(r_delim);
  120|  7.45k|    });
_RINvMs_NtCslYuo9QnQJS9_5hedge6parserNtB5_6Parser5scopeNCNvB5_10param_list0EB7_:
  485|  7.45k|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|  7.45k|        let mark = self.open();
  487|  7.45k|        body(self);
  488|  7.45k|        self.close(mark, kind)
  489|  7.45k|    }

_RNvMs8_NtNtCslYuo9QnQJS9_5hedge6syntax3cstINtNtB7_13utility_types11NodeOrTokenNtB5_10SyntaxNodeNtB5_11SyntaxTokenE12next_sibling:
  483|   899k|    pub fn next_sibling(&self) -> Option<Self> {
  484|   899k|        match self {
  485|   547k|            Self::Node(it) => it.next_sibling(),
  486|   351k|            Self::Token(it) => it.next_sibling(),
  487|       |        }
  488|   899k|    }
_RNvMs8_NtNtCslYuo9QnQJS9_5hedge6syntax3cstINtNtB7_13utility_types11NodeOrTokenNtB5_10SyntaxNodeNtB5_11SyntaxTokenE6parent:
  469|   494k|    pub fn parent(&self) -> Option<&SyntaxNode> {
  470|   494k|        match self {
  471|   312k|            Self::Node(it) => it.parent(),
  472|   181k|            Self::Token(it) => it.parent(),
  473|       |        }
  474|   494k|    }
_RNvMs8_NtNtCslYuo9QnQJS9_5hedge6syntax3cstINtNtB7_13utility_types11NodeOrTokenNtB5_10SyntaxNodeNtB5_11SyntaxTokenE3new:
  448|   899k|    pub fn new(raw: RawNodeChild, offset: usize, parent: Option<(SyntaxNode, usize)>) -> Self {
  449|   899k|        match raw {
  450|   547k|            NodeOrToken::Node(node) => Self::Node(SyntaxNode::new(node, offset, parent)),
  451|   351k|            NodeOrToken::Token(token) => Self::Token(SyntaxToken::new(token, offset, parent)),
  452|       |        }
  453|   899k|    }
_RNvMs3_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_11SyntaxToken3new:
  291|   351k|    pub fn new(raw: RawToken, offset: usize, parent: Option<(SyntaxNode, usize)>) -> Self {
  292|   351k|        Self(Rc::new(SyntaxTokenData {
  293|   351k|            raw,
  294|   351k|            offset,
  295|   351k|            parent,
  296|   351k|        }))
  297|   351k|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB2_10SyntaxNode12next_sibling:
  179|   547k|    pub fn next_sibling(&self) -> Option<SyntaxNodeChild> {
  180|   547k|        let (parent, idx) = self.0.parent.as_ref()?;
  181|   547k|        parent.nth_child(idx + 1)
  182|   547k|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB2_10SyntaxNode3new:
   40|   548k|    pub fn new(raw: RawNode, offset: usize, parent: Option<(Self, usize)>) -> Self {
   41|   548k|        Self(Rc::new(SyntaxNodeData {
   42|   548k|            raw,
   43|   548k|            offset,
   44|   548k|            parent,
   45|   548k|        }))
   46|   548k|    }
_RNvMs3_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_11SyntaxToken6offset:
  319|   703k|    pub fn offset(&self) -> usize {
  320|   703k|        self.0.offset
  321|   703k|    }
_RNvMs3_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_11SyntaxToken3raw:
  346|  1.75M|    fn raw(&self) -> &RawToken {
  347|  1.75M|        &self.0.raw
  348|  1.75M|    }
_RNvXsa_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_8PreorderNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
  540|  1.80M|    fn next(&mut self) -> Option<Self::Item> {
  541|  1.80M|        let current_event = self.next_event.take();
  542|  1.80M|
  543|  1.80M|        self.next_event = current_event
  544|  1.80M|            .as_ref()
  545|  1.80M|            .and_then(|current_event| match current_event {
  546|       |                WalkEvent::Enter(child) => match child {
  547|       |                    NodeOrToken::Node(node) => node
  548|       |                        .nth_child(0)
  549|       |                        .map(WalkEvent::Enter)
  550|       |                        .or_else(|| Some(WalkEvent::Leave(child.clone()))),
  551|       |                    NodeOrToken::Token(token) => {
  552|       |                        Some(WalkEvent::Leave(NodeOrToken::Token(token.clone())))
  553|       |                    }
  554|       |                },
  555|       |                WalkEvent::Leave(child) => {
  556|       |                    if *child == self.start {
  557|       |                        None
  558|       |                    } else {
  559|       |                        child.next_sibling().map(WalkEvent::Enter).or_else(|| {
  560|       |                            child
  561|       |                                .parent()
  562|       |                                .map(|parent| WalkEvent::Leave(NodeOrToken::Node(parent.clone())))
  563|       |                        })
  564|       |                    }
  565|       |                }
  566|  1.80M|            });
  567|  1.80M|
  568|  1.80M|        current_event
  569|  1.80M|    }
_RNvXsk_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_11SyntaxTokenNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   22|   351k|#[derive(Clone, PartialEq, Eq, Hash)]
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB2_10SyntaxNode3raw:
  100|  1.45M|    fn raw(&self) -> &RawNode {
  101|  1.45M|        &self.0.raw
  102|  1.45M|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB2_10SyntaxNode9nth_child:
  134|  1.44M|    pub fn nth_child(&self, idx: usize) -> Option<SyntaxNodeChild> {
  135|  1.44M|        let (raw_child, rel_offset) = self.raw().nth_child(idx)?;
  136|   899k|        let offset = self.offset() + rel_offset;
  137|   899k|        let parent_with_idx = (self.clone(), idx);
  138|   899k|        let syntax_child = SyntaxNodeChild::new(raw_child.clone(), offset, Some(parent_with_idx));
  139|   899k|
  140|   899k|        Some(syntax_child)
  141|  1.44M|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB2_10SyntaxNode8preorder:
  201|  1.12k|    pub fn preorder(&self) -> Preorder {
  202|  1.12k|        Preorder::new(self.clone())
  203|  1.12k|    }
_RNvMs3_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_11SyntaxToken15trailing_trivia:
  315|   351k|    pub fn trailing_trivia(&self) -> &Trivia {
  316|   351k|        self.raw().trailing_trivia()
  317|   351k|    }
_RNvMs3_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_11SyntaxToken10total_span:
  339|   351k|    pub fn total_span(&self) -> Span {
  340|   351k|        Span {
  341|   351k|            start: self.offset(),
  342|   351k|            end: self.offset() + self.total_len(),
  343|   351k|        }
  344|   351k|    }
_RNvXsd_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_10SyntaxNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
   10|   548k|#[derive(Clone, PartialEq, Eq, Hash)]
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB2_10SyntaxNode10total_span:
   93|  1.12k|    pub fn total_span(&self) -> Span {
   94|  1.12k|        Span {
   95|  1.12k|            start: self.offset(),
   96|  1.12k|            end: self.offset() + self.total_len(),
   97|  1.12k|        }
   98|  1.12k|    }
_RNvMs3_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_11SyntaxToken9total_len:
  311|   703k|    pub fn total_len(&self) -> usize {
  312|   703k|        self.raw().total_len()
  313|   703k|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB2_10SyntaxNode4root:
   36|  1.12k|    pub fn root(raw: RawNode) -> Self {
   37|  1.12k|        Self::new(raw, 0, None)
   38|  1.12k|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB2_10SyntaxNode6offset:
   62|   901k|    pub fn offset(&self) -> usize {
   63|   901k|        self.0.offset
   64|   901k|    }
_RNvXs_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB4_10SyntaxNodeNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  262|  1.12k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  263|  1.12k|        self.raw().fmt(f)
  264|  1.12k|    }
_RNvMs9_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_8Preorder3new:
  530|  1.12k|    fn new(start: SyntaxNode) -> Self {
  531|  1.12k|        let start = NodeOrToken::Node(start.clone());
  532|  1.12k|        let next_event = Some(WalkEvent::Enter(start.clone()));
  533|  1.12k|        Self { start, next_event }
  534|  1.12k|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB2_10SyntaxNode9total_len:
   58|  1.12k|    pub fn total_len(&self) -> usize {
   59|  1.12k|        self.raw().total_len()
   60|  1.12k|    }
_RNvMs3_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_11SyntaxToken6parent:
  327|   181k|    pub fn parent(&self) -> Option<&SyntaxNode> {
  328|   181k|        self.0.parent.as_ref().map(|(parent, _)| parent)
  329|   181k|    }
_RNvMs3_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_11SyntaxToken8text_len:
  307|   351k|    pub fn text_len(&self) -> usize {
  308|   351k|        self.text().len()
  309|   351k|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB2_10SyntaxNode4kind:
   54|  1.12k|    pub fn kind(&self) -> TreeKind {
   55|  1.12k|        self.raw().kind()
   56|  1.12k|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB2_10SyntaxNode6parent:
   82|   312k|    pub fn parent(&self) -> Option<&Self> {
   83|   312k|        self.0.parent.as_ref().map(|(parent, _)| parent)
   84|   312k|    }
_RNvXs1_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_14SyntaxNodeDataNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eq:
  278|   547k|    fn eq(&self, other: &Self) -> bool {
  279|   547k|        self.offset == other.offset && Arc::ptr_eq(&self.raw.0, &other.raw.0)
  280|   547k|    }
_RNvMs3_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_11SyntaxToken14leading_trivia:
  299|   351k|    pub fn leading_trivia(&self) -> &Trivia {
  300|   351k|        self.raw().leading_trivia()
  301|   351k|    }
_RNvMs3_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_11SyntaxToken4text:
  323|   351k|    pub fn text(&self) -> &str {
  324|   351k|        self.raw().text()
  325|   351k|    }
_RNvXsb_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_10SyntaxNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   10|  1.45M|#[derive(Clone, PartialEq, Eq, Hash)]
_RNvMs3_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB5_11SyntaxToken12next_sibling:
  359|   351k|    pub fn next_sibling(&self) -> Option<SyntaxNodeChild> {
  360|   351k|        let (parent, idx) = self.0.parent.as_ref()?;
  361|   351k|        parent.nth_child(idx + 1)
  362|   351k|    }
_RNCNCNvXsa_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB9_8PreorderNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next00Bd_:
  550|  54.3k|                        .or_else(|| Some(WalkEvent::Leave(child.clone()))),
_RNCNvXsa_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB7_8PreorderNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0Bb_:
  545|  1.80M|            .and_then(|current_event| match current_event {
  546|   900k|                WalkEvent::Enter(child) => match child {
  547|   548k|                    NodeOrToken::Node(node) => node
  548|   548k|                        .nth_child(0)
  549|   548k|                        .map(WalkEvent::Enter)
  550|   548k|                        .or_else(|| Some(WalkEvent::Leave(child.clone()))),
  551|   351k|                    NodeOrToken::Token(token) => {
  552|   351k|                        Some(WalkEvent::Leave(NodeOrToken::Token(token.clone())))
  553|       |                    }
  554|       |                },
  555|   900k|                WalkEvent::Leave(child) => {
  556|   900k|                    if *child == self.start {
  557|  1.12k|                        None
  558|       |                    } else {
  559|   899k|                        child.next_sibling().map(WalkEvent::Enter).or_else(|| {
  560|       |                            child
  561|       |                                .parent()
  562|       |                                .map(|parent| WalkEvent::Leave(NodeOrToken::Node(parent.clone())))
  563|   899k|                        })
  564|       |                    }
  565|       |                }
  566|  1.80M|            });
_RNCNCNCNvXsa_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtBb_8PreorderNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0s_00Bf_:
  562|   494k|                                .map(|parent| WalkEvent::Leave(NodeOrToken::Node(parent.clone())))
_RNCNvMNtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB4_10SyntaxNode6parent0B8_:
   83|   312k|        self.0.parent.as_ref().map(|(parent, _)| parent)
_RNCNvMs3_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB7_11SyntaxToken6parent0Bb_:
  328|   181k|        self.0.parent.as_ref().map(|(parent, _)| parent)
_RNCNCNvXsa_NtNtCslYuo9QnQJS9_5hedge6syntax3cstNtB9_8PreorderNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0s_0Bd_:
  559|   494k|                        child.next_sibling().map(WalkEvent::Enter).or_else(|| {
  560|   494k|                            child
  561|   494k|                                .parent()
  562|   494k|                                .map(|parent| WalkEvent::Leave(NodeOrToken::Node(parent.clone())))
  563|   494k|                        })

_RNvXs3_NtNtCslYuo9QnQJS9_5hedge6syntax5kindsNtB5_9TokenKindNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
    4|  5.11M|#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, ConstParamTy)]
_RNvXsc_NtNtCslYuo9QnQJS9_5hedge6syntax5kindsNtB5_8TreeKindNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
  245|  1.12k|#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, ConstParamTy)]

_RNCNvMNtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB4_7RawNode8children0B8_:
   73|   899k|        self.0.children.iter().map(|(child, _)| child)
_RNCNvMNtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB4_7RawNode3news_0B8_:
   44|   899k|            .map(|child| {
   45|   899k|                let child_len = child.total_len();
   46|   899k|                let child_with_offset = (child, offset);
   47|   899k|
   48|   899k|                offset += child_len;
   49|   899k|                child_with_offset
   50|   899k|            })
_RNCNvXs_NtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB6_7RawNodeNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt0Ba_:
  133|   899k|        self.children().try_for_each(|child| child.fmt(f))
_RNCNvMNtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB4_7RawNode3new0B8_:
   40|   899k|        let len = children.iter().map(|child| child.total_len()).sum();
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB2_7RawNode3new:
   39|   548k|    pub fn new(kind: TreeKind, children: Vec<RawNodeChild>) -> Self {
   40|   548k|        let len = children.iter().map(|child| child.total_len()).sum();
   41|   548k|        let mut offset = 0;
   42|   548k|        let children = children
   43|   548k|            .into_iter()
   44|   548k|            .map(|child| {
   45|       |                let child_len = child.total_len();
   46|       |                let child_with_offset = (child, offset);
   47|       |
   48|       |                offset += child_len;
   49|       |                child_with_offset
   50|   548k|            })
   51|   548k|            .collect();
   52|   548k|
   53|   548k|        Self(Arc::new(RawNodeData {
   54|   548k|            kind,
   55|   548k|            len,
   56|   548k|            children,
   57|   548k|        }))
   58|   548k|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB2_7RawNode8children:
   72|   548k|    pub fn children(&self) -> impl Iterator<Item = &RawNodeChild> {
   73|   548k|        self.0.children.iter().map(|(child, _)| child)
   74|   548k|    }
_RNvMs1_NtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB5_8RawToken4kind:
  165|  3.08M|    pub fn kind(&self) -> TokenKind {
  166|  3.08M|        self.0.kind
  167|  3.08M|    }
_RNvMs1_NtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB5_8RawToken15trailing_trivia:
  173|  2.46M|    pub fn trailing_trivia(&self) -> &Trivia {
  174|  2.46M|        &self.0.trailing_trivia
  175|  2.46M|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB2_7RawNode9nth_child:
   76|  1.44M|    pub fn nth_child(&self, idx: usize) -> Option<&(RawNodeChild, usize)> {
   77|  1.44M|        self.0.children.get(idx)
   78|  1.44M|    }
_RNvXs2_NtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB5_8RawTokenNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  205|   351k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  206|   351k|        self.leading_trivia().fmt(f)?;
  207|   351k|        self.text().fmt(f)?;
  208|   351k|        self.trailing_trivia().fmt(f)
  209|   351k|    }
_RNvMs1_NtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB5_8RawToken3new:
  147|   351k|    pub fn new(
  148|   351k|        leading_trivia: Trivia,
  149|   351k|        kind: TokenKind,
  150|   351k|        text: String,
  151|   351k|        trailing_trivia: Trivia,
  152|   351k|    ) -> Self {
  153|   351k|        Self(Arc::new(RawTokenData {
  154|   351k|            leading_trivia,
  155|   351k|            kind,
  156|   351k|            text,
  157|   351k|            trailing_trivia,
  158|   351k|        }))
  159|   351k|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB2_7RawNode9total_len:
   64|  1.09M|    pub fn total_len(&self) -> usize {
   65|  1.09M|        self.0.len
   66|  1.09M|    }
_RNvMs1_NtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB5_8RawToken9total_len:
  181|  1.75M|    pub fn total_len(&self) -> usize {
  182|  1.75M|        self.leading_trivia().total_len() + self.text_len() + self.trailing_trivia().total_len()
  183|  1.75M|    }
_RNvMs3_NtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB5_14RawNodeBuilder9add_child:
  225|   899k|    pub fn add_child(&mut self, child: RawNodeChild) {
  226|   899k|        self.children.push(child);
  227|   899k|    }
_RNvXs5_NtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB5_7RawNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   10|   547k|#[derive(Debug, Clone, PartialEq, Eq, Hash)]
_RNvMs3_NtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB5_14RawNodeBuilder5build:
  229|   548k|    pub fn build(self) -> RawNode {
  230|   548k|        RawNode::new(self.kind, self.children)
  231|   548k|    }
_RNvMs1_NtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB5_8RawToken14leading_trivia:
  161|  2.46M|    pub fn leading_trivia(&self) -> &Trivia {
  162|  2.46M|        &self.0.leading_trivia
  163|  2.46M|    }
_RNvMs1_NtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB5_8RawToken4text:
  169|  2.83M|    pub fn text(&self) -> &str {
  170|  2.83M|        &self.0.text
  171|  2.83M|    }
_RNvMs3_NtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB5_14RawNodeBuilder3new:
  218|   548k|    pub fn new(kind: TreeKind) -> Self {
  219|   548k|        Self {
  220|   548k|            kind,
  221|   548k|            children: Vec::new(),
  222|   548k|        }
  223|   548k|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB2_7RawNode4kind:
   60|  1.12k|    pub fn kind(&self) -> TreeKind {
   61|  1.12k|        self.0.kind
   62|  1.12k|    }
_RNvXs_NtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB4_7RawNodeNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  132|   548k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  133|   548k|        self.children().try_for_each(|child| child.fmt(f))
  134|   548k|    }
_RNvMs1_NtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB5_8RawToken8text_len:
  177|  2.12M|    pub fn text_len(&self) -> usize {
  178|  2.12M|        self.text().len()
  179|  2.12M|    }
_RNvXsi_NtNtCslYuo9QnQJS9_5hedge6syntax3rawNtB5_8RawTokenNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   25|   351k|#[derive(Debug, Clone, PartialEq, Eq, Hash)]
_RNvMs0_NtNtCslYuo9QnQJS9_5hedge6syntax3rawINtNtB7_13utility_types11NodeOrTokenNtB5_7RawNodeNtB5_8RawTokenE9total_len:
  138|  1.79M|    pub fn total_len(&self) -> usize {
  139|  1.79M|        match self {
  140|  1.09M|            Self::Node(node) => node.total_len(),
  141|   703k|            Self::Token(token) => token.total_len(),
  142|       |        }
  143|  1.79M|    }

_RNCNvMNtNtCslYuo9QnQJS9_5hedge6syntax6triviaNtB4_6Trivia9total_len0B8_:
   35|   125k|        self.pieces.iter().map(|piece| piece.total_len()).sum()
_RNCNvXs_NtNtCslYuo9QnQJS9_5hedge6syntax6triviaNtB6_6TriviaNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt0Ba_:
   98|  20.9k|        self.pieces.iter().try_for_each(|piece| piece.fmt(f))
_RNvMs0_NtNtCslYuo9QnQJS9_5hedge6syntax6triviaNtB5_11TriviaPiece5count:
  151|  57.3k|    fn count(&self) -> usize {
  152|  57.3k|        match self {
  153|  55.7k|            Self::Space(count) | Self::Tab(count) | Self::Newline(count) => *count,
  154|  1.54k|            Self::Comment(_) => 1,
  155|       |        }
  156|  57.3k|    }
_RNvXs1_NtNtCslYuo9QnQJS9_5hedge6syntax6triviaNtB5_11TriviaPieceNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
  160|  20.9k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
  161|  20.9k|        match self {
  162|  5.02k|            Self::Space(count) => " ".repeat(*count).fmt(f),
  163|  4.50k|            Self::Tab(count) => "\t".repeat(*count).fmt(f),
  164|  9.87k|            Self::Newline(count) => "\n".repeat(*count).fmt(f),
  165|  1.54k|            Self::Comment(comment) => comment.fmt(f),
  166|       |        }
  167|  20.9k|    }
_RNvMs0_NtNtCslYuo9QnQJS9_5hedge6syntax6triviaNtB5_11TriviaPiece9total_len:
  103|   125k|    pub fn total_len(&self) -> usize {
  104|   125k|        match self {
  105|   116k|            Self::Space(count) | Self::Tab(count) | Self::Newline(count) => *count,
  106|  9.25k|            Self::Comment(comment) => comment.len(),
  107|       |        }
  108|   125k|    }
_RNvXs4_NtNtCslYuo9QnQJS9_5hedge6syntax6triviaNtB5_6TriviaNtNtCs9nhK3FOW46N_4core7default7Default7defaultB9_:
    3|   705k|#[derive(Debug, Clone, Default, PartialEq, Eq, Hash)]
_RNvXs_NtNtCslYuo9QnQJS9_5hedge6syntax6triviaNtB4_6TriviaNtNtCs9nhK3FOW46N_4core3fmt7Display3fmt:
   97|   703k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   98|   703k|        self.pieces.iter().try_for_each(|piece| piece.fmt(f))
   99|   703k|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax6triviaNtB2_6Trivia5empty:
   26|   353k|    pub fn empty() -> Self {
   27|   353k|        Self::default()
   28|   353k|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax6triviaNtB2_6Trivia9total_len:
   34|  4.22M|    pub fn total_len(&self) -> usize {
   35|  4.22M|        self.pieces.iter().map(|piece| piece.total_len()).sum()
   36|  4.22M|    }
_RNvMNtNtCslYuo9QnQJS9_5hedge6syntax6triviaNtB2_6Trivia4push:
   81|  57.3k|    pub(crate) fn push(&mut self, new_piece: TriviaPiece) {
   82|  57.3k|        if new_piece.count() == 0 {
   83|      0|            return;
   84|  57.3k|        }
   85|       |
   86|  57.3k|        if let Some(last) = self.pieces.last_mut()
   87|  40.2k|            && let Some(combined) = last.combine(&new_piece)
   88|  36.3k|        {
   89|  36.3k|            *last = combined;
   90|  36.3k|        } else {
   91|  20.9k|            self.pieces.push(new_piece);
   92|  20.9k|        }
   93|  57.3k|    }
_RNvMs0_NtNtCslYuo9QnQJS9_5hedge6syntax6triviaNtB5_11TriviaPiece7combine:
  142|  40.2k|    fn combine(&self, new_piece: &Self) -> Option<Self> {
  143|  40.2k|        match (self, new_piece) {
  144|  12.1k|            (Self::Space(c1), Self::Space(c2)) => Some(Self::Space(c1 + c2)),
  145|  4.83k|            (Self::Tab(c1), Self::Tab(c2)) => Some(Self::Tab(c1 + c2)),
  146|  19.3k|            (Self::Newline(c1), Self::Newline(c2)) => Some(Self::Newline(c1 + c2)),
  147|  3.87k|            _ => None,
  148|       |        }
  149|  40.2k|    }

_RNvXsh_NtNtCslYuo9QnQJS9_5hedge6syntax13utility_typesNtB5_4SpanNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqCs9XZRW3uwhtg_6parser:
   67|   353k|#[derive(Debug, Clone, Copy, PartialEq, Eq)]
_RNvXs_NtNtCslYuo9QnQJS9_5hedge6syntax13utility_typesINtB4_11NodeOrTokenNtNtB6_3raw7RawNodeNtB19_8RawTokenENtNtCs9nhK3FOW46N_4core3fmt7Display3fmtB8_:
   58|   899k|    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
   59|   899k|        match self {
   60|   547k|            Self::Node(it) => it.fmt(f),
   61|   351k|            Self::Token(it) => it.fmt(f),
   62|       |        }
   63|   899k|    }
_RNvXs7_NtNtCslYuo9QnQJS9_5hedge6syntax13utility_typesINtB5_11NodeOrTokenNtNtB7_3cst10SyntaxNodeNtB1a_11SyntaxTokenENtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
    6|   900k|#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs4_NtNtCslYuo9QnQJS9_5hedge6syntax13utility_typesINtB5_11NodeOrTokenNtNtB7_3raw7RawNodeNtB1a_8RawTokenENtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
    6|   899k|#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs4_NtNtCslYuo9QnQJS9_5hedge6syntax13utility_typesINtB5_11NodeOrTokenNtNtB7_3cst10SyntaxNodeNtB1a_11SyntaxTokenENtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
    6|  55.5k|#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]

