_RNvXsk_CsfxpM3XgVJph_9arbitraryReNtB5_9Arbitrary9size_hintCs4xxCAF7KXUf_3fmt:
  868|    466|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  869|    466|        (0, None)
  870|    466|    }
_RNvXsk_CsfxpM3XgVJph_9arbitraryReNtB5_9Arbitrary19arbitrary_take_rest:
  862|    466|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  863|    466|        let size = u.len();
  864|    466|        arbitrary_str(&mut u, size)
  865|    466|    }
_RNvCsfxpM3XgVJph_9arbitrary13arbitrary_str:
  838|    466|fn arbitrary_str<'a>(u: &mut Unstructured<'a>, size: usize) -> Result<&'a str> {
  839|    466|    match str::from_utf8(u.peek_bytes(size).unwrap()) {
  840|    307|        Ok(s) => {
  841|    307|            u.bytes(size).unwrap();
  842|    307|            Ok(s)
  843|       |        }
  844|    159|        Err(e) => {
  845|    159|            let i = e.valid_up_to();
  846|    159|            let valid = u.bytes(i).unwrap();
  847|    159|            let s = unsafe {
  848|      0|                debug_assert!(str::from_utf8(valid).is_ok());
  849|    159|                str::from_utf8_unchecked(valid)
  850|    159|            };
  851|    159|            Ok(s)
  852|       |        }
  853|       |    }
  854|    466|}

_RNvMNtCsfxpM3XgVJph_9arbitrary12unstructuredNtB2_12Unstructured10peek_bytes:
  579|    466|    pub fn peek_bytes(&self, size: usize) -> Option<&'a [u8]> {
  580|    466|        self.data.get(..size)
  581|    466|    }
_RNvMNtCsfxpM3XgVJph_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|    466|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|    466|        if self.data.len() < size {
  550|      0|            return Err(Error::NotEnoughData);
  551|    466|        }
  552|    466|
  553|    466|        let (for_buf, rest) = self.data.split_at(size);
  554|    466|        self.data = rest;
  555|    466|        Ok(for_buf)
  556|    466|    }
_RNvMNtCsfxpM3XgVJph_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    466|    pub fn new(data: &'a [u8]) -> Self {
   86|    466|        Unstructured { data }
   87|    466|    }
_RNvMNtCsfxpM3XgVJph_9arbitrary12unstructuredNtB2_12Unstructured3lenB4_:
  108|    466|    pub fn len(&self) -> usize {
  109|    466|        self.data.len()
  110|    466|    }

_RNvXs_NtCs8DgC3fJ2RFb_9itertools8peek_nthINtB4_7PeekNthNtNtNtCs9nhK3FOW46N_4core3str4iter5CharsENtNtNtNtBX_4iter6traits8iterator8Iterator4nextCsdJXOEzRi98w_5hedge:
  148|  77.5k|    fn next(&mut self) -> Option<Self::Item> {
  149|  77.5k|        self.buf.pop_front().or_else(|| self.iter.next())
  150|  77.5k|    }
_RNCNvXs_NtCs8DgC3fJ2RFb_9itertools8peek_nthINtB6_7PeekNthNtNtNtCs9nhK3FOW46N_4core3str4iter5CharsENtNtNtNtBZ_4iter6traits8iterator8Iterator4next0CsdJXOEzRi98w_5hedge:
  149|  3.37k|        self.buf.pop_front().or_else(|| self.iter.next())
_RINvNtCs8DgC3fJ2RFb_9itertools8peek_nth8peek_nthNtNtNtCs9nhK3FOW46N_4core3str4iter5CharsECsdJXOEzRi98w_5hedge:
   24|    466|pub fn peek_nth<I>(iterable: I) -> PeekNth<I::IntoIter>
   25|    466|where
   26|    466|    I: IntoIterator,
   27|    466|{
   28|    466|    PeekNth {
   29|    466|        iter: iterable.into_iter().fuse(),
   30|    466|        buf: VecDeque::new(),
   31|    466|    }
   32|    466|}
_RNvMNtCs8DgC3fJ2RFb_9itertools8peek_nthINtB2_7PeekNthNtNtNtCs9nhK3FOW46N_4core3str4iter5CharsE8peek_nthCsdJXOEzRi98w_5hedge:
   71|   131k|    pub fn peek_nth(&mut self, n: usize) -> Option<&I::Item> {
   72|   131k|        let unbuffered_items = (n + 1).saturating_sub(self.buf.len());
   73|   131k|
   74|   131k|        self.buf.extend(self.iter.by_ref().take(unbuffered_items));
   75|   131k|
   76|   131k|        self.buf.get(n)
   77|   131k|    }
_RNvMNtCs8DgC3fJ2RFb_9itertools8peek_nthINtB2_7PeekNthNtNtNtCs9nhK3FOW46N_4core3str4iter5CharsE4peekCsdJXOEzRi98w_5hedge:
   39|   129k|    pub fn peek(&mut self) -> Option<&I::Item> {
   40|   129k|        self.peek_nth(0)
   41|   129k|    }

_RNvNvCs4xxCAF7KXUf_3fmt1__19___libfuzzer_sys_run:
  303|    466|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|       |                $body
  305|    466|            }
rust_fuzzer_test_input:
  259|    466|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|    466|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|    466|
  262|    466|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|    466|                // implementation. This helps the fuzzer avoid exploring all the
  264|    466|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|    466|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|    466|                // get to longer inputs that actually lead to interesting executions
  267|    466|                // quicker.
  268|    466|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|    466|                }
  271|    466|
  272|    466|                let mut u = Unstructured::new(bytes);
  273|    466|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|    466|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|    466|                }
  291|       |
  292|    466|                let data = match data {
  293|    466|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|    466|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|    466|                result.to_libfuzzer_code()
  299|    466|            }
_RNvXCseFm56jpCDOc_13libfuzzer_sysNtB2_6CorpusINtNtCs9nhK3FOW46N_4core7convert4FromuE4from:
   30|    466|    fn from(_: ()) -> Self {
   31|    466|        Self::Keep
   32|    466|    }
LLVMFuzzerTestOneInput:
   58|    466|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    466|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    466|    });
   63|    466|
   64|    466|    match test_input {
   65|    466|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    466|}
_RNvMs_CseFm56jpCDOc_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|    466|    pub fn to_libfuzzer_code(self) -> i32 {
   41|    466|        match self {
   42|    466|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|    466|    }
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCseFm56jpCDOc_13libfuzzer_sys15test_input_wrap0B3_:
   59|    466|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    466|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    466|        rust_fuzzer_test_input(data_slice)
   62|    466|    });

_RNvMs2_NtCs4LeKDsHh25A_9once_cell3impINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE14is_initializedCseFm56jpCDOc_13libfuzzer_sys:
   49|    466|    pub(crate) fn is_initialized(&self) -> bool {
   50|    466|        // An `Acquire` load is enough because that makes all the initialization
   51|    466|        // operations visible to us, and, this being a fast path, weaker
   52|    466|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    466|        // `SeqCst` operations on the slow path.
   54|    466|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    466|    }

_RNvMs4_NtCs4LeKDsHh25A_9once_cell4syncINtB5_8OnceCellNtNtCsjOdcKtOMjJI_5alloc6string6StringE3getCseFm56jpCDOc_13libfuzzer_sys:
  963|    466|        pub fn get(&self) -> Option<&T> {
  964|    466|            if self.0.is_initialized() {
  965|       |                // Safe b/c value is initialized.
  966|      0|                Some(unsafe { self.get_unchecked() })
  967|       |            } else {
  968|    466|                None
  969|       |            }
  970|    466|        }

_RNvCs4xxCAF7KXUf_3fmt14count_comments:
   51|  96.7k|fn count_comments(token: &SyntaxToken) -> usize {
   52|  96.7k|    token
   53|  96.7k|        .leading_trivia()
   54|  96.7k|        .pieces
   55|  96.7k|        .iter()
   56|  96.7k|        .chain(token.trailing_trivia().pieces.iter())
   57|  96.7k|        .filter(|piece| piece.is_comment())
   58|  96.7k|        .count()
   59|  96.7k|}
_RNvXCs4xxCAF7KXUf_3fmtNtB2_13WithoutTriviaNtNtNtCsdJXOEzRi98w_5hedge6syntax8rewriter14SyntaxRewriter13rewrite_token:
   44|  96.7k|    fn rewrite_token(&self, token: SyntaxToken) -> SyntaxToken {
   45|  96.7k|        token
   46|  96.7k|            .set_leading_trivia(Trivia::empty())
   47|  96.7k|            .set_trailing_trivia(Trivia::empty())
   48|  96.7k|    }
_RNCNvCs4xxCAF7KXUf_3fmt14count_comments0B3_:
   57|  11.8k|        .filter(|piece| piece.is_comment())

_RNvXsZ_NtNtCsdJXOEzRi98w_5hedge3ast5nodesINtB5_8LeafNodeKVNtNtNtNtB9_6syntax5kinds8TreeKind10SourceFileUKVNtNtB7_5State11UnvalidatedUENtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs4xxCAF7KXUf_3fmt:
   34|    932|#[derive(Debug, Clone, PartialEq, Eq, Hash)]
_RNvXNtNtCsdJXOEzRi98w_5hedge3ast5nodesINtB2_8LeafNodeKVNtNtNtNtB6_6syntax5kinds8TreeKind10SourceFileUKVNtNtB4_5State11UnvalidatedUEINtB2_7AstNodeKB1C_E6syntaxB6_:
   43|  3.72k|    fn syntax(&self) -> &SyntaxNode {
   44|  3.72k|        &self.syntax
   45|  3.72k|    }
_RNvXNtNtCsdJXOEzRi98w_5hedge3ast5nodesINtB2_8LeafNodeKVNtNtNtNtB6_6syntax5kinds8TreeKind10SourceFileUKVNtNtB4_5State11UnvalidatedUEINtB2_7AstNodeKB1C_E4castB6_:
   40|  1.39k|    fn cast(node: SyntaxNode) -> Option<Self> {
   41|  1.39k|        (node.kind() == K).then_some(Self { syntax: node })
   42|  1.39k|    }

_RNvMs0_NtCsdJXOEzRi98w_5hedge3fmtNtB5_14FixIndentation3new:
   66|    932|    fn new() -> Self {
   67|    932|        Self { indentation: 0 }
   68|    932|    }
_RNvXs_NtCsdJXOEzRi98w_5hedge3fmtNtB4_14FormatCommentsNtNtNtB6_6syntax8rewriter14SyntaxRewriter13rewrite_token:
   35|  96.7k|    fn rewrite_token(&self, token: SyntaxToken) -> SyntaxToken {
   36|  96.7k|        token
   37|  96.7k|            .with_leading_trivia(|trivia| {
   38|       |                let new_pieces = trivia.pieces.iter().cloned().map(|piece| {
   39|       |                    if let TriviaPiece::Comment(text) = piece {
   40|       |                        TriviaPiece::Comment(text.trim().to_string())
   41|       |                    } else {
   42|       |                        piece
   43|       |                    }
   44|       |                });
   45|       |                Trivia::new(new_pieces)
   46|  96.7k|            })
   47|  96.7k|            .with_trailing_trivia(|trivia| {
   48|       |                if let Some(TriviaPiece::Comment(text)) = trivia.pieces.last() {
   49|       |                    Trivia::new([
   50|       |                        TriviaPiece::Space(1),
   51|       |                        TriviaPiece::Comment(text.trim().to_string()),
   52|       |                    ])
   53|       |                } else {
   54|       |                    trivia.clone()
   55|       |                }
   56|  96.7k|            })
   57|  96.7k|    }
_RNvMs0_NtCsdJXOEzRi98w_5hedge3fmtNtB5_14FixIndentation6indent:
   70|     50|    fn indent(mut self) -> Self {
   71|     50|        self.indentation += INDENT_AMOUNT;
   72|     50|        self
   73|     50|    }
_RNvXs2_NtCsdJXOEzRi98w_5hedge3fmtNtB5_9FixBracesNtNtNtB7_6syntax8rewriter14SyntaxRewriter13rewrite_token:
  113|  96.7k|    fn rewrite_token(&self, token: SyntaxToken) -> SyntaxToken {
  114|  96.7k|        let next_token = token.next_token();
  115|  96.7k|        if next_token.is_some_and(|next| next.kind() == Token!['{'])
  116|  3.47k|            && !token.trailing_trivia().contains_comment()
  117|       |        {
  118|  3.47k|            token.set_trailing_trivia(Trivia::spaces(1))
  119|  93.3k|        } else if token.kind() == Token!['{'] && token.leading_trivia().contains_newline() {
  120|     37|            if token.leading_trivia().contains_comment()
  121|     35|                || token
  122|     35|                    .prev_token()
  123|     35|                    .is_some_and(|prev| prev.trailing_trivia().contains_comment())
  124|       |            {
  125|      6|                token.with_leading_trivia(|trivia| {
  126|       |                    let mut new_pieces = trivia.pieces.clone();
  127|       |                    if let Some(TriviaPiece::Newline(count)) = new_pieces.first_mut() {
  128|       |                        *count = 1;
  129|       |                    }
  130|       |                    if let Some(TriviaPiece::Newline(count)) = new_pieces.last_mut() {
  131|       |                        *count = 1;
  132|       |                    }
  133|       |                    Trivia::new(new_pieces)
  134|      6|                })
  135|       |            } else {
  136|     31|                token.set_leading_trivia(Trivia::empty())
  137|       |            }
  138|       |        } else {
  139|  93.2k|            token
  140|       |        }
  141|  96.7k|    }
_RNvXNtCsdJXOEzRi98w_5hedge3fmtNtB2_12TabsToSpacesNtNtNtB4_6syntax8rewriter14SyntaxRewriter13rewrite_token:
   13|  96.7k|    fn rewrite_token(&self, token: SyntaxToken) -> SyntaxToken {
   14|  96.7k|        token
   15|  96.7k|            .with_leading_trivia(tabs_to_spaces)
   16|  96.7k|            .with_trailing_trivia(tabs_to_spaces)
   17|  96.7k|    }
_RNvXs3_NtCsdJXOEzRi98w_5hedge3fmtNtB5_20RemoveTrailingSpacesNtNtNtB7_6syntax8rewriter14SyntaxRewriter13rewrite_token:
  148|  96.7k|    fn rewrite_token(&self, token: SyntaxToken) -> SyntaxToken {
  149|  96.7k|        let next_token = token.next_token();
  150|  96.7k|        if next_token
  151|  96.7k|            .as_ref()
  152|  96.7k|            .is_some_and(|next| next.leading_trivia().contains_newline())
  153|  90.8k|            || next_token.is_some_and(|next| next.kind() == TokenKind::Eof)
  154|       |        {
  155|  6.58k|            token.with_trailing_trivia(|trivia| trivia.without_trailing_spaces())
  156|       |        } else {
  157|  90.1k|            token
  158|       |        }
  159|  96.7k|        .with_leading_trivia(|trivia| {
  160|       |            // remove lines with only spaces
  161|       |            let new_pieces = trivia
  162|       |                .pieces
  163|       |                .iter()
  164|       |                .zip(trivia.pieces.iter().skip(1))
  165|       |                .filter(|(piece, next)| !(piece.is_space() && next.is_newline()))
  166|       |                .map(|(piece, _)| piece)
  167|       |                .chain(trivia.pieces.last())
  168|       |                .cloned();
  169|       |            Trivia::new(new_pieces)
  170|  96.7k|        })
  171|  96.7k|    }
_RNvNtCsdJXOEzRi98w_5hedge3fmt14tabs_to_spaces:
   20|   193k|fn tabs_to_spaces(trivia: &Trivia) -> Trivia {
   21|   193k|    let new_pieces = trivia.pieces.iter().cloned().map(|piece| {
   22|       |        if let TriviaPiece::Tab(count) = piece {
   23|       |            TriviaPiece::Space(count * INDENT_AMOUNT)
   24|       |        } else {
   25|       |            piece
   26|       |        }
   27|   193k|    });
   28|   193k|    Trivia::new(new_pieces)
   29|   193k|}
_RNvXs1_NtCsdJXOEzRi98w_5hedge3fmtNtB5_14FixIndentationNtNtNtB7_6syntax8rewriter14SyntaxRewriter12rewrite_node:
   77|  97.9k|    fn rewrite_node(self, node: SyntaxNode) -> (Self, SyntaxNode) {
   78|  97.9k|        if node.kind() == TreeKind::BlockExpr {
   79|     50|            (self.indent(), node)
   80|       |        } else {
   81|  97.8k|            (self, node)
   82|       |        }
   83|  97.9k|    }
_RNvXs1_NtCsdJXOEzRi98w_5hedge3fmtNtB5_14FixIndentationNtNtNtB7_6syntax8rewriter14SyntaxRewriter13rewrite_token:
   85|  96.7k|    fn rewrite_token(&self, token: SyntaxToken) -> SyntaxToken {
   86|  96.7k|        if token.prev_token().is_none() || token.leading_trivia().contains_newline() {
   87|       |            // TODO: feels a bit hacky subtracting from the braces
   88|  7.01k|            let indentation = if token.kind() == Token!['{'] {
   89|    149|                self.indentation.saturating_sub(INDENT_AMOUNT)
   90|       |            } else {
   91|  6.87k|                self.indentation
   92|       |            };
   93|  7.01k|            let final_indentation = if token.kind() == Token!['{'] || token.kind() == Token!['}'] {
   94|    217|                self.indentation.saturating_sub(INDENT_AMOUNT)
   95|       |            } else {
   96|  6.80k|                self.indentation
   97|       |            };
   98|  7.01k|            token.with_leading_trivia(|trivia| {
   99|       |                trivia
  100|       |                    .with_indent(indentation)
  101|       |                    .with_final_indent(final_indentation)
  102|  7.01k|            })
  103|       |        } else {
  104|  89.7k|            token
  105|       |        }
  106|  96.7k|    }
_RNvXs4_NtCsdJXOEzRi98w_5hedge3fmtNtB5_13DedupNewlinesNtNtNtB7_6syntax8rewriter14SyntaxRewriter13rewrite_token:
  178|  96.7k|    fn rewrite_token(&self, token: SyntaxToken) -> SyntaxToken {
  179|  96.7k|        token.with_leading_trivia(|trivia| {
  180|       |            let new_pieces = trivia.pieces.iter().cloned().map(|piece| {
  181|       |                if let TriviaPiece::Newline(count) = piece {
  182|       |                    let max_newlines = if token.kind() == Token!['}'] { 1 } else { 2 };
  183|       |                    TriviaPiece::Newline(count.min(max_newlines))
  184|       |                } else {
  185|       |                    piece
  186|       |                }
  187|       |            });
  188|       |            Trivia::new(new_pieces)
  189|  96.7k|        })
  190|  96.7k|    }
_RNvNtCsdJXOEzRi98w_5hedge3fmt11source_file:
  193|    932|pub fn source_file(source_file: ast::SourceFileU) -> ast::SourceFileU {
  194|    932|    let new_syntax = source_file
  195|    932|        .syntax()
  196|    932|        .clone()
  197|    932|        .rewrite(TabsToSpaces)
  198|    932|        .rewrite(FormatComments)
  199|    932|        .rewrite(FixIndentation::new())
  200|    932|        .rewrite(FixBraces)
  201|    932|        .rewrite(RemoveTrailingSpaces)
  202|    932|        .rewrite(DedupNewlines);
  203|    932|    ast::SourceFile::cast(new_syntax).expect("should return back the top level node")
  204|    932|}
_RNCNvNtCsdJXOEzRi98w_5hedge3fmt14tabs_to_spaces0B5_:
   21|  11.8k|    let new_pieces = trivia.pieces.iter().cloned().map(|piece| {
   22|  11.8k|        if let TriviaPiece::Tab(count) = piece {
   23|  1.17k|            TriviaPiece::Space(count * INDENT_AMOUNT)
   24|       |        } else {
   25|  10.6k|            piece
   26|       |        }
   27|  11.8k|    });
_RNCNvXs4_NtCsdJXOEzRi98w_5hedge3fmtNtB7_13DedupNewlinesNtNtNtB9_6syntax8rewriter14SyntaxRewriter13rewrite_token0B9_:
  179|  96.7k|        token.with_leading_trivia(|trivia| {
  180|  96.7k|            let new_pieces = trivia.pieces.iter().cloned().map(|piece| {
  181|       |                if let TriviaPiece::Newline(count) = piece {
  182|       |                    let max_newlines = if token.kind() == Token!['}'] { 1 } else { 2 };
  183|       |                    TriviaPiece::Newline(count.min(max_newlines))
  184|       |                } else {
  185|       |                    piece
  186|       |                }
  187|  96.7k|            });
  188|  96.7k|            Trivia::new(new_pieces)
  189|  96.7k|        })
_RNCNvXs2_NtCsdJXOEzRi98w_5hedge3fmtNtB7_9FixBracesNtNtNtB9_6syntax8rewriter14SyntaxRewriter13rewrite_tokens_0B9_:
  123|     35|                    .is_some_and(|prev| prev.trailing_trivia().contains_comment())
_RNCNvXs3_NtCsdJXOEzRi98w_5hedge3fmtNtB7_20RemoveTrailingSpacesNtNtNtB9_6syntax8rewriter14SyntaxRewriter13rewrite_tokens0_0B9_:
  155|  6.58k|            token.with_trailing_trivia(|trivia| trivia.without_trailing_spaces())
_RNCNCNvXs3_NtCsdJXOEzRi98w_5hedge3fmtNtB9_20RemoveTrailingSpacesNtNtNtBb_6syntax8rewriter14SyntaxRewriter13rewrite_tokens1_0s_0Bb_:
  166|    904|                .map(|(piece, _)| piece)
_RNCNCNvXs_NtCsdJXOEzRi98w_5hedge3fmtNtB8_14FormatCommentsNtNtNtBa_6syntax8rewriter14SyntaxRewriter13rewrite_token00Ba_:
   38|  7.59k|                let new_pieces = trivia.pieces.iter().cloned().map(|piece| {
   39|  7.59k|                    if let TriviaPiece::Comment(text) = piece {
   40|    468|                        TriviaPiece::Comment(text.trim().to_string())
   41|       |                    } else {
   42|  7.12k|                        piece
   43|       |                    }
   44|  7.59k|                });
_RNCNvXs3_NtCsdJXOEzRi98w_5hedge3fmtNtB7_20RemoveTrailingSpacesNtNtNtB9_6syntax8rewriter14SyntaxRewriter13rewrite_tokens1_0B9_:
  159|  96.7k|        .with_leading_trivia(|trivia| {
  160|  96.7k|            // remove lines with only spaces
  161|  96.7k|            let new_pieces = trivia
  162|  96.7k|                .pieces
  163|  96.7k|                .iter()
  164|  96.7k|                .zip(trivia.pieces.iter().skip(1))
  165|  96.7k|                .filter(|(piece, next)| !(piece.is_space() && next.is_newline()))
  166|  96.7k|                .map(|(piece, _)| piece)
  167|  96.7k|                .chain(trivia.pieces.last())
  168|  96.7k|                .cloned();
  169|  96.7k|            Trivia::new(new_pieces)
  170|  96.7k|        })
_RNCNCNvXs4_NtCsdJXOEzRi98w_5hedge3fmtNtB9_13DedupNewlinesNtNtNtBb_6syntax8rewriter14SyntaxRewriter13rewrite_token00Bb_:
  180|  7.24k|            let new_pieces = trivia.pieces.iter().cloned().map(|piece| {
  181|  7.24k|                if let TriviaPiece::Newline(count) = piece {
  182|  6.76k|                    let max_newlines = if token.kind() == Token!['}'] { 1 } else { 2 };
  183|  6.76k|                    TriviaPiece::Newline(count.min(max_newlines))
  184|       |                } else {
  185|    482|                    piece
  186|       |                }
  187|  7.24k|            });
_RNCNCNvXs3_NtCsdJXOEzRi98w_5hedge3fmtNtB9_20RemoveTrailingSpacesNtNtNtBb_6syntax8rewriter14SyntaxRewriter13rewrite_tokens1_00Bb_:
  165|    904|                .filter(|(piece, next)| !(piece.is_space() && next.is_newline()))
_RNCNvXs_NtCsdJXOEzRi98w_5hedge3fmtNtB6_14FormatCommentsNtNtNtB8_6syntax8rewriter14SyntaxRewriter13rewrite_token0B8_:
   37|  96.7k|            .with_leading_trivia(|trivia| {
   38|  96.7k|                let new_pieces = trivia.pieces.iter().cloned().map(|piece| {
   39|       |                    if let TriviaPiece::Comment(text) = piece {
   40|       |                        TriviaPiece::Comment(text.trim().to_string())
   41|       |                    } else {
   42|       |                        piece
   43|       |                    }
   44|  96.7k|                });
   45|  96.7k|                Trivia::new(new_pieces)
   46|  96.7k|            })
_RNCNvXs3_NtCsdJXOEzRi98w_5hedge3fmtNtB7_20RemoveTrailingSpacesNtNtNtB9_6syntax8rewriter14SyntaxRewriter13rewrite_token0B9_:
  152|  95.7k|            .is_some_and(|next| next.leading_trivia().contains_newline())
_RNCNvXs2_NtCsdJXOEzRi98w_5hedge3fmtNtB7_9FixBracesNtNtNtB9_6syntax8rewriter14SyntaxRewriter13rewrite_token0B9_:
  115|  95.7k|        if next_token.is_some_and(|next| next.kind() == Token!['{'])
_RNCNvXs3_NtCsdJXOEzRi98w_5hedge3fmtNtB7_20RemoveTrailingSpacesNtNtNtB9_6syntax8rewriter14SyntaxRewriter13rewrite_tokens_0B9_:
  153|  89.7k|            || next_token.is_some_and(|next| next.kind() == TokenKind::Eof)
_RNCNvXs_NtCsdJXOEzRi98w_5hedge3fmtNtB6_14FormatCommentsNtNtNtB8_6syntax8rewriter14SyntaxRewriter13rewrite_tokens_0B8_:
   47|  96.7k|            .with_trailing_trivia(|trivia| {
   48|  96.7k|                if let Some(TriviaPiece::Comment(text)) = trivia.pieces.last() {
   49|    432|                    Trivia::new([
   50|    432|                        TriviaPiece::Space(1),
   51|    432|                        TriviaPiece::Comment(text.trim().to_string()),
   52|    432|                    ])
   53|       |                } else {
   54|  96.3k|                    trivia.clone()
   55|       |                }
   56|  96.7k|            })
_RNCNvXs1_NtCsdJXOEzRi98w_5hedge3fmtNtB7_14FixIndentationNtNtNtB9_6syntax8rewriter14SyntaxRewriter13rewrite_token0B9_:
   98|  7.01k|            token.with_leading_trivia(|trivia| {
   99|  7.01k|                trivia
  100|  7.01k|                    .with_indent(indentation)
  101|  7.01k|                    .with_final_indent(final_indentation)
  102|  7.01k|            })
_RNCNvXs2_NtCsdJXOEzRi98w_5hedge3fmtNtB7_9FixBracesNtNtNtB9_6syntax8rewriter14SyntaxRewriter13rewrite_tokens0_0B9_:
  125|      6|                token.with_leading_trivia(|trivia| {
  126|      6|                    let mut new_pieces = trivia.pieces.clone();
  127|      6|                    if let Some(TriviaPiece::Newline(count)) = new_pieces.first_mut() {
  128|      6|                        *count = 1;
  129|      6|                    }
  130|      6|                    if let Some(TriviaPiece::Newline(count)) = new_pieces.last_mut() {
  131|      6|                        *count = 1;
  132|      6|                    }
  133|      6|                    Trivia::new(new_pieces)
  134|      6|                })

_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer4peek:
  141|   129k|    fn peek(&mut self) -> Option<char> {
  142|   129k|        self.chars.peek().copied()
  143|   129k|    }
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer6number:
  107|    767|    fn number(&mut self) -> RawToken {
  108|    767|        self.eat_while(is_digit);
  109|    767|        self.make_token(TokenKind::Int)
  110|    767|    }
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer9peek_next:
  145|  1.41k|    fn peek_next(&mut self) -> Option<char> {
  146|  1.41k|        self.chars.peek_nth(1).copied()
  147|  1.41k|    }
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer5ident:
  112|  2.53k|    fn ident(&mut self) -> RawToken {
  113|  2.53k|        self.eat_while(|char| is_alpha(char) || is_digit(char));
  114|  2.53k|
  115|  2.53k|        let kind = self.ident_kind();
  116|  2.53k|        self.make_token(kind)
  117|  2.53k|    }
_RNvNtCsdJXOEzRi98w_5hedge5lexer8is_digit:
  233|  42.7k|fn is_digit(char: char) -> bool {
  234|  42.7k|    char.is_ascii_digit()
  235|  42.7k|}
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer3new:
   22|    466|    pub fn new(input: &'input str) -> Self {
   23|    466|        Self {
   24|    466|            input,
   25|    466|            chars: itertools::peek_nth(input.chars()),
   26|    466|            leading_trivia: Trivia::empty(),
   27|    466|            start: 0,
   28|    466|            current: 0,
   29|    466|            errors: Vec::new(),
   30|    466|        }
   31|    466|    }
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer10all_tokens:
   34|    466|    pub fn all_tokens(mut self) -> (Vec<RawToken>, Vec<SyntaxError>) {
   35|    466|        let mut tokens = Vec::new();
   36|       |
   37|  48.3k|        loop {
   38|  48.3k|            let token = self.next_token();
   39|  48.3k|            let token_kind = token.kind();
   40|  48.3k|            tokens.push(token);
   41|  48.3k|
   42|  48.3k|            if token_kind == TokenKind::Eof {
   43|    466|                break;
   44|  47.9k|            }
   45|       |        }
   46|       |
   47|    466|        (tokens, self.errors)
   48|    466|    }
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer10ident_kind:
  119|  2.53k|    fn ident_kind(&self) -> TokenKind {
  120|  2.53k|        let ident = self.current_text();
  121|  2.53k|        match ident {
  122|  2.53k|            "fn" => Token![fn],
  123|  2.48k|            "let" => Token![let],
  124|  2.38k|            "return" => Token![return],
  125|  2.37k|            "true" => Token![true],
  126|  2.36k|            "false" => Token![false],
  127|  2.36k|            "if" => Token![if],
  128|  2.27k|            "else" => Token![else],
  129|  2.26k|            "match" => Token![match],
  130|  2.25k|            "for" => Token![for],
  131|  2.24k|            "in" => Token![in],
  132|  2.24k|            "while" => Token![while],
  133|  2.24k|            _ => TokenKind::Ident,
  134|       |        }
  135|  2.53k|    }
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer12current_text:
  137|  51.3k|    fn current_text(&self) -> &str {
  138|  51.3k|        &self.input[self.start..self.current]
  139|  51.3k|    }
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer10make_token:
  165|  48.3k|    fn make_token(&mut self, kind: TokenKind) -> RawToken {
  166|  48.3k|        let leading_trivia = mem::take(&mut self.leading_trivia);
  167|  48.3k|
  168|  48.3k|        let text = self.current_text().to_string();
  169|  48.3k|        self.start = self.current;
  170|  48.3k|
  171|  48.3k|        let trailing_trivia = self.trailing_trivia();
  172|  48.3k|        RawToken::new(leading_trivia, kind, text, trailing_trivia)
  173|  48.3k|    }
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer14leading_trivia:
  175|  48.3k|    fn leading_trivia(&mut self) {
  176|  55.8k|        while let Some(char) = self.peek() {
  177|  55.3k|            let Some(new_piece) = self.trivia_piece(char) else {
  178|  47.9k|                break;
  179|       |            };
  180|  7.43k|            self.leading_trivia.push(new_piece);
  181|       |        }
  182|  48.3k|    }
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer15trailing_trivia:
  184|  48.3k|    fn trailing_trivia(&mut self) -> Trivia {
  185|  48.3k|        let mut trailing = Trivia::empty();
  186|       |
  187|  52.9k|        while let Some(char) = self.peek()
  188|  52.1k|            && char != '\n'
  189|  4.52k|        {
  190|  49.1k|            let Some(new_piece) = self.trivia_piece(char) else {
  191|  44.5k|                break;
  192|       |            };
  193|  4.52k|            trailing.push(new_piece);
  194|       |        }
  195|       |
  196|  48.3k|        trailing
  197|  48.3k|    }
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer7advance:
  149|  74.9k|    fn advance(&mut self) -> Option<char> {
  150|  74.9k|        let char = self.chars.next()?;
  151|  74.4k|        self.current += char.len_utf8();
  152|  74.4k|        Some(char)
  153|  74.9k|    }
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer12trivia_piece:
  199|   104k|    fn trivia_piece(&mut self, char: char) -> Option<TriviaPiece> {
  200|  11.9k|        let trivia_piece = match char {
  201|  1.41k|            '/' if self.peek_next() == Some('/') => {
  202|    450|                self.eat_while(|char| char != '\n');
  203|    450|                TriviaPiece::Comment(self.current_text().to_string())
  204|       |            }
  205|       |            '\n' => {
  206|  6.12k|                self.advance();
  207|  6.12k|                TriviaPiece::Newline(1)
  208|       |            }
  209|       |            '\t' => {
  210|  4.27k|                self.advance();
  211|  4.27k|                TriviaPiece::Tab(1)
  212|       |            }
  213|       |            ' ' => {
  214|  1.11k|                self.advance();
  215|  1.11k|                TriviaPiece::Space(1)
  216|       |            }
  217|  92.5k|            _ => return None,
  218|       |        };
  219|       |
  220|  11.9k|        self.start = self.current;
  221|  11.9k|        Some(trivia_piece)
  222|   104k|    }
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer7matches:
  155|  5.32k|    fn matches(&mut self, expected: char) -> bool {
  156|  5.32k|        let match_found = self.peek().is_some_and(|char| char == expected);
  157|  5.32k|        if match_found {
  158|  2.57k|            self.chars.next();
  159|  2.57k|            self.current += expected.len_utf8();
  160|  2.75k|        }
  161|       |
  162|  5.32k|        match_found
  163|  5.32k|    }
_RNvNtCsdJXOEzRi98w_5hedge5lexer8is_alpha:
  237|  44.4k|fn is_alpha(char: char) -> bool {
  238|  44.4k|    char.is_alphabetic() || char == '_'
  239|  44.4k|}
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer10next_token:
   51|  48.3k|    fn next_token(&mut self) -> RawToken {
   52|  48.3k|        self.leading_trivia();
   53|  48.3k|
   54|  48.3k|        self.start = self.current;
   55|       |
   56|  48.3k|        let Some(next_char) = self.advance() else {
   57|    466|            return self.make_token(TokenKind::Eof);
   58|       |        };
   59|       |
   60|  2.02k|        match next_char {
   61|    376|            '(' => self.make_token(Token!['(']),
   62|    393|            ')' => self.make_token(Token![')']),
   63|  1.76k|            '{' => self.make_token(Token!['{']),
   64|    470|            '}' => self.make_token(Token!['}']),
   65|    292|            ',' => self.make_token(Token![,]),
   66|    158|            ':' => self.make_token(Token![:]),
   67|    421|            ';' => self.make_token(Token![;]),
   68|    152|            '+' => self.make_token(Token![+]),
   69|    513|            '/' => self.make_token(Token![/]),
   70|    786|            '*' => self.make_token(Token![*]),
   71|    255|            '|' => self.make_token(Token![|]),
   72|    667|            '.' if self.matches('.') => self.make_token(Token![..]),
   73|    283|            '.' => self.make_token(Token![.]),
   74|    403|            '-' if self.matches('>') => self.make_token(Token![->]),
   75|    403|            '-' => self.make_token(Token![-]),
   76|    539|            '!' if self.matches('=') => self.make_token(Token![!=]),
   77|    538|            '!' => self.make_token(Token![!]),
   78|  2.48k|            '=' if self.matches('=') => self.make_token(Token![==]),
   79|    417|            '=' if self.matches('>') => self.make_token(Token![=>]),
   80|    417|            '=' => self.make_token(Token![=]),
   81|    103|            '>' if self.matches('=') => self.make_token(Token![>=]),
   82|    101|            '>' => self.make_token(Token![>]),
   83|    710|            '<' if self.matches('=') => self.make_token(Token![<=]),
   84|    591|            '<' => self.make_token(Token![<]),
   85|    112|            '"' => self.string(),
   86|  37.3k|            char if is_digit(char) => self.number(),
   87|  36.5k|            char if is_alpha(char) => self.ident(),
   88|  34.0k|            _ => self.make_token(TokenKind::Unknown),
   89|       |        }
   90|  48.3k|    }
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer9eat_while:
  224|  3.75k|    fn eat_while(&mut self, predicate: fn(char) -> bool) {
  225|  15.8k|        while let Some(char) = self.peek()
  226|  15.8k|            && predicate(char)
  227|  12.1k|        {
  228|  12.1k|            self.advance();
  229|  12.1k|        }
  230|  3.75k|    }
_RNvMNtCsdJXOEzRi98w_5hedge5lexerNtB2_5Lexer6string:
   92|    112|    fn string(&mut self) -> RawToken {
   93|  2.90k|        while let Some(char) = self.advance() {
   94|  2.87k|            if char == '"' {
   95|     86|                return self.make_token(TokenKind::String);
   96|  2.79k|            }
   97|       |        }
   98|       |
   99|     26|        let span = Span {
  100|     26|            start: self.start,
  101|     26|            end: self.current - 1,
  102|     26|        };
  103|     26|        self.errors.push(SyntaxError::UnterminatedString { span });
  104|     26|        self.make_token(TokenKind::String)
  105|    112|    }
_RNCNvMNtCsdJXOEzRi98w_5hedge5lexerNtB4_5Lexer12trivia_piece0B6_:
  202|  5.65k|                self.eat_while(|char| char != '\n');
_RNCNvMNtCsdJXOEzRi98w_5hedge5lexerNtB4_5Lexer7matches0B6_:
  156|  5.30k|        let match_found = self.peek().is_some_and(|char| char == expected);
_RNCNvMNtCsdJXOEzRi98w_5hedge5lexerNtB4_5Lexer5ident0B6_:
  113|  7.90k|        self.eat_while(|char| is_alpha(char) || is_digit(char));

_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser4open:
  491|  48.9k|    fn open(&mut self) -> MarkOpened {
  492|  48.9k|        let mark = MarkOpened::new(self.events.len());
  493|  48.9k|        self.events.push(Event::Open {
  494|  48.9k|            kind: TreeKind::Unknown,
  495|  48.9k|        });
  496|  48.9k|        mark
  497|  48.9k|    }
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser6expect:
  571|    625|    fn expect(&mut self, kind: TokenKind) {
  572|    625|        if self.eat(kind) {
  573|    553|            return;
  574|     72|        }
  575|     72|
  576|     72|        let current = &self.tokens[self.pos];
  577|     72|        self.error(SyntaxError::UnexpectedToken {
  578|     72|            expected: kind,
  579|     72|            found: (
  580|     72|                current.kind(),
  581|     72|                Span {
  582|     72|                    start: self.offset,
  583|     72|                    end: self.offset + current.text_len(),
  584|     72|                },
  585|     72|            ),
  586|     72|        });
  587|    625|    }
_RNvNtCsdJXOEzRi98w_5hedge6parser17parse_source_file:
   13|    466|pub fn parse_source_file(input: &str) -> (ast::SourceFileU, Vec<SyntaxError>) {
   14|    466|    let (tokens, mut errors) = Lexer::new(input).all_tokens();
   15|    466|    let (raw_tree, parser_errors) = Parser::new(tokens).parse_source_file();
   16|    466|    errors.extend(parser_errors);
   17|    466|    let syntax_tree = SyntaxNode::root(raw_tree);
   18|    466|
   19|    466|    (
   20|    466|        ast::SourceFile::cast(syntax_tree).expect("root of syntax tree should be a source file"),
   21|    466|        errors,
   22|    466|    )
   23|    466|}
_RNvNvNtCsdJXOEzRi98w_5hedge6parser19right_binds_tighter9tightness:
  300|     29|    fn tightness(kind: TokenKind) -> Option<usize> {
  301|     29|        [
  302|     29|            // Precedence table:
  303|     29|            Token![=],
  304|     29|            Token![+],
  305|     29|            Token![-],
  306|     29|            Token![*],
  307|     29|            Token![/],
  308|     29|        ]
  309|     29|        .iter()
  310|     29|        .position(|level| level == &kind)
  311|     29|    }
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser11open_before:
  505|      5|    fn open_before(&mut self, closed: MarkClosed) -> MarkOpened {
  506|      5|        let opened = MarkOpened::new(closed.index);
  507|      5|        self.events.insert(
  508|      5|            closed.index,
  509|      5|            Event::Open {
  510|      5|                kind: TreeKind::Unknown,
  511|      5|            },
  512|      5|        );
  513|      5|        opened
  514|      5|    }
_RNvMNtCsdJXOEzRi98w_5hedge6parserNtB2_11ParamFlavor7l_delim:
   95|      7|    fn l_delim(self) -> TokenKind {
   96|      7|        match self {
   97|      7|            Self::Function => Token!['('],
   98|      0|            Self::Lambda => Token![|],
   99|       |        }
  100|      7|    }
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser5is_at:
  550|   145k|    fn is_at(&self, kind: TokenKind) -> bool {
  551|   145k|        self.nth(0) == kind
  552|   145k|    }
_RNvMs0_NtCsdJXOEzRi98w_5hedge6parserNtB5_10MarkOpened3new:
  664|  48.9k|    fn new(index: usize) -> Self {
  665|  48.9k|        Self { index }
  666|  48.9k|    }
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser12close_before:
  516|     24|    fn close_before(
  517|     24|        &mut self,
  518|     24|        before: MarkOpened,
  519|     24|        kind: TreeKind,
  520|     24|        after: MarkClosed,
  521|     24|    ) -> MarkClosed {
  522|     24|        self.events[before.index] = Event::Open { kind };
  523|     24|        self.events.insert(after.index, Event::Close);
  524|     24|        MarkClosed::new(before.index)
  525|     24|    }
_RNvNtCsdJXOEzRi98w_5hedge6parser4expr:
  262|     29|fn expr(p: &mut Parser) -> Option<MarkClosed> {
  263|     29|    // TODO: revisit this and table, seems odd to pass eof
  264|     29|    // We don't have a token to the left yet, so the right should always bind tighter
  265|     29|    rec_expr(p, TokenKind::Eof)
  266|     29|}
_RNvNtCsdJXOEzRi98w_5hedge6parser12literal_expr:
  344|      1|fn literal_expr(p: &mut Parser) -> MarkClosed {
  345|      1|    assert!(p.is_at_any(&[TokenKind::Int, Token![true], Token![false]]));
  346|       |
  347|      1|    p.scope(TreeKind::LiteralExpr, |p| {
  348|       |        p.advance();
  349|      1|    })
  350|      1|}
_RNvNtCsdJXOEzRi98w_5hedge6parser8function:
   68|     45|fn function(p: &mut Parser) {
   69|     45|    assert!(p.is_at(Token![fn]));
   70|       |
   71|     45|    p.scope(TreeKind::Function, |p| {
   72|       |        p.expect(Token![fn]);
   73|       |        p.expect(TokenKind::Ident);
   74|       |        if p.is_at(Token!['(']) {
   75|       |            params(p, ParamFlavor::Function);
   76|       |        }
   77|       |        if p.is_at(Token![->]) {
   78|       |            ret_type_expr(p);
   79|       |        } else {
   80|       |            p.empty();
   81|       |        }
   82|       |        if p.is_at(Token!['{']) {
   83|       |            block_expr(p);
   84|       |        }
   85|     45|    });
   86|     45|}
_RNvNtCsdJXOEzRi98w_5hedge6parser6params:
  112|      7|fn params(p: &mut Parser, flavor: ParamFlavor) {
  113|      7|    let (l_delim, r_delim) = (flavor.l_delim(), flavor.r_delim());
  114|      7|    assert!(p.is_at(l_delim));
  115|       |
  116|      7|    p.scope(TreeKind::Params, |p| {
  117|       |        p.expect(l_delim);
  118|       |        param_list(p, r_delim, flavor);
  119|       |        p.expect(r_delim);
  120|      7|    });
  121|      7|}
_RNvNtCsdJXOEzRi98w_5hedge6parser11source_file:
   49|    466|fn source_file(p: &mut Parser) {
   50|    466|    p.scope(TreeKind::SourceFile, |p| {
   51|       |        item_list(p);
   52|       |        p.expect(TokenKind::Eof);
   53|    466|    });
   54|    466|}
_RNvNtCsdJXOEzRi98w_5hedge6parser10block_expr:
  192|     25|fn block_expr(p: &mut Parser) -> MarkClosed {
  193|     25|    assert!(p.is_at(Token!['{']));
  194|       |
  195|     25|    p.scope(TreeKind::BlockExpr, |p| {
  196|       |        p.expect(Token!['{']);
  197|       |        block(p);
  198|       |        p.expect(Token!['}']);
  199|     25|    })
  200|     25|}
_RNvNtCsdJXOEzRi98w_5hedge6parser19right_binds_tighter:
  299|     29|fn right_binds_tighter(left: TokenKind, right: TokenKind) -> bool {
  300|       |    fn tightness(kind: TokenKind) -> Option<usize> {
  301|       |        [
  302|       |            // Precedence table:
  303|       |            Token![=],
  304|       |            Token![+],
  305|       |            Token![-],
  306|       |            Token![*],
  307|       |            Token![/],
  308|       |        ]
  309|       |        .iter()
  310|       |        .position(|level| level == &kind)
  311|       |    }
  312|       |
  313|     29|    let Some(right_tightness) = tightness(right) else {
  314|     29|        return false;
  315|       |    };
  316|      0|    let Some(left_tightness) = tightness(left) else {
  317|       |        // We should only not have a left precedence when we start parsing an expression
  318|      0|        assert!(left == TokenKind::Eof);
  319|      0|        return true;
  320|       |    };
  321|       |
  322|      0|    right_tightness > left_tightness
  323|     29|}
_RNvNtCsdJXOEzRi98w_5hedge6parser14delimited_expr:
  326|     29|fn delimited_expr(p: &mut Parser) -> Option<MarkClosed> {
  327|     29|    let mark_closed = match p.nth(0) {
  328|      1|        TokenKind::Int | Token![true] | Token![false] => literal_expr(p),
  329|      4|        TokenKind::Ident => ident_expr(p),
  330|     24|        Token!['{'] => block_expr(p),
  331|      0|        Token!['('] => paren_expr(p),
  332|      0|        Token![if] => if_expr(p),
  333|      0|        Token![for] => for_expr(p),
  334|      0|        Token![|] => lambda_expr(p),
  335|       |        _ => {
  336|      0|            assert!(!p.is_at_any(EXPR_FIRST));
  337|      0|            return None;
  338|       |        }
  339|       |    };
  340|       |
  341|     29|    Some(mark_closed)
  342|     29|}
_RNvNtCsdJXOEzRi98w_5hedge6parser10ident_expr:
  352|      4|fn ident_expr(p: &mut Parser) -> MarkClosed {
  353|      4|    assert!(p.is_at(TokenKind::Ident));
  354|       |
  355|      4|    p.scope(TreeKind::IdentExpr, |p| {
  356|       |        p.advance();
  357|      4|    })
  358|      4|}
_RNvNtCsdJXOEzRi98w_5hedge6parser8rec_expr:
  269|     29|fn rec_expr(p: &mut Parser, left: TokenKind) -> Option<MarkClosed> {
  270|     29|    if !p.is_at_any(EXPR_FIRST) {
  271|       |        // TODO: p.err_recovery?
  272|      0|        p.advance_with_error("expected expression");
  273|      0|        return None;
  274|     29|    }
  275|       |
  276|     29|    let mut lhs = delimited_expr(p)?;
  277|       |
  278|     29|    while p.is_at(Token!['(']) {
  279|      0|        let mark = p.open_before(lhs);
  280|      0|        args(p);
  281|      0|        lhs = p.close(mark, TreeKind::CallExpr);
  282|      0|    }
  283|       |
  284|     29|    loop {
  285|     29|        let right = p.nth(0);
  286|     29|        if right_binds_tighter(left, right) {
  287|      0|            let mark = p.open_before(lhs);
  288|      0|            p.advance();
  289|      0|            // TODO: rhs none
  290|      0|            rec_expr(p, right);
  291|      0|            lhs = p.close(mark, TreeKind::BinaryExpr);
  292|      0|        } else {
  293|     29|            return Some(lhs);
  294|       |        }
  295|       |    }
  296|     29|}
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser17parse_source_file:
  479|    466|    pub fn parse_source_file(mut self) -> (RawNode, Vec<SyntaxError>) {
  480|    466|        source_file(&mut self);
  481|    466|        self.build_tree()
  482|    466|    }
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser5close:
  499|  48.9k|    fn close(&mut self, mark: MarkOpened, kind: TreeKind) -> MarkClosed {
  500|  48.9k|        self.events[mark.index] = Event::Open { kind };
  501|  48.9k|        self.events.push(Event::Close);
  502|  48.9k|        MarkClosed::new(mark.index)
  503|  48.9k|    }
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser7advance:
  527|  48.3k|    fn advance(&mut self) {
  528|  48.3k|        assert!(!self.is_out_of_tokens());
  529|  48.3k|        self.fuel.set(Self::MAX_FUEL);
  530|  48.3k|
  531|  48.3k|        self.events.push(Event::Advance);
  532|  48.3k|        self.offset += self.tokens[self.pos].total_len();
  533|  48.3k|        self.pos += 1;
  534|  48.3k|    }
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser3nth:
  536|   145k|    fn nth(&self, lookahead: usize) -> TokenKind {
  537|   145k|        let fuel = self.fuel.get();
  538|   145k|        assert!(fuel != 0, "parser is stuck");
  539|   145k|        self.fuel.set(fuel - 1);
  540|   145k|
  541|   145k|        self.tokens
  542|   145k|            .get(self.pos + lookahead)
  543|   145k|            .map_or(TokenKind::Eof, |it| it.kind())
  544|   145k|    }
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser16is_out_of_tokens:
  546|  48.3k|    fn is_out_of_tokens(&self) -> bool {
  547|  48.3k|        self.pos == self.tokens.len()
  548|  48.3k|    }
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser9is_at_eof:
  554|  96.2k|    fn is_at_eof(&self) -> bool {
  555|  96.2k|        self.is_at(TokenKind::Eof)
  556|  96.2k|    }
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser9is_at_any:
  558|    143|    fn is_at_any(&self, set: &[TokenKind]) -> bool {
  559|    143|        set.contains(&self.nth(0))
  560|    143|    }
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser3eat:
  562|    625|    fn eat(&mut self, kind: TokenKind) -> bool {
  563|    625|        if self.is_at(kind) {
  564|    553|            self.advance();
  565|    553|            true
  566|       |        } else {
  567|     72|            false
  568|       |        }
  569|    625|    }
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser18advance_with_error:
  589|  47.8k|    fn advance_with_error(&mut self, error: &str) {
  590|  47.8k|        let m = self.open();
  591|  47.8k|
  592|  47.8k|        let current = &self.tokens[self.pos];
  593|  47.8k|        self.error(SyntaxError::Generic {
  594|  47.8k|            message: error.to_string(),
  595|  47.8k|            span: Span {
  596|  47.8k|                start: self.offset,
  597|  47.8k|                end: self.offset + current.text_len(),
  598|  47.8k|            },
  599|  47.8k|        });
  600|  47.8k|        if !self.is_at_eof() {
  601|  47.8k|            self.advance();
  602|  47.8k|        }
  603|       |
  604|  47.8k|        self.close(m, TreeKind::Unknown);
  605|  47.8k|    }
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser5error:
  607|  47.9k|    fn error(&mut self, error: SyntaxError) {
  608|  47.9k|        self.events.push(Event::Error(error));
  609|  47.9k|    }
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser5empty:
  611|     45|    fn empty(&mut self) {
  612|     45|        self.scope(TreeKind::Empty, |_| {});
  613|     45|    }
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser10build_tree:
  615|    466|    fn build_tree(self) -> (RawNode, Vec<SyntaxError>) {
  616|    466|        let mut tokens = self.tokens.into_iter();
  617|    466|        let mut events = self.events;
  618|    466|        let mut stack = Vec::new();
  619|    466|
  620|    466|        let mut errors = Vec::new();
  621|    466|
  622|    466|        // Special case: pop the last `Close` event to ensure
  623|    466|        // that the stack is non-empty inside the loop.
  624|    466|        assert!(matches!(events.pop(), Some(Event::Close)));
  625|       |
  626|   194k|        for event in events {
  627|   193k|            match event {
  628|       |                // Starting a new node; just push an empty tree to the stack.
  629|  48.9k|                Event::Open { kind } => stack.push(RawNodeBuilder::new(kind)),
  630|       |                // A tree is done.
  631|       |                // Pop it off the stack and append to a new current tree.
  632|  48.4k|                Event::Close => {
  633|  48.4k|                    let tree = stack.pop().unwrap().build();
  634|  48.4k|                    stack
  635|  48.4k|                        .last_mut()
  636|  48.4k|                        // If we don't pop the last `Close` before this loop,
  637|  48.4k|                        // this unwrap would trigger for it.
  638|  48.4k|                        .unwrap()
  639|  48.4k|                        .add_child(NodeOrToken::Node(tree));
  640|  48.4k|                }
  641|       |                // Consume a token and append it to the current tree
  642|  48.3k|                Event::Advance => {
  643|  48.3k|                    let token = tokens.next().unwrap();
  644|  48.3k|                    stack
  645|  48.3k|                        .last_mut()
  646|  48.3k|                        .unwrap()
  647|  48.3k|                        .add_child(NodeOrToken::Token(token));
  648|  48.3k|                }
  649|       |                // An error occurred, record it and continue
  650|  47.9k|                Event::Error(error) => errors.push(error),
  651|       |            }
  652|       |        }
  653|       |
  654|       |        // Our parser will guarantee that all the trees are closed
  655|       |        // and cover the entirety of tokens.
  656|    466|        assert!(stack.len() == 1);
  657|    466|        assert!(tokens.next().is_none());
  658|       |
  659|    466|        (stack.pop().unwrap().build(), errors)
  660|    466|    }
_RNvMs1_NtCsdJXOEzRi98w_5hedge6parserNtB5_10MarkClosed3new:
  670|  48.9k|    fn new(index: usize) -> Self {
  671|  48.9k|        Self { index }
  672|  48.9k|    }
_RNvNtCsdJXOEzRi98w_5hedge6parser10param_list:
  123|      7|fn param_list(p: &mut Parser, r_delim: TokenKind, flavor: ParamFlavor) {
  124|      7|    p.scope(TreeKind::ParamList, |p| {
  125|       |        while !p.is_at(r_delim) && !p.is_at_eof() {
  126|       |            if p.is_at(TokenKind::Ident) {
  127|       |                param(p, flavor);
  128|       |            } else {
  129|       |                if p.is_at_any(PARAM_LIST_RECOVERY) {
  130|       |                    break;
  131|       |                }
  132|       |                p.advance_with_error("expected parameter");
  133|       |            }
  134|       |        }
  135|      7|    });
  136|      7|}
_RNvNtCsdJXOEzRi98w_5hedge6parser9item_list:
   56|    466|fn item_list(p: &mut Parser) {
   57|    466|    p.scope(TreeKind::ItemList, |p| {
   58|       |        while !p.is_at_eof() {
   59|       |            if p.is_at(Token![fn]) {
   60|       |                function(p);
   61|       |            } else {
   62|       |                p.advance_with_error("expected a function");
   63|       |            }
   64|       |        }
   65|    466|    });
   66|    466|}
_RNvMNtCsdJXOEzRi98w_5hedge6parserNtB2_11ParamFlavor7r_delim:
  102|      7|    fn r_delim(self) -> TokenKind {
  103|      7|        match self {
  104|      7|            Self::Function => Token![')'],
  105|      0|            Self::Lambda => Token![|],
  106|       |        }
  107|      7|    }
_RNvNtCsdJXOEzRi98w_5hedge6parser5block:
  202|     25|fn block(p: &mut Parser) {
  203|     25|    p.scope(TreeKind::Block, |p| {
  204|       |        let stmt_list_mark = p.open();
  205|       |
  206|       |        while !p.is_at(Token!['}']) && !p.is_at_eof() {
  207|       |            match p.nth(0) {
  208|       |                Token![let] => let_stmt(p),
  209|       |                Token![return] => return_stmt(p),
  210|       |                _ if p.is_at_any(EXPR_FIRST) => match expr(p) {
  211|       |                    Some(mark) => {
  212|       |                        if !p.is_at(Token!['}']) && !p.is_at_eof() {
  213|       |                            let stmt_expr_mark = p.open_before(mark);
  214|       |                            p.expect(Token![;]);
  215|       |                            p.close(stmt_expr_mark, TreeKind::ExprStmt);
  216|       |                        } else {
  217|       |                            p.close_before(stmt_list_mark, TreeKind::StmtList, mark);
  218|       |                            return;
  219|       |                        }
  220|       |                    }
  221|       |                    None => p.advance_with_error("expected an expression"),
  222|       |                },
  223|       |                _ => {
  224|       |                    if p.is_at_any(STMT_RECOVERY) {
  225|       |                        break;
  226|       |                    }
  227|       |                    p.advance_with_error("expected statement");
  228|       |                }
  229|       |            }
  230|       |        }
  231|       |
  232|       |        p.close(stmt_list_mark, TreeKind::StmtList);
  233|     25|    });
  234|     25|}
_RNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB4_6Parser3new:
  468|    466|    pub fn new(tokens: Vec<RawToken>) -> Self {
  469|    466|        Self {
  470|    466|            tokens,
  471|    466|            pos: 0,
  472|    466|            offset: 0,
  473|    466|            fuel: Cell::new(Self::MAX_FUEL),
  474|    466|            events: Vec::new(),
  475|    466|        }
  476|    466|    }
_RNCNvNtCsdJXOEzRi98w_5hedge6parser11source_file0B5_:
   50|    466|    p.scope(TreeKind::SourceFile, |p| {
   51|    466|        item_list(p);
   52|    466|        p.expect(TokenKind::Eof);
   53|    466|    });
_RINvMs_NtCsdJXOEzRi98w_5hedge6parserNtB5_6Parser5scopeNCNvB5_10param_list0EB7_:
  485|      7|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|      7|        let mark = self.open();
  487|      7|        body(self);
  488|      7|        self.close(mark, kind)
  489|      7|    }
_RNCNvNtCsdJXOEzRi98w_5hedge6parser10param_list0B5_:
  124|      7|    p.scope(TreeKind::ParamList, |p| {
  125|      7|        while !p.is_at(r_delim) && !p.is_at_eof() {
  126|      0|            if p.is_at(TokenKind::Ident) {
  127|      0|                param(p, flavor);
  128|      0|            } else {
  129|      0|                if p.is_at_any(PARAM_LIST_RECOVERY) {
  130|      0|                    break;
  131|      0|                }
  132|      0|                p.advance_with_error("expected parameter");
  133|       |            }
  134|       |        }
  135|      7|    });
_RINvMs_NtCsdJXOEzRi98w_5hedge6parserNtB5_6Parser5scopeNCNvB5_12literal_expr0EB7_:
  485|      1|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|      1|        let mark = self.open();
  487|      1|        body(self);
  488|      1|        self.close(mark, kind)
  489|      1|    }
_RNCNvNtCsdJXOEzRi98w_5hedge6parser8function0B5_:
   71|     45|    p.scope(TreeKind::Function, |p| {
   72|     45|        p.expect(Token![fn]);
   73|     45|        p.expect(TokenKind::Ident);
   74|     45|        if p.is_at(Token!['(']) {
   75|      7|            params(p, ParamFlavor::Function);
   76|     38|        }
   77|     45|        if p.is_at(Token![->]) {
   78|      0|            ret_type_expr(p);
   79|     45|        } else {
   80|     45|            p.empty();
   81|     45|        }
   82|     45|        if p.is_at(Token!['{']) {
   83|      1|            block_expr(p);
   84|     44|        }
   85|     45|    });
_RNCNvNvNtCsdJXOEzRi98w_5hedge6parser19right_binds_tighter9tightness0B7_:
  310|    145|        .position(|level| level == &kind)
_RNCNvNtCsdJXOEzRi98w_5hedge6parser10ident_expr0B5_:
  355|      4|    p.scope(TreeKind::IdentExpr, |p| {
  356|      4|        p.advance();
  357|      4|    })
_RNCNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB6_6Parser3nth0B8_:
  543|   145k|            .map_or(TokenKind::Eof, |it| it.kind())
_RINvMs_NtCsdJXOEzRi98w_5hedge6parserNtB5_6Parser5scopeNCNvB5_8function0EB7_:
  485|     45|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|     45|        let mark = self.open();
  487|     45|        body(self);
  488|     45|        self.close(mark, kind)
  489|     45|    }
_RINvMs_NtCsdJXOEzRi98w_5hedge6parserNtB5_6Parser5scopeNCNvB5_9item_list0EB7_:
  485|    466|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|    466|        let mark = self.open();
  487|    466|        body(self);
  488|    466|        self.close(mark, kind)
  489|    466|    }
_RNCNvNtCsdJXOEzRi98w_5hedge6parser6params0B5_:
  116|      7|    p.scope(TreeKind::Params, |p| {
  117|      7|        p.expect(l_delim);
  118|      7|        param_list(p, r_delim, flavor);
  119|      7|        p.expect(r_delim);
  120|      7|    });
_RNCNvNtCsdJXOEzRi98w_5hedge6parser9item_list0B5_:
   57|    466|    p.scope(TreeKind::ItemList, |p| {
   58|  48.3k|        while !p.is_at_eof() {
   59|  47.8k|            if p.is_at(Token![fn]) {
   60|     45|                function(p);
   61|  47.7k|            } else {
   62|  47.7k|                p.advance_with_error("expected a function");
   63|  47.7k|            }
   64|       |        }
   65|    466|    });
_RNCNvNtCsdJXOEzRi98w_5hedge6parser5block0B5_:
  203|     25|    p.scope(TreeKind::Block, |p| {
  204|     25|        let stmt_list_mark = p.open();
  205|       |
  206|     72|        while !p.is_at(Token!['}']) && !p.is_at_eof() {
  207|     71|            match p.nth(0) {
  208|      0|                Token![let] => let_stmt(p),
  209|      0|                Token![return] => return_stmt(p),
  210|     71|                _ if p.is_at_any(EXPR_FIRST) => match expr(p) {
  211|     29|                    Some(mark) => {
  212|     29|                        if !p.is_at(Token!['}']) && !p.is_at_eof() {
  213|      5|                            let stmt_expr_mark = p.open_before(mark);
  214|      5|                            p.expect(Token![;]);
  215|      5|                            p.close(stmt_expr_mark, TreeKind::ExprStmt);
  216|      5|                        } else {
  217|     24|                            p.close_before(stmt_list_mark, TreeKind::StmtList, mark);
  218|     24|                            return;
  219|       |                        }
  220|       |                    }
  221|      0|                    None => p.advance_with_error("expected an expression"),
  222|       |                },
  223|       |                _ => {
  224|     42|                    if p.is_at_any(STMT_RECOVERY) {
  225|      0|                        break;
  226|     42|                    }
  227|     42|                    p.advance_with_error("expected statement");
  228|       |                }
  229|       |            }
  230|       |        }
  231|       |
  232|      1|        p.close(stmt_list_mark, TreeKind::StmtList);
  233|     25|    });
_RINvMs_NtCsdJXOEzRi98w_5hedge6parserNtB5_6Parser5scopeNCNvB2_5empty0EB7_:
  485|     45|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|     45|        let mark = self.open();
  487|     45|        body(self);
  488|     45|        self.close(mark, kind)
  489|     45|    }
_RINvMs_NtCsdJXOEzRi98w_5hedge6parserNtB5_6Parser5scopeNCNvB5_10ident_expr0EB7_:
  485|      4|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|      4|        let mark = self.open();
  487|      4|        body(self);
  488|      4|        self.close(mark, kind)
  489|      4|    }
_RINvMs_NtCsdJXOEzRi98w_5hedge6parserNtB5_6Parser5scopeNCNvB5_5block0EB7_:
  485|     25|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|     25|        let mark = self.open();
  487|     25|        body(self);
  488|     25|        self.close(mark, kind)
  489|     25|    }
_RINvMs_NtCsdJXOEzRi98w_5hedge6parserNtB5_6Parser5scopeNCNvB5_11source_file0EB7_:
  485|    466|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|    466|        let mark = self.open();
  487|    466|        body(self);
  488|    466|        self.close(mark, kind)
  489|    466|    }
_RINvMs_NtCsdJXOEzRi98w_5hedge6parserNtB5_6Parser5scopeNCNvB5_6params0EB7_:
  485|      7|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|      7|        let mark = self.open();
  487|      7|        body(self);
  488|      7|        self.close(mark, kind)
  489|      7|    }
_RNCNvMs_NtCsdJXOEzRi98w_5hedge6parserNtB6_6Parser5empty0B8_:
  612|     45|        self.scope(TreeKind::Empty, |_| {});
_RINvMs_NtCsdJXOEzRi98w_5hedge6parserNtB5_6Parser5scopeNCNvB5_10block_expr0EB7_:
  485|     25|    fn scope(&mut self, kind: TreeKind, body: impl Fn(&mut Self)) -> MarkClosed {
  486|     25|        let mark = self.open();
  487|     25|        body(self);
  488|     25|        self.close(mark, kind)
  489|     25|    }
_RNCNvNtCsdJXOEzRi98w_5hedge6parser12literal_expr0B5_:
  347|      1|    p.scope(TreeKind::LiteralExpr, |p| {
  348|      1|        p.advance();
  349|      1|    })
_RNCNvNtCsdJXOEzRi98w_5hedge6parser10block_expr0B5_:
  195|     25|    p.scope(TreeKind::BlockExpr, |p| {
  196|     25|        p.expect(Token!['{']);
  197|     25|        block(p);
  198|     25|        p.expect(Token!['}']);
  199|     25|    })

_RNvXsb_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_10SyntaxNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneCs4xxCAF7KXUf_3fmt:
   10|  99.7k|#[derive(Clone, PartialEq, Eq, Hash)]
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode17direct_last_child:
  209|  96.9k|    pub fn direct_last_child(&self) -> Option<SyntaxNodeChild> {
  210|  96.9k|        self.nth_child(self.num_children().saturating_sub(1))
  211|  96.9k|    }
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxToken12prev_sibling:
  350|  96.8k|    pub fn prev_sibling(&self) -> Option<SyntaxNodeChild> {
  351|  96.8k|        let (parent, idx) = self.0.parent.as_ref()?;
  352|  96.8k|        if *idx == 0 {
  353|  95.8k|            return None;
  354|    952|        }
  355|    952|
  356|    952|        parent.nth_child(idx - 1)
  357|  96.8k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode13structural_eq:
  246|    932|    pub fn structural_eq(&self, other: &Self) -> bool {
  247|    932|        self.raw() == other.raw()
  248|    932|            && self.offset() == other.offset()
  249|    932|            && self
  250|    932|                .0
  251|    932|                .parent
  252|    932|                .as_ref()
  253|    932|                .zip(other.0.parent.as_ref())
  254|    932|                .map(|((parent1, idx1), (parent2, idx2))| {
  255|       |                    parent1.structural_eq(parent2) && idx1 == idx2
  256|    932|                })
  257|    932|                .unwrap_or(true)
  258|    932|    }
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxToken3new:
  291|  1.85M|    pub fn new(raw: RawToken, offset: usize, parent: Option<(SyntaxNode, usize)>) -> Self {
  292|  1.85M|        Self(Rc::new(SyntaxTokenData {
  293|  1.85M|            raw,
  294|  1.85M|            offset,
  295|  1.85M|            parent,
  296|  1.85M|        }))
  297|  1.85M|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode12num_children:
  104|  96.9k|    pub fn num_children(&self) -> usize {
  105|  96.9k|        self.raw().num_children()
  106|  96.9k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode12next_sibling:
  179|   292k|    pub fn next_sibling(&self) -> Option<SyntaxNodeChild> {
  180|   292k|        let (parent, idx) = self.0.parent.as_ref()?;
  181|   290k|        parent.nth_child(idx + 1)
  182|   292k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode18direct_first_child:
  205|   190k|    pub fn direct_first_child(&self) -> Option<SyntaxNodeChild> {
  206|   190k|        self.nth_child(0)
  207|   190k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode17replace_child_raw:
  229|  3.45M|    fn replace_child_raw(&self, idx: usize, new_child: RawNodeChild) -> Self {
  230|  3.45M|        let new_raw = self.raw().replace_child(idx, new_child);
  231|  3.45M|        self.replace_with_raw(new_raw)
  232|  3.45M|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode3new:
   40|  4.52M|    pub fn new(raw: RawNode, offset: usize, parent: Option<(Self, usize)>) -> Self {
   41|  4.52M|        Self(Rc::new(SyntaxNodeData {
   42|  4.52M|            raw,
   43|  4.52M|            offset,
   44|  4.52M|            parent,
   45|  4.52M|        }))
   46|  4.52M|    }
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxToken6offset:
  319|   791k|    pub fn offset(&self) -> usize {
  320|   791k|        self.0.offset
  321|   791k|    }
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxToken3raw:
  346|  3.43M|    fn raw(&self) -> &RawToken {
  347|  3.43M|        &self.0.raw
  348|  3.43M|    }
_RNvXsa_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_8PreorderNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next:
  540|   389k|    fn next(&mut self) -> Option<Self::Item> {
  541|   389k|        let current_event = self.next_event.take();
  542|   389k|
  543|   389k|        self.next_event = current_event
  544|   389k|            .as_ref()
  545|   389k|            .and_then(|current_event| match current_event {
  546|       |                WalkEvent::Enter(child) => match child {
  547|       |                    NodeOrToken::Node(node) => node
  548|       |                        .nth_child(0)
  549|       |                        .map(WalkEvent::Enter)
  550|       |                        .or_else(|| Some(WalkEvent::Leave(child.clone()))),
  551|       |                    NodeOrToken::Token(token) => {
  552|       |                        Some(WalkEvent::Leave(NodeOrToken::Token(token.clone())))
  553|       |                    }
  554|       |                },
  555|       |                WalkEvent::Leave(child) => {
  556|       |                    if *child == self.start {
  557|       |                        None
  558|       |                    } else {
  559|       |                        child.next_sibling().map(WalkEvent::Enter).or_else(|| {
  560|       |                            child
  561|       |                                .parent()
  562|       |                                .map(|parent| WalkEvent::Leave(NodeOrToken::Node(parent.clone())))
  563|       |                        })
  564|       |                    }
  565|       |                }
  566|   389k|            });
  567|   389k|
  568|   389k|        current_event
  569|   389k|    }
_RNvXsk_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxTokenNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   22|   383k|#[derive(Clone, PartialEq, Eq, Hash)]
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode16replace_with_raw:
  234|  3.45M|    fn replace_with_raw(&self, new_raw: RawNode) -> Self {
  235|  3.45M|        match &self.0.parent {
  236|  2.10M|            Some((parent, self_idx)) => parent
  237|  2.10M|                .replace_child_raw(*self_idx, NodeOrToken::Node(new_raw))
  238|  2.10M|                .nth_child(*self_idx)
  239|  2.10M|                .expect("child that was replaced should exist")
  240|  2.10M|                .into_node()
  241|  2.10M|                .expect("child that was replaced should be a node"),
  242|  1.35M|            None => Self::root(new_raw),
  243|       |        }
  244|  3.45M|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode3raw:
  100|  8.86M|    fn raw(&self) -> &RawNode {
  101|  8.86M|        &self.0.raw
  102|  8.86M|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode9nth_child:
  134|  3.16M|    pub fn nth_child(&self, idx: usize) -> Option<SyntaxNodeChild> {
  135|  3.16M|        let (raw_child, rel_offset) = self.raw().nth_child(idx)?;
  136|  2.87M|        let offset = self.offset() + rel_offset;
  137|  2.87M|        let parent_with_idx = (self.clone(), idx);
  138|  2.87M|        let syntax_child = SyntaxNodeChild::new(raw_child.clone(), offset, Some(parent_with_idx));
  139|  2.87M|
  140|  2.87M|        Some(syntax_child)
  141|  3.16M|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode12prev_sibling:
  170|  97.6k|    pub fn prev_sibling(&self) -> Option<SyntaxNodeChild> {
  171|  97.6k|        let (parent, idx) = self.0.parent.as_ref()?;
  172|  96.7k|        if *idx == 0 {
  173|  1.83k|            return None;
  174|  94.9k|        }
  175|  94.9k|
  176|  94.9k|        parent.nth_child(idx - 1)
  177|  97.6k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode8preorder:
  201|    932|    pub fn preorder(&self) -> Preorder {
  202|    932|        Preorder::new(self.clone())
  203|    932|    }
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxToken15trailing_trivia:
  315|   300k|    pub fn trailing_trivia(&self) -> &Trivia {
  316|   300k|        self.raw().trailing_trivia()
  317|   300k|    }
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxToken10prev_token:
  368|  96.8k|    pub fn prev_token(&self) -> Option<Self> {
  369|  96.8k|        self.prev_sibling()
  370|  96.8k|            .or_else(|| self.ancestors().find_map(|node| node.prev_sibling()))
  371|  96.8k|            .and_then(|child| child.last_token())
  372|  96.8k|    }
_RNvXsd_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_10SyntaxNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
   10|  97.9k|#[derive(Clone, PartialEq, Eq, Hash)]
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxToken9total_len:
  311|   677k|    pub fn total_len(&self) -> usize {
  312|   677k|        self.raw().total_len()
  313|   677k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode4root:
   36|  1.35M|    pub fn root(raw: RawNode) -> Self {
   37|  1.35M|        Self::new(raw, 0, None)
   38|  1.35M|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode6offset:
   62|  3.55M|    pub fn offset(&self) -> usize {
   63|  3.55M|        self.0.offset
   64|  3.55M|    }
_RNvMs9_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_8Preorder3new:
  530|    932|    fn new(start: SyntaxNode) -> Self {
  531|    932|        let start = NodeOrToken::Node(start.clone());
  532|    932|        let next_event = Some(WalkEvent::Enter(start.clone()));
  533|    932|        Self { start, next_event }
  534|    932|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode13replace_child:
  221|  1.35M|    pub fn replace_child(&self, idx: usize, new_child: SyntaxNodeChild) -> Self {
  222|  1.35M|        self.replace_child_raw(idx, new_child.raw().clone())
  223|  1.35M|    }
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxToken19set_trailing_trivia:
  394|   300k|    pub fn set_trailing_trivia(&self, trivia: Trivia) -> Self {
  395|   300k|        let new_raw = self.raw().with_trailing_trivia(trivia);
  396|   300k|        Self::new(new_raw, self.offset(), self.0.parent.clone())
  397|   300k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode9total_len:
   58|   678k|    pub fn total_len(&self) -> usize {
   59|   678k|        self.raw().total_len()
   60|   678k|    }
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxToken4kind:
  303|   306k|    pub fn kind(&self) -> TokenKind {
  304|   306k|        self.raw().kind()
  305|   306k|    }
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxToken6parent:
  327|   385k|    pub fn parent(&self) -> Option<&SyntaxNode> {
  328|   385k|        self.0.parent.as_ref().map(|(parent, _)| parent)
  329|   385k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode20children_with_tokens:
  118|   685k|    pub fn children_with_tokens(&self) -> impl Iterator<Item = SyntaxNodeChild> + '_ {
  119|   685k|        let mut offset = self.offset();
  120|   685k|
  121|   685k|        self.raw()
  122|   685k|            .children()
  123|   685k|            .enumerate()
  124|   685k|            .map(move |(index_in_parent, raw_child)| {
  125|       |                let parent_with_idx = (self.clone(), index_in_parent);
  126|       |                let syntax_child =
  127|       |                    SyntaxNodeChild::new(raw_child.clone(), offset, Some(parent_with_idx));
  128|       |
  129|       |                offset += syntax_child.total_len();
  130|       |                syntax_child
  131|   685k|            })
  132|   685k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode10last_token:
  217|  96.9k|    pub fn last_token(&self) -> Option<SyntaxToken> {
  218|  96.9k|        self.direct_last_child()?.last_token()
  219|  96.9k|    }
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxToken9ancestors:
  364|   289k|    pub fn ancestors(&self) -> impl Iterator<Item = &SyntaxNode> {
  365|   289k|        iter::successors(self.parent(), |it| it.parent())
  366|   289k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode4kind:
   54|  99.3k|    pub fn kind(&self) -> TreeKind {
   55|  99.3k|        self.raw().kind()
   56|  99.3k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode6parent:
   82|   294k|    pub fn parent(&self) -> Option<&Self> {
   83|   294k|        self.0.parent.as_ref().map(|(parent, _)| parent)
   84|   294k|    }
_RNvXs1_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_14SyntaxNodeDataNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eq:
  278|  96.9k|    fn eq(&self, other: &Self) -> bool {
  279|  96.9k|        self.offset == other.offset && Arc::ptr_eq(&self.raw.0, &other.raw.0)
  280|  96.9k|    }
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxToken14leading_trivia:
  299|   682k|    pub fn leading_trivia(&self) -> &Trivia {
  300|   682k|        self.raw().leading_trivia()
  301|   682k|    }
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxToken10next_token:
  374|   193k|    pub fn next_token(&self) -> Option<Self> {
  375|   193k|        self.next_sibling()
  376|   193k|            .or_else(|| self.ancestors().find_map(|node| node.next_sibling()))
  377|   193k|            .and_then(|child| child.first_token())
  378|   193k|    }
_RNvXsb_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_10SyntaxNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   10|  5.70M|#[derive(Clone, PartialEq, Eq, Hash)]
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxToken12next_sibling:
  359|   290k|    pub fn next_sibling(&self) -> Option<SyntaxNodeChild> {
  360|   290k|        let (parent, idx) = self.0.parent.as_ref()?;
  361|   290k|        parent.nth_child(idx + 1)
  362|   290k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB2_10SyntaxNode11first_token:
  213|   190k|    pub fn first_token(&self) -> Option<SyntaxToken> {
  214|   190k|        self.direct_first_child()?.first_token()
  215|   190k|    }
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB5_11SyntaxToken18set_leading_trivia:
  385|   490k|    pub fn set_leading_trivia(&self, trivia: Trivia) -> Self {
  386|   490k|        let new_raw = self.raw().with_leading_trivia(trivia);
  387|   490k|        Self::new(new_raw, self.offset(), self.0.parent.clone())
  388|   490k|    }
_RINvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB6_11SyntaxToken19with_leading_triviaNvNtBa_3fmt14tabs_to_spacesEBa_:
  380|  96.7k|    pub fn with_leading_trivia(&self, transform_trivia: impl FnOnce(&Trivia) -> Trivia) -> Self {
  381|  96.7k|        let new_trivia = transform_trivia(self.leading_trivia());
  382|  96.7k|        self.set_leading_trivia(new_trivia)
  383|  96.7k|    }
_RNCNvXsa_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB7_8PreorderNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0Bb_:
  545|   389k|            .and_then(|current_event| match current_event {
  546|   194k|                WalkEvent::Enter(child) => match child {
  547|  97.9k|                    NodeOrToken::Node(node) => node
  548|  97.9k|                        .nth_child(0)
  549|  97.9k|                        .map(WalkEvent::Enter)
  550|  97.9k|                        .or_else(|| Some(WalkEvent::Leave(child.clone()))),
  551|  96.7k|                    NodeOrToken::Token(token) => {
  552|  96.7k|                        Some(WalkEvent::Leave(NodeOrToken::Token(token.clone())))
  553|       |                    }
  554|       |                },
  555|   194k|                WalkEvent::Leave(child) => {
  556|   194k|                    if *child == self.start {
  557|    932|                        None
  558|       |                    } else {
  559|   193k|                        child.next_sibling().map(WalkEvent::Enter).or_else(|| {
  560|       |                            child
  561|       |                                .parent()
  562|       |                                .map(|parent| WalkEvent::Leave(NodeOrToken::Node(parent.clone())))
  563|   193k|                        })
  564|       |                    }
  565|       |                }
  566|   389k|            });
_RNCNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB7_11SyntaxToken10next_token0Bb_:
  376|   193k|            .or_else(|| self.ancestors().find_map(|node| node.next_sibling()))
_RINvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB6_11SyntaxToken19with_leading_triviaNCNvXs3_NtBa_3fmtNtB1q_20RemoveTrailingSpacesNtNtB8_8rewriter14SyntaxRewriter13rewrite_tokens1_0EBa_:
  380|  96.7k|    pub fn with_leading_trivia(&self, transform_trivia: impl FnOnce(&Trivia) -> Trivia) -> Self {
  381|  96.7k|        let new_trivia = transform_trivia(self.leading_trivia());
  382|  96.7k|        self.set_leading_trivia(new_trivia)
  383|  96.7k|    }
_RNCNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB4_10SyntaxNode6parent0B8_:
   83|   291k|        self.0.parent.as_ref().map(|(parent, _)| parent)
_RINvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB6_11SyntaxToken20with_trailing_triviaNCNvXs_NtBa_3fmtNtB1q_14FormatCommentsNtNtB8_8rewriter14SyntaxRewriter13rewrite_tokens_0EBa_:
  399|  96.7k|    pub fn with_trailing_trivia(&self, transform_trivia: impl FnOnce(&Trivia) -> Trivia) -> Self {
  400|  96.7k|        let new_trivia = transform_trivia(self.trailing_trivia());
  401|  96.7k|        self.set_trailing_trivia(new_trivia)
  402|  96.7k|    }
_RINvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB6_11SyntaxToken19with_leading_triviaNCNvXs2_NtBa_3fmtNtB1q_9FixBracesNtNtB8_8rewriter14SyntaxRewriter13rewrite_tokens0_0EBa_:
  380|      6|    pub fn with_leading_trivia(&self, transform_trivia: impl FnOnce(&Trivia) -> Trivia) -> Self {
  381|      6|        let new_trivia = transform_trivia(self.leading_trivia());
  382|      6|        self.set_leading_trivia(new_trivia)
  383|      6|    }
_RNCNCNCNvXsa_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtBb_8PreorderNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0s_00Bf_:
  562|  97.7k|                                .map(|parent| WalkEvent::Leave(NodeOrToken::Node(parent.clone())))
_RNCNCNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB9_11SyntaxToken10next_token00Bd_:
  376|   195k|            .or_else(|| self.ancestors().find_map(|node| node.next_sibling()))
_RINvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB6_11SyntaxToken19with_leading_triviaNCNvXs_NtBa_3fmtNtB1p_14FormatCommentsNtNtB8_8rewriter14SyntaxRewriter13rewrite_token0EBa_:
  380|  96.7k|    pub fn with_leading_trivia(&self, transform_trivia: impl FnOnce(&Trivia) -> Trivia) -> Self {
  381|  96.7k|        let new_trivia = transform_trivia(self.leading_trivia());
  382|  96.7k|        self.set_leading_trivia(new_trivia)
  383|  96.7k|    }
_RINvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB6_11SyntaxToken20with_trailing_triviaNCNvXs3_NtBa_3fmtNtB1r_20RemoveTrailingSpacesNtNtB8_8rewriter14SyntaxRewriter13rewrite_tokens0_0EBa_:
  399|  6.58k|    pub fn with_trailing_trivia(&self, transform_trivia: impl FnOnce(&Trivia) -> Trivia) -> Self {
  400|  6.58k|        let new_trivia = transform_trivia(self.trailing_trivia());
  401|  6.58k|        self.set_trailing_trivia(new_trivia)
  402|  6.58k|    }
_RNCNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB7_11SyntaxToken10prev_token0Bb_:
  370|  95.8k|            .or_else(|| self.ancestors().find_map(|node| node.prev_sibling()))
_RNCNCNvXsa_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB9_8PreorderNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next0s_0Bd_:
  559|  97.7k|                        child.next_sibling().map(WalkEvent::Enter).or_else(|| {
  560|  97.7k|                            child
  561|  97.7k|                                .parent()
  562|  97.7k|                                .map(|parent| WalkEvent::Leave(NodeOrToken::Node(parent.clone())))
  563|  97.7k|                        })
_RNCNCNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB9_11SyntaxToken10prev_token00Bd_:
  370|  97.6k|            .or_else(|| self.ancestors().find_map(|node| node.prev_sibling()))
_RNCNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB7_11SyntaxToken6parent0Bb_:
  328|   385k|        self.0.parent.as_ref().map(|(parent, _)| parent)
_RNCNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB7_11SyntaxToken10next_tokens_0Bb_:
  377|   191k|            .and_then(|child| child.first_token())
_RNCNCNvXsa_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB9_8PreorderNtNtNtNtCs9nhK3FOW46N_4core4iter6traits8iterator8Iterator4next00Bd_:
  550|    174|                        .or_else(|| Some(WalkEvent::Leave(child.clone()))),
_RNCNvMNtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB4_10SyntaxNode20children_with_tokens0B8_:
  124|  1.35M|            .map(move |(index_in_parent, raw_child)| {
  125|  1.35M|                let parent_with_idx = (self.clone(), index_in_parent);
  126|  1.35M|                let syntax_child =
  127|  1.35M|                    SyntaxNodeChild::new(raw_child.clone(), offset, Some(parent_with_idx));
  128|  1.35M|
  129|  1.35M|                offset += syntax_child.total_len();
  130|  1.35M|                syntax_child
  131|  1.35M|            })
_RINvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB6_11SyntaxToken19with_leading_triviaNCNvXs1_NtBa_3fmtNtB1q_14FixIndentationNtNtB8_8rewriter14SyntaxRewriter13rewrite_token0EBa_:
  380|  7.01k|    pub fn with_leading_trivia(&self, transform_trivia: impl FnOnce(&Trivia) -> Trivia) -> Self {
  381|  7.01k|        let new_trivia = transform_trivia(self.leading_trivia());
  382|  7.01k|        self.set_leading_trivia(new_trivia)
  383|  7.01k|    }
_RINvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB6_11SyntaxToken19with_leading_triviaNCNvXs4_NtBa_3fmtNtB1q_13DedupNewlinesNtNtB8_8rewriter14SyntaxRewriter13rewrite_token0EBa_:
  380|  96.7k|    pub fn with_leading_trivia(&self, transform_trivia: impl FnOnce(&Trivia) -> Trivia) -> Self {
  381|  96.7k|        let new_trivia = transform_trivia(self.leading_trivia());
  382|  96.7k|        self.set_leading_trivia(new_trivia)
  383|  96.7k|    }
_RINvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB6_11SyntaxToken20with_trailing_triviaNvNtBa_3fmt14tabs_to_spacesEBa_:
  399|  96.7k|    pub fn with_trailing_trivia(&self, transform_trivia: impl FnOnce(&Trivia) -> Trivia) -> Self {
  400|  96.7k|        let new_trivia = transform_trivia(self.trailing_trivia());
  401|  96.7k|        self.set_trailing_trivia(new_trivia)
  402|  96.7k|    }
_RNCNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB7_11SyntaxToken10prev_tokens_0Bb_:
  371|  95.9k|            .and_then(|child| child.last_token())
_RNCNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3cstNtB7_11SyntaxToken9ancestors0Bb_:
  365|   292k|        iter::successors(self.parent(), |it| it.parent())
_RNvMs8_NtNtCsdJXOEzRi98w_5hedge6syntax3cstINtNtB7_13utility_types11NodeOrTokenNtB5_10SyntaxNodeNtB5_11SyntaxTokenE12next_sibling:
  483|   193k|    pub fn next_sibling(&self) -> Option<Self> {
  484|   193k|        match self {
  485|  96.9k|            Self::Node(it) => it.next_sibling(),
  486|  96.7k|            Self::Token(it) => it.next_sibling(),
  487|       |        }
  488|   193k|    }
_RNvMs8_NtNtCsdJXOEzRi98w_5hedge6syntax3cstINtNtB7_13utility_types11NodeOrTokenNtB5_10SyntaxNodeNtB5_11SyntaxTokenE9total_len:
  455|  1.35M|    pub fn total_len(&self) -> usize {
  456|  1.35M|        match self {
  457|   678k|            Self::Node(it) => it.total_len(),
  458|   677k|            Self::Token(it) => it.total_len(),
  459|       |        }
  460|  1.35M|    }
_RNvMs8_NtNtCsdJXOEzRi98w_5hedge6syntax3cstINtNtB7_13utility_types11NodeOrTokenNtB5_10SyntaxNodeNtB5_11SyntaxTokenE10last_token:
  497|   192k|    pub fn last_token(&self) -> Option<SyntaxToken> {
  498|   192k|        match self {
  499|  96.9k|            Self::Node(node) => node.last_token(),
  500|  95.7k|            Self::Token(token) => Some(token.clone()),
  501|       |        }
  502|   192k|    }
_RNvMs8_NtNtCsdJXOEzRi98w_5hedge6syntax3cstINtNtB7_13utility_types11NodeOrTokenNtB5_10SyntaxNodeNtB5_11SyntaxTokenE6parent:
  469|  97.7k|    pub fn parent(&self) -> Option<&SyntaxNode> {
  470|  97.7k|        match self {
  471|  1.12k|            Self::Node(it) => it.parent(),
  472|  96.6k|            Self::Token(it) => it.parent(),
  473|       |        }
  474|  97.7k|    }
_RNvMs8_NtNtCsdJXOEzRi98w_5hedge6syntax3cstINtNtB7_13utility_types11NodeOrTokenNtB5_10SyntaxNodeNtB5_11SyntaxTokenE3new:
  448|  4.22M|    pub fn new(raw: RawNodeChild, offset: usize, parent: Option<(SyntaxNode, usize)>) -> Self {
  449|  4.22M|        match raw {
  450|  3.16M|            NodeOrToken::Node(node) => Self::Node(SyntaxNode::new(node, offset, parent)),
  451|  1.06M|            NodeOrToken::Token(token) => Self::Token(SyntaxToken::new(token, offset, parent)),
  452|       |        }
  453|  4.22M|    }
_RNvMs8_NtNtCsdJXOEzRi98w_5hedge6syntax3cstINtNtB7_13utility_types11NodeOrTokenNtB5_10SyntaxNodeNtB5_11SyntaxTokenE11first_token:
  490|   381k|    pub fn first_token(&self) -> Option<SyntaxToken> {
  491|   381k|        match self {
  492|   190k|            Self::Node(node) => node.first_token(),
  493|   191k|            Self::Token(token) => Some(token.clone()),
  494|       |        }
  495|   381k|    }
_RNvMs8_NtNtCsdJXOEzRi98w_5hedge6syntax3cstINtNtB7_13utility_types11NodeOrTokenNtB5_10SyntaxNodeNtB5_11SyntaxTokenE3raw:
  504|  1.35M|    fn raw(&self) -> RawNodeChild {
  505|  1.35M|        match self {
  506|   678k|            Self::Node(it) => RawNodeChild::Node(it.raw().clone()),
  507|   677k|            Self::Token(it) => RawNodeChild::Token(it.raw().clone()),
  508|       |        }
  509|  1.35M|    }

_RNvXs3_NtNtCsdJXOEzRi98w_5hedge6syntax5kindsNtB5_9TokenKindNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
    4|   597k|#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, ConstParamTy)]
_RNvXsc_NtNtCsdJXOEzRi98w_5hedge6syntax5kindsNtB5_8TreeKindNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
  245|   197k|#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, ConstParamTy)]

_RNvXsq_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_12RawTokenDataNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
   29|  96.7k|#[derive(Debug, PartialEq, Eq, Hash)]
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB2_7RawNode3new:
   39|  3.50M|    pub fn new(kind: TreeKind, children: Vec<RawNodeChild>) -> Self {
   40|  3.50M|        let len = children.iter().map(|child| child.total_len()).sum();
   41|  3.50M|        let mut offset = 0;
   42|  3.50M|        let children = children
   43|  3.50M|            .into_iter()
   44|  3.50M|            .map(|child| {
   45|       |                let child_len = child.total_len();
   46|       |                let child_with_offset = (child, offset);
   47|       |
   48|       |                offset += child_len;
   49|       |                child_with_offset
   50|  3.50M|            })
   51|  3.50M|            .collect();
   52|  3.50M|
   53|  3.50M|        Self(Arc::new(RawNodeData {
   54|  3.50M|            kind,
   55|  3.50M|            len,
   56|  3.50M|            children,
   57|  3.50M|        }))
   58|  3.50M|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB2_7RawNode8children:
   72|  11.0M|    pub fn children(&self) -> impl Iterator<Item = &RawNodeChild> {
   73|  11.0M|        self.0.children.iter().map(|(child, _)| child)
   74|  11.0M|    }
_RNvMs1_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_8RawToken4kind:
  165|  1.29M|    pub fn kind(&self) -> TokenKind {
  166|  1.29M|        self.0.kind
  167|  1.29M|    }
_RNvMs1_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_8RawToken20with_trailing_trivia:
  194|   300k|    pub fn with_trailing_trivia(&self, trivia: Trivia) -> Self {
  195|   300k|        Self::new(
  196|   300k|            self.leading_trivia().clone(),
  197|   300k|            self.kind(),
  198|   300k|            self.text().to_string(),
  199|   300k|            trivia,
  200|   300k|        )
  201|   300k|    }
_RNvMs1_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_8RawToken15trailing_trivia:
  173|  5.76M|    pub fn trailing_trivia(&self) -> &Trivia {
  174|  5.76M|        &self.0.trailing_trivia
  175|  5.76M|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB2_7RawNode9nth_child:
   76|  3.16M|    pub fn nth_child(&self, idx: usize) -> Option<&(RawNodeChild, usize)> {
   77|  3.16M|        self.0.children.get(idx)
   78|  3.16M|    }
_RNvMs1_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_8RawToken3new:
  147|   839k|    pub fn new(
  148|   839k|        leading_trivia: Trivia,
  149|   839k|        kind: TokenKind,
  150|   839k|        text: String,
  151|   839k|        trailing_trivia: Trivia,
  152|   839k|    ) -> Self {
  153|   839k|        Self(Arc::new(RawTokenData {
  154|   839k|            leading_trivia,
  155|   839k|            kind,
  156|   839k|            text,
  157|   839k|            trailing_trivia,
  158|   839k|        }))
  159|   839k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB2_7RawNode9total_len:
   64|  1.39G|    pub fn total_len(&self) -> usize {
   65|  1.39G|        self.0.len
   66|  1.39G|    }
_RNvMs1_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_8RawToken9total_len:
  181|  4.96M|    pub fn total_len(&self) -> usize {
  182|  4.96M|        self.leading_trivia().total_len() + self.text_len() + self.trailing_trivia().total_len()
  183|  4.96M|    }
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_14RawNodeBuilder9add_child:
  225|  96.8k|    pub fn add_child(&mut self, child: RawNodeChild) {
  226|  96.8k|        self.children.push(child);
  227|  96.8k|    }
_RNvXs5_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_7RawNodeNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   10|   698M|#[derive(Debug, Clone, PartialEq, Eq, Hash)]
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_14RawNodeBuilder5build:
  229|  48.9k|    pub fn build(self) -> RawNode {
  230|  48.9k|        RawNode::new(self.kind, self.children)
  231|  48.9k|    }
_RNvMs1_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_8RawToken14leading_trivia:
  161|  5.95M|    pub fn leading_trivia(&self) -> &Trivia {
  162|  5.95M|        &self.0.leading_trivia
  163|  5.95M|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB2_7RawNode12num_children:
   68|  96.9k|    pub fn num_children(&self) -> usize {
   69|  96.9k|        self.0.children.len()
   70|  96.9k|    }
_RNvMs1_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_8RawToken19with_leading_trivia:
  185|   490k|    pub fn with_leading_trivia(&self, trivia: Trivia) -> Self {
  186|   490k|        Self::new(
  187|   490k|            trivia,
  188|   490k|            self.kind(),
  189|   490k|            self.text().to_string(),
  190|   490k|            self.trailing_trivia().clone(),
  191|   490k|        )
  192|   490k|    }
_RNvXsd_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_11RawNodeDataNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
   14|  97.7k|#[derive(Debug, PartialEq, Eq, Hash)]
_RNvMs1_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_8RawToken4text:
  169|  5.80M|    pub fn text(&self) -> &str {
  170|  5.80M|        &self.0.text
  171|  5.80M|    }
_RNvXsk_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_8RawTokenNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
   25|  96.7k|#[derive(Debug, Clone, PartialEq, Eq, Hash)]
_RNvMs3_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_14RawNodeBuilder3new:
  218|  48.9k|    pub fn new(kind: TreeKind) -> Self {
  219|  48.9k|        Self {
  220|  48.9k|            kind,
  221|  48.9k|            children: Vec::new(),
  222|  48.9k|        }
  223|  48.9k|    }
_RNvXs7_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_7RawNodeNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
   10|  97.9k|#[derive(Debug, Clone, PartialEq, Eq, Hash)]
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB2_7RawNode4kind:
   60|  3.55M|    pub fn kind(&self) -> TreeKind {
   61|  3.55M|        self.0.kind
   62|  3.55M|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB2_7RawNode13replace_child:
   80|  3.45M|    pub fn replace_child(&self, idx: usize, new_child: RawNodeChild) -> Self {
   81|  3.45M|        assert!(idx < self.children().count());
   82|       |
   83|  3.45M|        let left_children = self.children().take(idx).cloned();
   84|  3.45M|        let right_children = self.children().skip(idx + 1).cloned();
   85|  3.45M|        let new_children = left_children
   86|  3.45M|            .chain(iter::once(new_child))
   87|  3.45M|            .chain(right_children)
   88|  3.45M|            .collect();
   89|  3.45M|
   90|  3.45M|        Self::new(self.kind(), new_children)
   91|  3.45M|    }
_RNvMs1_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_8RawToken8text_len:
  177|  5.01M|    pub fn text_len(&self) -> usize {
  178|  5.01M|        self.text().len()
  179|  5.01M|    }
_RNvXsi_NtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB5_8RawTokenNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
   25|  3.81M|#[derive(Debug, Clone, PartialEq, Eq, Hash)]
_RNCNvMNtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB4_7RawNode8children0B8_:
   73|  1.74G|        self.0.children.iter().map(|(child, _)| child)
_RNCNvMNtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB4_7RawNode3news_0B8_:
   44|   699M|            .map(|child| {
   45|   699M|                let child_len = child.total_len();
   46|   699M|                let child_with_offset = (child, offset);
   47|   699M|
   48|   699M|                offset += child_len;
   49|   699M|                child_with_offset
   50|   699M|            })
_RNCNvMNtNtCsdJXOEzRi98w_5hedge6syntax3rawNtB4_7RawNode3new0B8_:
   40|   699M|        let len = children.iter().map(|child| child.total_len()).sum();
_RNvMs0_NtNtCsdJXOEzRi98w_5hedge6syntax3rawINtNtB7_13utility_types11NodeOrTokenNtB5_7RawNodeNtB5_8RawTokenE9total_len:
  138|  1.39G|    pub fn total_len(&self) -> usize {
  139|  1.39G|        match self {
  140|  1.39G|            Self::Node(node) => node.total_len(),
  141|  4.24M|            Self::Token(token) => token.total_len(),
  142|       |        }
  143|  1.39G|    }

_RNvYNtCs4xxCAF7KXUf_3fmt13WithoutTriviaNtNtNtCsdJXOEzRi98w_5hedge6syntax8rewriter14SyntaxRewriter12rewrite_nodeB4_:
    4|  97.9k|    fn rewrite_node(self, node: SyntaxNode) -> (Self, SyntaxNode)
    5|  97.9k|    where
    6|  97.9k|        Self: Sized,
    7|  97.9k|    {
    8|  97.9k|        (self, node)
    9|  97.9k|    }
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB5_3cst10SyntaxNode7rewriteNtCs4xxCAF7KXUf_3fmt13WithoutTriviaEB1e_:
   18|  97.9k|    pub fn rewrite<R: SyntaxRewriter>(self, rewriter: R) -> Self {
   19|  97.9k|        let (new_rewriter, new_node) = rewriter.rewrite_node(self);
   20|  97.9k|
   21|  97.9k|        new_node
   22|  97.9k|            .children_with_tokens()
   23|  97.9k|            .enumerate()
   24|  97.9k|            .fold(new_node.clone(), |node, (idx, child)| {
   25|       |                let new_child = child.bimap(
   26|       |                    |node| node.rewrite(new_rewriter),
   27|       |                    |token| new_rewriter.rewrite_token(token),
   28|       |                );
   29|       |
   30|       |                node.replace_child(idx, new_child)
   31|  97.9k|            })
   32|  97.9k|    }
_RNCNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB9_3cst10SyntaxNode7rewriteNtCs4xxCAF7KXUf_3fmt13WithoutTriviaE0s_0B1i_:
   27|  96.7k|                    |token| new_rewriter.rewrite_token(token),
_RNCNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB9_3cst10SyntaxNode7rewriteNtCs4xxCAF7KXUf_3fmt13WithoutTriviaE00B1i_:
   26|  96.9k|                    |node| node.rewrite(new_rewriter),
_RNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB7_3cst10SyntaxNode7rewriteNtCs4xxCAF7KXUf_3fmt13WithoutTriviaE0B1g_:
   24|   193k|            .fold(new_node.clone(), |node, (idx, child)| {
   25|   193k|                let new_child = child.bimap(
   26|   193k|                    |node| node.rewrite(new_rewriter),
   27|   193k|                    |token| new_rewriter.rewrite_token(token),
   28|   193k|                );
   29|   193k|
   30|   193k|                node.replace_child(idx, new_child)
   31|   193k|            })
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB5_3cst10SyntaxNode7rewriteNtNtB7_3fmt12TabsToSpacesEB7_:
   18|  97.9k|    pub fn rewrite<R: SyntaxRewriter>(self, rewriter: R) -> Self {
   19|  97.9k|        let (new_rewriter, new_node) = rewriter.rewrite_node(self);
   20|  97.9k|
   21|  97.9k|        new_node
   22|  97.9k|            .children_with_tokens()
   23|  97.9k|            .enumerate()
   24|  97.9k|            .fold(new_node.clone(), |node, (idx, child)| {
   25|       |                let new_child = child.bimap(
   26|       |                    |node| node.rewrite(new_rewriter),
   27|       |                    |token| new_rewriter.rewrite_token(token),
   28|       |                );
   29|       |
   30|       |                node.replace_child(idx, new_child)
   31|  97.9k|            })
   32|  97.9k|    }
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB5_3cst10SyntaxNode7rewriteNtNtB7_3fmt14FormatCommentsEB7_:
   18|  97.9k|    pub fn rewrite<R: SyntaxRewriter>(self, rewriter: R) -> Self {
   19|  97.9k|        let (new_rewriter, new_node) = rewriter.rewrite_node(self);
   20|  97.9k|
   21|  97.9k|        new_node
   22|  97.9k|            .children_with_tokens()
   23|  97.9k|            .enumerate()
   24|  97.9k|            .fold(new_node.clone(), |node, (idx, child)| {
   25|       |                let new_child = child.bimap(
   26|       |                    |node| node.rewrite(new_rewriter),
   27|       |                    |token| new_rewriter.rewrite_token(token),
   28|       |                );
   29|       |
   30|       |                node.replace_child(idx, new_child)
   31|  97.9k|            })
   32|  97.9k|    }
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB5_3cst10SyntaxNode7rewriteNtNtB7_3fmt20RemoveTrailingSpacesEB7_:
   18|  97.9k|    pub fn rewrite<R: SyntaxRewriter>(self, rewriter: R) -> Self {
   19|  97.9k|        let (new_rewriter, new_node) = rewriter.rewrite_node(self);
   20|  97.9k|
   21|  97.9k|        new_node
   22|  97.9k|            .children_with_tokens()
   23|  97.9k|            .enumerate()
   24|  97.9k|            .fold(new_node.clone(), |node, (idx, child)| {
   25|       |                let new_child = child.bimap(
   26|       |                    |node| node.rewrite(new_rewriter),
   27|       |                    |token| new_rewriter.rewrite_token(token),
   28|       |                );
   29|       |
   30|       |                node.replace_child(idx, new_child)
   31|  97.9k|            })
   32|  97.9k|    }
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB5_3cst10SyntaxNode7rewriteNtNtB7_3fmt14FixIndentationEB7_:
   18|  97.9k|    pub fn rewrite<R: SyntaxRewriter>(self, rewriter: R) -> Self {
   19|  97.9k|        let (new_rewriter, new_node) = rewriter.rewrite_node(self);
   20|  97.9k|
   21|  97.9k|        new_node
   22|  97.9k|            .children_with_tokens()
   23|  97.9k|            .enumerate()
   24|  97.9k|            .fold(new_node.clone(), |node, (idx, child)| {
   25|       |                let new_child = child.bimap(
   26|       |                    |node| node.rewrite(new_rewriter),
   27|       |                    |token| new_rewriter.rewrite_token(token),
   28|       |                );
   29|       |
   30|       |                node.replace_child(idx, new_child)
   31|  97.9k|            })
   32|  97.9k|    }
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB5_3cst10SyntaxNode7rewriteNtNtB7_3fmt13DedupNewlinesEB7_:
   18|  97.9k|    pub fn rewrite<R: SyntaxRewriter>(self, rewriter: R) -> Self {
   19|  97.9k|        let (new_rewriter, new_node) = rewriter.rewrite_node(self);
   20|  97.9k|
   21|  97.9k|        new_node
   22|  97.9k|            .children_with_tokens()
   23|  97.9k|            .enumerate()
   24|  97.9k|            .fold(new_node.clone(), |node, (idx, child)| {
   25|       |                let new_child = child.bimap(
   26|       |                    |node| node.rewrite(new_rewriter),
   27|       |                    |token| new_rewriter.rewrite_token(token),
   28|       |                );
   29|       |
   30|       |                node.replace_child(idx, new_child)
   31|  97.9k|            })
   32|  97.9k|    }
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB5_3cst10SyntaxNode7rewriteNtNtB7_3fmt9FixBracesEB7_:
   18|  97.9k|    pub fn rewrite<R: SyntaxRewriter>(self, rewriter: R) -> Self {
   19|  97.9k|        let (new_rewriter, new_node) = rewriter.rewrite_node(self);
   20|  97.9k|
   21|  97.9k|        new_node
   22|  97.9k|            .children_with_tokens()
   23|  97.9k|            .enumerate()
   24|  97.9k|            .fold(new_node.clone(), |node, (idx, child)| {
   25|       |                let new_child = child.bimap(
   26|       |                    |node| node.rewrite(new_rewriter),
   27|       |                    |token| new_rewriter.rewrite_token(token),
   28|       |                );
   29|       |
   30|       |                node.replace_child(idx, new_child)
   31|  97.9k|            })
   32|  97.9k|    }
_RNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB7_3cst10SyntaxNode7rewriteNtNtB9_3fmt14FixIndentationE0B9_:
   24|   193k|            .fold(new_node.clone(), |node, (idx, child)| {
   25|   193k|                let new_child = child.bimap(
   26|   193k|                    |node| node.rewrite(new_rewriter),
   27|   193k|                    |token| new_rewriter.rewrite_token(token),
   28|   193k|                );
   29|   193k|
   30|   193k|                node.replace_child(idx, new_child)
   31|   193k|            })
_RNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB7_3cst10SyntaxNode7rewriteNtNtB9_3fmt13DedupNewlinesE0B9_:
   24|   193k|            .fold(new_node.clone(), |node, (idx, child)| {
   25|   193k|                let new_child = child.bimap(
   26|   193k|                    |node| node.rewrite(new_rewriter),
   27|   193k|                    |token| new_rewriter.rewrite_token(token),
   28|   193k|                );
   29|   193k|
   30|   193k|                node.replace_child(idx, new_child)
   31|   193k|            })
_RNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB7_3cst10SyntaxNode7rewriteNtNtB9_3fmt14FormatCommentsE0B9_:
   24|   193k|            .fold(new_node.clone(), |node, (idx, child)| {
   25|   193k|                let new_child = child.bimap(
   26|   193k|                    |node| node.rewrite(new_rewriter),
   27|   193k|                    |token| new_rewriter.rewrite_token(token),
   28|   193k|                );
   29|   193k|
   30|   193k|                node.replace_child(idx, new_child)
   31|   193k|            })
_RNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB7_3cst10SyntaxNode7rewriteNtNtB9_3fmt9FixBracesE0B9_:
   24|   193k|            .fold(new_node.clone(), |node, (idx, child)| {
   25|   193k|                let new_child = child.bimap(
   26|   193k|                    |node| node.rewrite(new_rewriter),
   27|   193k|                    |token| new_rewriter.rewrite_token(token),
   28|   193k|                );
   29|   193k|
   30|   193k|                node.replace_child(idx, new_child)
   31|   193k|            })
_RNCNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB9_3cst10SyntaxNode7rewriteNtNtBb_3fmt13DedupNewlinesE0s_0Bb_:
   27|  96.7k|                    |token| new_rewriter.rewrite_token(token),
_RNCNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB9_3cst10SyntaxNode7rewriteNtNtBb_3fmt14FixIndentationE0s_0Bb_:
   27|  96.7k|                    |token| new_rewriter.rewrite_token(token),
_RNCNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB9_3cst10SyntaxNode7rewriteNtNtBb_3fmt14FormatCommentsE0s_0Bb_:
   27|  96.7k|                    |token| new_rewriter.rewrite_token(token),
_RNCNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB9_3cst10SyntaxNode7rewriteNtNtBb_3fmt9FixBracesE0s_0Bb_:
   27|  96.7k|                    |token| new_rewriter.rewrite_token(token),
_RNCNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB9_3cst10SyntaxNode7rewriteNtNtBb_3fmt12TabsToSpacesE00Bb_:
   26|  96.9k|                    |node| node.rewrite(new_rewriter),
_RNCNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB9_3cst10SyntaxNode7rewriteNtNtBb_3fmt12TabsToSpacesE0s_0Bb_:
   27|  96.7k|                    |token| new_rewriter.rewrite_token(token),
_RNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB7_3cst10SyntaxNode7rewriteNtNtB9_3fmt12TabsToSpacesE0B9_:
   24|   193k|            .fold(new_node.clone(), |node, (idx, child)| {
   25|   193k|                let new_child = child.bimap(
   26|   193k|                    |node| node.rewrite(new_rewriter),
   27|   193k|                    |token| new_rewriter.rewrite_token(token),
   28|   193k|                );
   29|   193k|
   30|   193k|                node.replace_child(idx, new_child)
   31|   193k|            })
_RNCNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB9_3cst10SyntaxNode7rewriteNtNtBb_3fmt13DedupNewlinesE00Bb_:
   26|  96.9k|                    |node| node.rewrite(new_rewriter),
_RNCNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB9_3cst10SyntaxNode7rewriteNtNtBb_3fmt14FixIndentationE00Bb_:
   26|  96.9k|                    |node| node.rewrite(new_rewriter),
_RNCNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB9_3cst10SyntaxNode7rewriteNtNtBb_3fmt14FormatCommentsE00Bb_:
   26|  96.9k|                    |node| node.rewrite(new_rewriter),
_RNCNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB9_3cst10SyntaxNode7rewriteNtNtBb_3fmt9FixBracesE00Bb_:
   26|  96.9k|                    |node| node.rewrite(new_rewriter),
_RNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB7_3cst10SyntaxNode7rewriteNtNtB9_3fmt20RemoveTrailingSpacesE0B9_:
   24|   193k|            .fold(new_node.clone(), |node, (idx, child)| {
   25|   193k|                let new_child = child.bimap(
   26|   193k|                    |node| node.rewrite(new_rewriter),
   27|   193k|                    |token| new_rewriter.rewrite_token(token),
   28|   193k|                );
   29|   193k|
   30|   193k|                node.replace_child(idx, new_child)
   31|   193k|            })
_RNCNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB9_3cst10SyntaxNode7rewriteNtNtBb_3fmt20RemoveTrailingSpacesE00Bb_:
   26|  96.9k|                    |node| node.rewrite(new_rewriter),
_RNCNCINvMNtNtCsdJXOEzRi98w_5hedge6syntax8rewriterNtNtB9_3cst10SyntaxNode7rewriteNtNtBb_3fmt20RemoveTrailingSpacesE0s_0Bb_:
   27|  96.7k|                    |token| new_rewriter.rewrite_token(token),
_RNvYNtNtCsdJXOEzRi98w_5hedge3fmt12TabsToSpacesNtNtNtB6_6syntax8rewriter14SyntaxRewriter12rewrite_nodeB6_:
    4|  97.9k|    fn rewrite_node(self, node: SyntaxNode) -> (Self, SyntaxNode)
    5|  97.9k|    where
    6|  97.9k|        Self: Sized,
    7|  97.9k|    {
    8|  97.9k|        (self, node)
    9|  97.9k|    }
_RNvYNtNtCsdJXOEzRi98w_5hedge3fmt13DedupNewlinesNtNtNtB6_6syntax8rewriter14SyntaxRewriter12rewrite_nodeB6_:
    4|  97.9k|    fn rewrite_node(self, node: SyntaxNode) -> (Self, SyntaxNode)
    5|  97.9k|    where
    6|  97.9k|        Self: Sized,
    7|  97.9k|    {
    8|  97.9k|        (self, node)
    9|  97.9k|    }
_RNvYNtNtCsdJXOEzRi98w_5hedge3fmt14FormatCommentsNtNtNtB6_6syntax8rewriter14SyntaxRewriter12rewrite_nodeB6_:
    4|  97.9k|    fn rewrite_node(self, node: SyntaxNode) -> (Self, SyntaxNode)
    5|  97.9k|    where
    6|  97.9k|        Self: Sized,
    7|  97.9k|    {
    8|  97.9k|        (self, node)
    9|  97.9k|    }
_RNvYNtNtCsdJXOEzRi98w_5hedge3fmt20RemoveTrailingSpacesNtNtNtB6_6syntax8rewriter14SyntaxRewriter12rewrite_nodeB6_:
    4|  97.9k|    fn rewrite_node(self, node: SyntaxNode) -> (Self, SyntaxNode)
    5|  97.9k|    where
    6|  97.9k|        Self: Sized,
    7|  97.9k|    {
    8|  97.9k|        (self, node)
    9|  97.9k|    }
_RNvYNtNtCsdJXOEzRi98w_5hedge3fmt9FixBracesNtNtNtB6_6syntax8rewriter14SyntaxRewriter12rewrite_nodeB6_:
    4|  97.9k|    fn rewrite_node(self, node: SyntaxNode) -> (Self, SyntaxNode)
    5|  97.9k|    where
    6|  97.9k|        Self: Sized,
    7|  97.9k|    {
    8|  97.9k|        (self, node)
    9|  97.9k|    }

_RNvMs0_NtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB5_11TriviaPiece5count:
  151|  72.5k|    fn count(&self) -> usize {
  152|  72.5k|        match self {
  153|  67.9k|            Self::Space(count) | Self::Tab(count) | Self::Newline(count) => *count,
  154|  4.55k|            Self::Comment(_) => 1,
  155|       |        }
  156|  72.5k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB2_6Trivia17with_final_indent:
   64|  7.01k|    pub fn with_final_indent(&self, final_indentation: usize) -> Self {
   65|  7.01k|        let mut new_pieces = self.pieces.clone();
   66|  7.01k|        if let Some(TriviaPiece::Space(count)) = new_pieces.last_mut() {
   67|     13|            *count = final_indentation;
   68|  7.00k|        }
   69|  7.01k|        Self::new(new_pieces)
   70|  7.01k|    }
_RNvXs3_NtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB5_6TriviaNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
    3|   887k|#[derive(Debug, Clone, Default, PartialEq, Eq, Hash)]
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB2_6Trivia6spaces:
   30|  3.47k|    pub fn spaces(n: usize) -> Self {
   31|  3.47k|        Self::new([TriviaPiece::Space(n)])
   32|  3.47k|    }
_RNvMs0_NtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB5_11TriviaPiece10is_comment:
  138|  13.5k|    pub fn is_comment(&self) -> bool {
  139|  13.5k|        matches!(self, Self::Comment(..))
  140|  13.5k|    }
_RNvXsb_NtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB5_11TriviaPieceNtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
    9|  94.3k|#[derive(Debug, Clone, PartialEq, Eq, Hash)]
_RNvMs0_NtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB5_11TriviaPiece9total_len:
  103|  1.35M|    pub fn total_len(&self) -> usize {
  104|  1.35M|        match self {
  105|  1.26M|            Self::Space(count) | Self::Tab(count) | Self::Newline(count) => *count,
  106|  89.2k|            Self::Comment(comment) => comment.len(),
  107|       |        }
  108|  1.35M|    }
_RNvXs4_NtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB5_6TriviaNtNtCs9nhK3FOW46N_4core7default7Default7defaultB9_:
    3|   799k|#[derive(Debug, Clone, Default, PartialEq, Eq, Hash)]
_RNvMs0_NtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB5_11TriviaPiece8is_space:
  114|  9.37k|    pub fn is_space(&self) -> bool {
  115|  9.37k|        matches!(self, Self::Space(..))
  116|  9.37k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB2_6Trivia16contains_newline:
   38|   191k|    pub fn contains_newline(&self) -> bool {
   39|   191k|        self.pieces.iter().any(|piece| piece.is_newline())
   40|   191k|    }
_RNvXsd_NtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB5_11TriviaPieceNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
    9|  6.47k|#[derive(Debug, Clone, PartialEq, Eq, Hash)]
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB2_6Trivia5empty:
   26|   750k|    pub fn empty() -> Self {
   27|   750k|        Self::default()
   28|   750k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB2_6Trivia16contains_comment:
   42|  3.54k|    pub fn contains_comment(&self) -> bool {
   43|  3.54k|        self.pieces.iter().any(|piece| piece.is_comment())
   44|  3.54k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB2_6Trivia23without_trailing_spaces:
   72|  6.58k|    pub fn without_trailing_spaces(&self) -> Self {
   73|  6.58k|        let mut new_pieces = self.pieces.clone();
   74|  6.58k|        if new_pieces.last().is_some_and(|last| last.is_space()) {
   75|    450|            new_pieces.pop();
   76|  6.13k|        }
   77|       |
   78|  6.58k|        Self::new(new_pieces)
   79|  6.58k|    }
_RNvMs0_NtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB5_11TriviaPiece10is_newline:
  130|  19.2k|    pub fn is_newline(&self) -> bool {
  131|  19.2k|        matches!(self, Self::Newline(..))
  132|  19.2k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB2_6Trivia9total_len:
   34|  9.93M|    pub fn total_len(&self) -> usize {
   35|  9.93M|        self.pieces.iter().map(|piece| piece.total_len()).sum()
   36|  9.93M|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB2_6Trivia11with_indent:
   47|  7.01k|    pub fn with_indent(&self, indentation: usize) -> Self {
   48|  7.01k|        let new_pieces = self
   49|  7.01k|            .pieces
   50|  7.01k|            .iter()
   51|  7.01k|            .filter(|piece| !piece.is_space())
   52|  7.01k|            .cloned()
   53|  7.01k|            .flat_map(|piece| {
   54|       |                if piece.is_newline() {
   55|       |                    vec![piece, TriviaPiece::Space(indentation)]
   56|       |                } else {
   57|       |                    vec![piece]
   58|       |                }
   59|  7.01k|            });
   60|  7.01k|
   61|  7.01k|        Self::new(new_pieces)
   62|  7.01k|    }
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB2_6Trivia4push:
   81|  72.5k|    pub(crate) fn push(&mut self, new_piece: TriviaPiece) {
   82|  72.5k|        if new_piece.count() == 0 {
   83|  6.84k|            return;
   84|  65.6k|        }
   85|       |
   86|  65.6k|        if let Some(last) = self.pieces.last_mut()
   87|  14.6k|            && let Some(combined) = last.combine(&new_piece)
   88|  6.70k|        {
   89|  6.70k|            *last = combined;
   90|  58.9k|        } else {
   91|  58.9k|            self.pieces.push(new_piece);
   92|  58.9k|        }
   93|  72.5k|    }
_RNvMs0_NtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB5_11TriviaPiece7combine:
  142|  14.6k|    fn combine(&self, new_piece: &Self) -> Option<Self> {
  143|  14.6k|        match (self, new_piece) {
  144|    899|            (Self::Space(c1), Self::Space(c2)) => Some(Self::Space(c1 + c2)),
  145|  3.10k|            (Self::Tab(c1), Self::Tab(c2)) => Some(Self::Tab(c1 + c2)),
  146|  2.70k|            (Self::Newline(c1), Self::Newline(c2)) => Some(Self::Newline(c1 + c2)),
  147|  7.89k|            _ => None,
  148|       |        }
  149|  14.6k|    }
_RNvXs6_NtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB5_6TriviaNtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
    3|   193k|#[derive(Debug, Clone, Default, PartialEq, Eq, Hash)]
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB3_6Trivia3newINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtB10_6cloned6ClonedINtNtNtB14_5slice4iter4IterNtB3_11TriviaPieceEENCNvNtB7_3fmt14tabs_to_spaces0EEB7_:
   18|   193k|    pub fn new(pieces: impl IntoIterator<Item = TriviaPiece>) -> Self {
   19|   193k|        let mut trivia = Self::empty();
   20|   205k|        for piece in pieces {
   21|  11.8k|            trivia.push(piece);
   22|  11.8k|        }
   23|   193k|        trivia
   24|   193k|    }
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB3_6Trivia3newANtB3_11TriviaPiecej2_EB7_:
   18|    432|    pub fn new(pieces: impl IntoIterator<Item = TriviaPiece>) -> Self {
   19|    432|        let mut trivia = Self::empty();
   20|  1.29k|        for piece in pieces {
   21|    864|            trivia.push(piece);
   22|    864|        }
   23|    432|        trivia
   24|    432|    }
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB3_6Trivia3newINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters7flatten7FlatMapINtNtB10_6cloned6ClonedINtNtB10_6filter6FilterINtNtNtB14_5slice4iter4IterNtB3_11TriviaPieceENCNvB2_11with_indent0EEINtNtCsjOdcKtOMjJI_5alloc3vec3VecB32_ENCB3n_s_0EEB7_:
   18|  7.01k|    pub fn new(pieces: impl IntoIterator<Item = TriviaPiece>) -> Self {
   19|  7.01k|        let mut trivia = Self::empty();
   20|  21.2k|        for piece in pieces {
   21|  14.1k|            trivia.push(piece);
   22|  14.1k|        }
   23|  7.01k|        trivia
   24|  7.01k|    }
_RNCNvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB4_6Trivia16contains_newline0B8_:
   39|  11.9k|        self.pieces.iter().any(|piece| piece.is_newline())
_RNCNvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB4_6Trivia16contains_comment0B8_:
   43|  1.77k|        self.pieces.iter().any(|piece| piece.is_comment())
_RNCNvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB4_6Trivia11with_indent0B8_:
   51|  7.59k|            .filter(|piece| !piece.is_space())
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB3_6Trivia3newINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtB10_6cloned6ClonedINtNtNtB14_5slice4iter4IterNtB3_11TriviaPieceEENCNCNvXs_NtB7_3fmtNtB30_14FormatCommentsNtNtB5_8rewriter14SyntaxRewriter13rewrite_token00EEB7_:
   18|  96.7k|    pub fn new(pieces: impl IntoIterator<Item = TriviaPiece>) -> Self {
   19|  96.7k|        let mut trivia = Self::empty();
   20|   104k|        for piece in pieces {
   21|  7.59k|            trivia.push(piece);
   22|  7.59k|        }
   23|  96.7k|        trivia
   24|  96.7k|    }
_RNCNvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB4_6Trivia9total_len0B8_:
   35|  1.35M|        self.pieces.iter().map(|piece| piece.total_len()).sum()
_RNCNvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB4_6Trivia23without_trailing_spaces0B8_:
   74|    882|        if new_pieces.last().is_some_and(|last| last.is_space()) {
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB3_6Trivia3newINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters6cloned6ClonedINtNtB10_5chain5ChainINtNtB10_3map3MapINtNtB10_6filter6FilterINtNtB10_3zip3ZipINtNtNtB14_5slice4iter4IterNtB3_11TriviaPieceEINtNtB10_4skip4SkipB35_EENCNCNvXs3_NtB7_3fmtNtB4o_20RemoveTrailingSpacesNtNtB5_8rewriter14SyntaxRewriter13rewrite_tokens1_00ENCB4g_s_0EINtNtB14_6option8IntoIterRB3w_EEEEB7_:
   18|  96.7k|    pub fn new(pieces: impl IntoIterator<Item = TriviaPiece>) -> Self {
   19|  96.7k|        let mut trivia = Self::empty();
   20|   104k|        for piece in pieces {
   21|  7.24k|            trivia.push(piece);
   22|  7.24k|        }
   23|  96.7k|        trivia
   24|  96.7k|    }
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB3_6Trivia3newANtB3_11TriviaPiecej1_EB7_:
   18|  3.47k|    pub fn new(pieces: impl IntoIterator<Item = TriviaPiece>) -> Self {
   19|  3.47k|        let mut trivia = Self::empty();
   20|  6.94k|        for piece in pieces {
   21|  3.47k|            trivia.push(piece);
   22|  3.47k|        }
   23|  3.47k|        trivia
   24|  3.47k|    }
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB3_6Trivia3newINtNtNtNtCs9nhK3FOW46N_4core4iter8adapters3map3MapINtNtB10_6cloned6ClonedINtNtNtB14_5slice4iter4IterNtB3_11TriviaPieceEENCNCNvXs4_NtB7_3fmtNtB31_13DedupNewlinesNtNtB5_8rewriter14SyntaxRewriter13rewrite_token00EEB7_:
   18|  96.7k|    pub fn new(pieces: impl IntoIterator<Item = TriviaPiece>) -> Self {
   19|  96.7k|        let mut trivia = Self::empty();
   20|   104k|        for piece in pieces {
   21|  7.24k|            trivia.push(piece);
   22|  7.24k|        }
   23|  96.7k|        trivia
   24|  96.7k|    }
_RNCNvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB4_6Trivia11with_indents_0B8_:
   53|  7.32k|            .flat_map(|piece| {
   54|  7.32k|                if piece.is_newline() {
   55|  6.85k|                    vec![piece, TriviaPiece::Space(indentation)]
   56|       |                } else {
   57|    468|                    vec![piece]
   58|       |                }
   59|  7.32k|            });
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax6triviaNtB3_6Trivia3newINtNtCsjOdcKtOMjJI_5alloc3vec3VecNtB3_11TriviaPieceEEB7_:
   18|  13.6k|    pub fn new(pieces: impl IntoIterator<Item = TriviaPiece>) -> Self {
   19|  13.6k|        let mut trivia = Self::empty();
   20|  21.7k|        for piece in pieces {
   21|  8.15k|            trivia.push(piece);
   22|  8.15k|        }
   23|  13.6k|        trivia
   24|  13.6k|    }

_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax13utility_typesINtB3_11NodeOrTokenNtNtB5_3cst10SyntaxNodeNtB18_11SyntaxTokenE5bimapB16_B1t_NCNCINvMNtB5_8rewriterB16_7rewriteNtCs4xxCAF7KXUf_3fmt13WithoutTriviaE00NCB23_s_0EB2B_:
   45|   193k|    pub fn bimap<NewNode, NewToken>(
   46|   193k|        self,
   47|   193k|        node_fn: impl FnOnce(Node) -> NewNode,
   48|   193k|        token_fn: impl FnOnce(Token) -> NewToken,
   49|   193k|    ) -> NodeOrToken<NewNode, NewToken> {
   50|   193k|        match self {
   51|  96.9k|            Self::Node(node) => NodeOrToken::Node(node_fn(node)),
   52|  96.7k|            Self::Token(token) => NodeOrToken::Token(token_fn(token)),
   53|       |        }
   54|   193k|    }
_RNvXs4_NtNtCsdJXOEzRi98w_5hedge6syntax13utility_typesINtB5_11NodeOrTokenNtNtB7_3cst10SyntaxNodeNtB1a_11SyntaxTokenENtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
    6|  1.10k|#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax13utility_typesINtB3_11NodeOrTokenNtNtB5_3cst10SyntaxNodeNtB18_11SyntaxTokenE5bimapB16_B1t_NCNCINvMNtB5_8rewriterB16_7rewriteNtNtB7_3fmt20RemoveTrailingSpacesE00NCB23_s_0EB7_:
   45|   193k|    pub fn bimap<NewNode, NewToken>(
   46|   193k|        self,
   47|   193k|        node_fn: impl FnOnce(Node) -> NewNode,
   48|   193k|        token_fn: impl FnOnce(Token) -> NewToken,
   49|   193k|    ) -> NodeOrToken<NewNode, NewToken> {
   50|   193k|        match self {
   51|  96.9k|            Self::Node(node) => NodeOrToken::Node(node_fn(node)),
   52|  96.7k|            Self::Token(token) => NodeOrToken::Token(token_fn(token)),
   53|       |        }
   54|   193k|    }
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax13utility_typesINtB3_11NodeOrTokenNtNtB5_3cst10SyntaxNodeNtB18_11SyntaxTokenE5bimapB16_B1t_NCNCINvMNtB5_8rewriterB16_7rewriteNtNtB7_3fmt12TabsToSpacesE00NCB23_s_0EB7_:
   45|   193k|    pub fn bimap<NewNode, NewToken>(
   46|   193k|        self,
   47|   193k|        node_fn: impl FnOnce(Node) -> NewNode,
   48|   193k|        token_fn: impl FnOnce(Token) -> NewToken,
   49|   193k|    ) -> NodeOrToken<NewNode, NewToken> {
   50|   193k|        match self {
   51|  96.9k|            Self::Node(node) => NodeOrToken::Node(node_fn(node)),
   52|  96.7k|            Self::Token(token) => NodeOrToken::Token(token_fn(token)),
   53|       |        }
   54|   193k|    }
_RNvXs4_NtNtCsdJXOEzRi98w_5hedge6syntax13utility_typesINtB5_11NodeOrTokenNtNtB7_3raw7RawNodeNtB1a_8RawTokenENtNtCs9nhK3FOW46N_4core5clone5Clone5cloneB9_:
    6|   701M|#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs7_NtNtCsdJXOEzRi98w_5hedge6syntax13utility_typesINtB5_11NodeOrTokenNtNtB7_3cst10SyntaxNodeNtB1a_11SyntaxTokenENtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
    6|   194k|#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvXs7_NtNtCsdJXOEzRi98w_5hedge6syntax13utility_typesINtB5_11NodeOrTokenNtNtB7_3raw7RawNodeNtB1a_8RawTokenENtNtCs9nhK3FOW46N_4core3cmp9PartialEq2eqB9_:
    6|   193k|#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
_RNvMNtNtCsdJXOEzRi98w_5hedge6syntax13utility_typesINtB2_11NodeOrTokenNtNtB4_3cst10SyntaxNodeNtB17_11SyntaxTokenE9into_nodeB6_:
   13|  2.10M|    pub fn into_node(self) -> Option<Node> {
   14|  2.10M|        if let Self::Node(v) = self {
   15|  2.10M|            Some(v)
   16|       |        } else {
   17|      0|            None
   18|       |        }
   19|  2.10M|    }
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax13utility_typesINtB3_11NodeOrTokenNtNtB5_3cst10SyntaxNodeNtB18_11SyntaxTokenE5bimapB16_B1t_NCNCINvMNtB5_8rewriterB16_7rewriteNtNtB7_3fmt13DedupNewlinesE00NCB23_s_0EB7_:
   45|   193k|    pub fn bimap<NewNode, NewToken>(
   46|   193k|        self,
   47|   193k|        node_fn: impl FnOnce(Node) -> NewNode,
   48|   193k|        token_fn: impl FnOnce(Token) -> NewToken,
   49|   193k|    ) -> NodeOrToken<NewNode, NewToken> {
   50|   193k|        match self {
   51|  96.9k|            Self::Node(node) => NodeOrToken::Node(node_fn(node)),
   52|  96.7k|            Self::Token(token) => NodeOrToken::Token(token_fn(token)),
   53|       |        }
   54|   193k|    }
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax13utility_typesINtB3_11NodeOrTokenNtNtB5_3cst10SyntaxNodeNtB18_11SyntaxTokenE5bimapB16_B1t_NCNCINvMNtB5_8rewriterB16_7rewriteNtNtB7_3fmt14FixIndentationE00NCB23_s_0EB7_:
   45|   193k|    pub fn bimap<NewNode, NewToken>(
   46|   193k|        self,
   47|   193k|        node_fn: impl FnOnce(Node) -> NewNode,
   48|   193k|        token_fn: impl FnOnce(Token) -> NewToken,
   49|   193k|    ) -> NodeOrToken<NewNode, NewToken> {
   50|   193k|        match self {
   51|  96.9k|            Self::Node(node) => NodeOrToken::Node(node_fn(node)),
   52|  96.7k|            Self::Token(token) => NodeOrToken::Token(token_fn(token)),
   53|       |        }
   54|   193k|    }
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax13utility_typesINtB3_11NodeOrTokenNtNtB5_3cst10SyntaxNodeNtB18_11SyntaxTokenE5bimapB16_B1t_NCNCINvMNtB5_8rewriterB16_7rewriteNtNtB7_3fmt14FormatCommentsE00NCB23_s_0EB7_:
   45|   193k|    pub fn bimap<NewNode, NewToken>(
   46|   193k|        self,
   47|   193k|        node_fn: impl FnOnce(Node) -> NewNode,
   48|   193k|        token_fn: impl FnOnce(Token) -> NewToken,
   49|   193k|    ) -> NodeOrToken<NewNode, NewToken> {
   50|   193k|        match self {
   51|  96.9k|            Self::Node(node) => NodeOrToken::Node(node_fn(node)),
   52|  96.7k|            Self::Token(token) => NodeOrToken::Token(token_fn(token)),
   53|       |        }
   54|   193k|    }
_RINvMNtNtCsdJXOEzRi98w_5hedge6syntax13utility_typesINtB3_11NodeOrTokenNtNtB5_3cst10SyntaxNodeNtB18_11SyntaxTokenE5bimapB16_B1t_NCNCINvMNtB5_8rewriterB16_7rewriteNtNtB7_3fmt9FixBracesE00NCB23_s_0EB7_:
   45|   193k|    pub fn bimap<NewNode, NewToken>(
   46|   193k|        self,
   47|   193k|        node_fn: impl FnOnce(Node) -> NewNode,
   48|   193k|        token_fn: impl FnOnce(Token) -> NewToken,
   49|   193k|    ) -> NodeOrToken<NewNode, NewToken> {
   50|   193k|        match self {
   51|  96.9k|            Self::Node(node) => NodeOrToken::Node(node_fn(node)),
   52|  96.7k|            Self::Token(token) => NodeOrToken::Token(token_fn(token)),
   53|       |        }
   54|   193k|    }

